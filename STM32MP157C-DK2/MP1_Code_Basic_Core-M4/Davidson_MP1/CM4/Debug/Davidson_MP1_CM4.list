
Davidson_MP1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ac  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  100066ac  100066ac  000266ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  100066fc  100066fc  00030020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  100066fc  100066fc  00030020  2**0
                  CONTENTS
  5 .ARM          00000000  100066fc  100066fc  00030020  2**0
                  CONTENTS
  6 .preinit_array 00000000  100066fc  100066fc  00030020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  100066fc  100066fc  000266fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  10006700  10006700  00026700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000020  10020000  10006704  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  10020020  10020020  00030020  2**0
                  CONTENTS
 11 .bss          00000108  10020020  10006724  00030020  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020128  1000682c  00030020  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030020  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026509  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032a3  00000000  00000000  00056559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f18  00000000  00000000  00059800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000dd0  00000000  00000000  0005a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000482b2  00000000  00000000  0005b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014d49  00000000  00000000  000a379a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001ce601  00000000  00000000  000b84e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00286ae4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003db8  00000000  00000000  00286b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	10020020 	.word	0x10020020
1000001c:	00000000 	.word	0x00000000
10000020:	10006694 	.word	0x10006694

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020024 	.word	0x10020024
1000003c:	10006694 	.word	0x10006694

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <BSP_GPIO_PinCfg>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
void BSP_GPIO_PinCfg(GPIO_TypeDef * GPIOx, uint32_t GPIO_Pin, uint32_t GPIO_Mode, uint32_t GPIO_Pull, uint32_t GPIO_Speed, uint32_t GPIO_Alternate)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	b08a      	sub	sp, #40	; 0x28
10000090:	af00      	add	r7, sp, #0
10000092:	60f8      	str	r0, [r7, #12]
10000094:	60b9      	str	r1, [r7, #8]
10000096:	607a      	str	r2, [r7, #4]
10000098:	603b      	str	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStructure;					//Structure contenant les arguments de la fonction GPIO_Init

	GPIO_InitStructure.Pin = GPIO_Pin;
1000009a:	68bb      	ldr	r3, [r7, #8]
1000009c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_Mode;
1000009e:	687b      	ldr	r3, [r7, #4]
100000a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_Pull;
100000a2:	683b      	ldr	r3, [r7, #0]
100000a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_Speed;
100000a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100000a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Alternate = GPIO_Alternate;
100000aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100000ac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOx, &GPIO_InitStructure);
100000ae:	f107 0314 	add.w	r3, r7, #20
100000b2:	4619      	mov	r1, r3
100000b4:	68f8      	ldr	r0, [r7, #12]
100000b6:	f000 ff0d 	bl	10000ed4 <HAL_GPIO_Init>
}
100000ba:	bf00      	nop
100000bc:	3728      	adds	r7, #40	; 0x28
100000be:	46bd      	mov	sp, r7
100000c0:	bd80      	pop	{r7, pc}
	...

100000c4 <init_leds>:
	  //HAL_GPIO_TogglePin(LED6_PORT, LED6_PIN);
	  HAL_GPIO_TogglePin(LED8_PORT, LED8_PIN);
	  HAL_GPIO_TogglePin(LED4_PORT, LED4_PIN);
}

void init_leds(){
100000c4:	b580      	push	{r7, lr}
100000c6:	b082      	sub	sp, #8
100000c8:	af02      	add	r7, sp, #8
	BSP_GPIO_PinCfg(BUTTON_USER1_PORT, BUTTON_USER1_PIN, GPIO_MODE_INPUT, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0);
100000ca:	2300      	movs	r3, #0
100000cc:	9301      	str	r3, [sp, #4]
100000ce:	2302      	movs	r3, #2
100000d0:	9300      	str	r3, [sp, #0]
100000d2:	2300      	movs	r3, #0
100000d4:	2200      	movs	r2, #0
100000d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
100000da:	481e      	ldr	r0, [pc, #120]	; (10000154 <init_leds+0x90>)
100000dc:	f7ff ffd6 	bl	1000008c <BSP_GPIO_PinCfg>
	//Button user2
	BSP_GPIO_PinCfg(BUTTON_USER2_PORT, BUTTON_USER2_PIN, GPIO_MODE_INPUT, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0);
100000e0:	2300      	movs	r3, #0
100000e2:	9301      	str	r3, [sp, #4]
100000e4:	2302      	movs	r3, #2
100000e6:	9300      	str	r3, [sp, #0]
100000e8:	2300      	movs	r3, #0
100000ea:	2200      	movs	r2, #0
100000ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
100000f0:	4818      	ldr	r0, [pc, #96]	; (10000154 <init_leds+0x90>)
100000f2:	f7ff ffcb 	bl	1000008c <BSP_GPIO_PinCfg>

	//Config des leds
	BSP_GPIO_PinCfg(LED4_PORT, LED4_PIN, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0);
100000f6:	2300      	movs	r3, #0
100000f8:	9301      	str	r3, [sp, #4]
100000fa:	2302      	movs	r3, #2
100000fc:	9300      	str	r3, [sp, #0]
100000fe:	2300      	movs	r3, #0
10000100:	2201      	movs	r2, #1
10000102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
10000106:	4813      	ldr	r0, [pc, #76]	; (10000154 <init_leds+0x90>)
10000108:	f7ff ffc0 	bl	1000008c <BSP_GPIO_PinCfg>
	BSP_GPIO_PinCfg(LED6_PORT, LED6_PIN, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0);
1000010c:	2300      	movs	r3, #0
1000010e:	9301      	str	r3, [sp, #4]
10000110:	2302      	movs	r3, #2
10000112:	9300      	str	r3, [sp, #0]
10000114:	2300      	movs	r3, #0
10000116:	2201      	movs	r2, #1
10000118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
1000011c:	480d      	ldr	r0, [pc, #52]	; (10000154 <init_leds+0x90>)
1000011e:	f7ff ffb5 	bl	1000008c <BSP_GPIO_PinCfg>
	BSP_GPIO_PinCfg(LED7_PORT, LED7_PIN, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0);
10000122:	2300      	movs	r3, #0
10000124:	9301      	str	r3, [sp, #4]
10000126:	2302      	movs	r3, #2
10000128:	9300      	str	r3, [sp, #0]
1000012a:	2300      	movs	r3, #0
1000012c:	2201      	movs	r2, #1
1000012e:	2180      	movs	r1, #128	; 0x80
10000130:	4809      	ldr	r0, [pc, #36]	; (10000158 <init_leds+0x94>)
10000132:	f7ff ffab 	bl	1000008c <BSP_GPIO_PinCfg>
	BSP_GPIO_PinCfg(LED8_PORT, LED8_PIN, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0);
10000136:	2300      	movs	r3, #0
10000138:	9301      	str	r3, [sp, #4]
1000013a:	2302      	movs	r3, #2
1000013c:	9300      	str	r3, [sp, #0]
1000013e:	2300      	movs	r3, #0
10000140:	2201      	movs	r2, #1
10000142:	f44f 6100 	mov.w	r1, #2048	; 0x800
10000146:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
1000014a:	f7ff ff9f 	bl	1000008c <BSP_GPIO_PinCfg>

}
1000014e:	bf00      	nop
10000150:	46bd      	mov	sp, r7
10000152:	bd80      	pop	{r7, pc}
10000154:	50002000 	.word	0x50002000
10000158:	50009000 	.word	0x50009000

1000015c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
1000015c:	b480      	push	{r7}
1000015e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
10000160:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000164:	2201      	movs	r2, #1
10000166:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
1000016a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000016e:	2280      	movs	r2, #128	; 0x80
10000170:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOD_CLK_ENABLE();
10000174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000178:	2208      	movs	r2, #8
1000017a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
1000017e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000182:	2202      	movs	r2, #2
10000184:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

}
10000188:	bf00      	nop
1000018a:	46bd      	mov	sp, r7
1000018c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000190:	4770      	bx	lr
	...

10000194 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c5;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
10000194:	b580      	push	{r7, lr}
10000196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
10000198:	4b1b      	ldr	r3, [pc, #108]	; (10000208 <MX_I2C1_Init+0x74>)
1000019a:	4a1c      	ldr	r2, [pc, #112]	; (1000020c <MX_I2C1_Init+0x78>)
1000019c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
1000019e:	4b1a      	ldr	r3, [pc, #104]	; (10000208 <MX_I2C1_Init+0x74>)
100001a0:	4a1b      	ldr	r2, [pc, #108]	; (10000210 <MX_I2C1_Init+0x7c>)
100001a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
100001a4:	4b18      	ldr	r3, [pc, #96]	; (10000208 <MX_I2C1_Init+0x74>)
100001a6:	2200      	movs	r2, #0
100001a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
100001aa:	4b17      	ldr	r3, [pc, #92]	; (10000208 <MX_I2C1_Init+0x74>)
100001ac:	2201      	movs	r2, #1
100001ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
100001b0:	4b15      	ldr	r3, [pc, #84]	; (10000208 <MX_I2C1_Init+0x74>)
100001b2:	2200      	movs	r2, #0
100001b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
100001b6:	4b14      	ldr	r3, [pc, #80]	; (10000208 <MX_I2C1_Init+0x74>)
100001b8:	2200      	movs	r2, #0
100001ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
100001bc:	4b12      	ldr	r3, [pc, #72]	; (10000208 <MX_I2C1_Init+0x74>)
100001be:	2200      	movs	r2, #0
100001c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
100001c2:	4b11      	ldr	r3, [pc, #68]	; (10000208 <MX_I2C1_Init+0x74>)
100001c4:	2200      	movs	r2, #0
100001c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
100001c8:	4b0f      	ldr	r3, [pc, #60]	; (10000208 <MX_I2C1_Init+0x74>)
100001ca:	2200      	movs	r2, #0
100001cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
100001ce:	480e      	ldr	r0, [pc, #56]	; (10000208 <MX_I2C1_Init+0x74>)
100001d0:	f001 f843 	bl	1000125a <HAL_I2C_Init>
100001d4:	4603      	mov	r3, r0
100001d6:	2b00      	cmp	r3, #0
100001d8:	d001      	beq.n	100001de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
100001da:	f000 f9c0 	bl	1000055e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
100001de:	2100      	movs	r1, #0
100001e0:	4809      	ldr	r0, [pc, #36]	; (10000208 <MX_I2C1_Init+0x74>)
100001e2:	f001 fe1b 	bl	10001e1c <HAL_I2CEx_ConfigAnalogFilter>
100001e6:	4603      	mov	r3, r0
100001e8:	2b00      	cmp	r3, #0
100001ea:	d001      	beq.n	100001f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
100001ec:	f000 f9b7 	bl	1000055e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
100001f0:	2100      	movs	r1, #0
100001f2:	4805      	ldr	r0, [pc, #20]	; (10000208 <MX_I2C1_Init+0x74>)
100001f4:	f001 fe5d 	bl	10001eb2 <HAL_I2CEx_ConfigDigitalFilter>
100001f8:	4603      	mov	r3, r0
100001fa:	2b00      	cmp	r3, #0
100001fc:	d001      	beq.n	10000202 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
100001fe:	f000 f9ae 	bl	1000055e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
10000202:	bf00      	nop
10000204:	bd80      	pop	{r7, pc}
10000206:	bf00      	nop
10000208:	1002003c 	.word	0x1002003c
1000020c:	40012000 	.word	0x40012000
10000210:	10707dbc 	.word	0x10707dbc

10000214 <MX_I2C5_Init>:
/* I2C5 init function */
void MX_I2C5_Init(void)
{
10000214:	b580      	push	{r7, lr}
10000216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
10000218:	4b1c      	ldr	r3, [pc, #112]	; (1000028c <MX_I2C5_Init+0x78>)
1000021a:	4a1d      	ldr	r2, [pc, #116]	; (10000290 <MX_I2C5_Init+0x7c>)
1000021c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x10707DBC;
1000021e:	4b1b      	ldr	r3, [pc, #108]	; (1000028c <MX_I2C5_Init+0x78>)
10000220:	4a1c      	ldr	r2, [pc, #112]	; (10000294 <MX_I2C5_Init+0x80>)
10000222:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
10000224:	4b19      	ldr	r3, [pc, #100]	; (1000028c <MX_I2C5_Init+0x78>)
10000226:	2200      	movs	r2, #0
10000228:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
1000022a:	4b18      	ldr	r3, [pc, #96]	; (1000028c <MX_I2C5_Init+0x78>)
1000022c:	2201      	movs	r2, #1
1000022e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
10000230:	4b16      	ldr	r3, [pc, #88]	; (1000028c <MX_I2C5_Init+0x78>)
10000232:	2200      	movs	r2, #0
10000234:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
10000236:	4b15      	ldr	r3, [pc, #84]	; (1000028c <MX_I2C5_Init+0x78>)
10000238:	2200      	movs	r2, #0
1000023a:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
1000023c:	4b13      	ldr	r3, [pc, #76]	; (1000028c <MX_I2C5_Init+0x78>)
1000023e:	2200      	movs	r2, #0
10000240:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
10000242:	4b12      	ldr	r3, [pc, #72]	; (1000028c <MX_I2C5_Init+0x78>)
10000244:	2200      	movs	r2, #0
10000246:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
10000248:	4b10      	ldr	r3, [pc, #64]	; (1000028c <MX_I2C5_Init+0x78>)
1000024a:	2200      	movs	r2, #0
1000024c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
1000024e:	480f      	ldr	r0, [pc, #60]	; (1000028c <MX_I2C5_Init+0x78>)
10000250:	f001 f803 	bl	1000125a <HAL_I2C_Init>
10000254:	4603      	mov	r3, r0
10000256:	2b00      	cmp	r3, #0
10000258:	d001      	beq.n	1000025e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
1000025a:	f000 f980 	bl	1000055e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
1000025e:	2100      	movs	r1, #0
10000260:	480a      	ldr	r0, [pc, #40]	; (1000028c <MX_I2C5_Init+0x78>)
10000262:	f001 fddb 	bl	10001e1c <HAL_I2CEx_ConfigAnalogFilter>
10000266:	4603      	mov	r3, r0
10000268:	2b00      	cmp	r3, #0
1000026a:	d001      	beq.n	10000270 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
1000026c:	f000 f977 	bl	1000055e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
10000270:	2100      	movs	r1, #0
10000272:	4806      	ldr	r0, [pc, #24]	; (1000028c <MX_I2C5_Init+0x78>)
10000274:	f001 fe1d 	bl	10001eb2 <HAL_I2CEx_ConfigDigitalFilter>
10000278:	4603      	mov	r3, r0
1000027a:	2b00      	cmp	r3, #0
1000027c:	d001      	beq.n	10000282 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
1000027e:	f000 f96e 	bl	1000055e <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */
  HAL_I2C_MspInit(&hi2c5);
10000282:	4802      	ldr	r0, [pc, #8]	; (1000028c <MX_I2C5_Init+0x78>)
10000284:	f000 f808 	bl	10000298 <HAL_I2C_MspInit>
  /* USER CODE END I2C5_Init 2 */

}
10000288:	bf00      	nop
1000028a:	bd80      	pop	{r7, pc}
1000028c:	10020090 	.word	0x10020090
10000290:	40015000 	.word	0x40015000
10000294:	10707dbc 	.word	0x10707dbc

10000298 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
10000298:	b580      	push	{r7, lr}
1000029a:	b0de      	sub	sp, #376	; 0x178
1000029c:	af00      	add	r7, sp, #0
1000029e:	1d3b      	adds	r3, r7, #4
100002a0:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
100002a2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100002a6:	2200      	movs	r2, #0
100002a8:	601a      	str	r2, [r3, #0]
100002aa:	605a      	str	r2, [r3, #4]
100002ac:	609a      	str	r2, [r3, #8]
100002ae:	60da      	str	r2, [r3, #12]
100002b0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100002b2:	f107 0308 	add.w	r3, r7, #8
100002b6:	4618      	mov	r0, r3
100002b8:	f44f 73ac 	mov.w	r3, #344	; 0x158
100002bc:	461a      	mov	r2, r3
100002be:	2100      	movs	r1, #0
100002c0:	f006 f9e0 	bl	10006684 <memset>
  if(i2cHandle->Instance==I2C1)
100002c4:	1d3b      	adds	r3, r7, #4
100002c6:	681b      	ldr	r3, [r3, #0]
100002c8:	681b      	ldr	r3, [r3, #0]
100002ca:	4a45      	ldr	r2, [pc, #276]	; (100003e0 <HAL_I2C_MspInit+0x148>)
100002cc:	4293      	cmp	r3, r2
100002ce:	d13e      	bne.n	1000034e <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
100002d0:	4b44      	ldr	r3, [pc, #272]	; (100003e4 <HAL_I2C_MspInit+0x14c>)
100002d2:	681b      	ldr	r3, [r3, #0]
100002d4:	f003 0307 	and.w	r3, r3, #7
100002d8:	2b04      	cmp	r3, #4
100002da:	d116      	bne.n	1000030a <HAL_I2C_MspInit+0x72>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C12;
100002dc:	f107 0108 	add.w	r1, r7, #8
100002e0:	f04f 0210 	mov.w	r2, #16
100002e4:	f04f 0300 	mov.w	r3, #0
100002e8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.I2c12ClockSelection = RCC_I2C12CLKSOURCE_PCLK1;
100002ec:	f107 0308 	add.w	r3, r7, #8
100002f0:	2200      	movs	r2, #0
100002f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100002f6:	f107 0308 	add.w	r3, r7, #8
100002fa:	4618      	mov	r0, r3
100002fc:	f003 fc40 	bl	10003b80 <HAL_RCCEx_PeriphCLKConfig>
10000300:	4603      	mov	r3, r0
10000302:	2b00      	cmp	r3, #0
10000304:	d001      	beq.n	1000030a <HAL_I2C_MspInit+0x72>
    {
      Error_Handler();
10000306:	f000 f92a 	bl	1000055e <Error_Handler>
    }

  }

    __HAL_RCC_GPIOH_CLK_ENABLE();
1000030a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000030e:	2280      	movs	r2, #128	; 0x80
10000310:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**I2C1 GPIO Configuration
    PH12     ------> I2C1_SDA
    PH11     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
10000314:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
10000318:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
1000031c:	2312      	movs	r3, #18
1000031e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10000322:	2300      	movs	r3, #0
10000324:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10000328:	2300      	movs	r3, #0
1000032a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C1;
1000032e:	2305      	movs	r3, #5
10000330:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
10000334:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10000338:	4619      	mov	r1, r3
1000033a:	482b      	ldr	r0, [pc, #172]	; (100003e8 <HAL_I2C_MspInit+0x150>)
1000033c:	f000 fdca 	bl	10000ed4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
10000340:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000344:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
10000348:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
    __HAL_RCC_I2C5_CLK_ENABLE();
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
1000034c:	e043      	b.n	100003d6 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C5)
1000034e:	1d3b      	adds	r3, r7, #4
10000350:	681b      	ldr	r3, [r3, #0]
10000352:	681b      	ldr	r3, [r3, #0]
10000354:	4a25      	ldr	r2, [pc, #148]	; (100003ec <HAL_I2C_MspInit+0x154>)
10000356:	4293      	cmp	r3, r2
10000358:	d13d      	bne.n	100003d6 <HAL_I2C_MspInit+0x13e>
  if(IS_ENGINEERING_BOOT_MODE())
1000035a:	4b22      	ldr	r3, [pc, #136]	; (100003e4 <HAL_I2C_MspInit+0x14c>)
1000035c:	681b      	ldr	r3, [r3, #0]
1000035e:	f003 0307 	and.w	r3, r3, #7
10000362:	2b04      	cmp	r3, #4
10000364:	d116      	bne.n	10000394 <HAL_I2C_MspInit+0xfc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C35;
10000366:	f107 0108 	add.w	r1, r7, #8
1000036a:	f04f 0220 	mov.w	r2, #32
1000036e:	f04f 0300 	mov.w	r3, #0
10000372:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.I2c35ClockSelection = RCC_I2C35CLKSOURCE_PCLK1;
10000376:	f107 0308 	add.w	r3, r7, #8
1000037a:	2200      	movs	r2, #0
1000037c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000380:	f107 0308 	add.w	r3, r7, #8
10000384:	4618      	mov	r0, r3
10000386:	f003 fbfb 	bl	10003b80 <HAL_RCCEx_PeriphCLKConfig>
1000038a:	4603      	mov	r3, r0
1000038c:	2b00      	cmp	r3, #0
1000038e:	d001      	beq.n	10000394 <HAL_I2C_MspInit+0xfc>
      Error_Handler();
10000390:	f000 f8e5 	bl	1000055e <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
10000394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000398:	2201      	movs	r2, #1
1000039a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
1000039e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
100003a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
100003a6:	2312      	movs	r3, #18
100003a8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100003ac:	2300      	movs	r3, #0
100003ae:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100003b2:	2300      	movs	r3, #0
100003b4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
100003b8:	2304      	movs	r3, #4
100003ba:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100003be:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100003c2:	4619      	mov	r1, r3
100003c4:	480a      	ldr	r0, [pc, #40]	; (100003f0 <HAL_I2C_MspInit+0x158>)
100003c6:	f000 fd85 	bl	10000ed4 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
100003ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100003ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
100003d2:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
}
100003d6:	bf00      	nop
100003d8:	f507 77bc 	add.w	r7, r7, #376	; 0x178
100003dc:	46bd      	mov	sp, r7
100003de:	bd80      	pop	{r7, pc}
100003e0:	40012000 	.word	0x40012000
100003e4:	50020000 	.word	0x50020000
100003e8:	50009000 	.word	0x50009000
100003ec:	40015000 	.word	0x40015000
100003f0:	50002000 	.word	0x50002000

100003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100003f4:	b580      	push	{r7, lr}
100003f6:	b086      	sub	sp, #24
100003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
100003fa:	f000 fbc5 	bl	10000b88 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
100003fe:	4b1d      	ldr	r3, [pc, #116]	; (10000474 <main+0x80>)
10000400:	681b      	ldr	r3, [r3, #0]
10000402:	f003 0307 	and.w	r3, r3, #7
10000406:	2b04      	cmp	r3, #4
10000408:	d101      	bne.n	1000040e <main+0x1a>
  {
    /* Configure the system clock */
    SystemClock_Config();
1000040a:	f000 f839 	bl	10000480 <SystemClock_Config>

  /* USER CODE END SysInit */


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
1000040e:	f7ff fea5 	bl	1000015c <MX_GPIO_Init>
  MX_I2C5_Init();
10000412:	f7ff feff 	bl	10000214 <MX_I2C5_Init>
  MX_I2C1_Init();
10000416:	f7ff febd 	bl	10000194 <MX_I2C1_Init>
  MX_TIM1_Init();
1000041a:	f000 f90b 	bl	10000634 <MX_TIM1_Init>
  //MX_UART4_Init();



  /* USER CODE BEGIN 2 */
  init_leds();
1000041e:	f7ff fe51 	bl	100000c4 <init_leds>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
10000422:	2100      	movs	r1, #0
10000424:	4814      	ldr	r0, [pc, #80]	; (10000478 <main+0x84>)
10000426:	f005 f9b9 	bl	1000579c <HAL_TIM_PWM_Start>

  X_NUCLEO_SENSORS_t myNucleo = {0,0,0,0,0,0,0.0};
1000042a:	1d3b      	adds	r3, r7, #4
1000042c:	2200      	movs	r2, #0
1000042e:	601a      	str	r2, [r3, #0]
10000430:	605a      	str	r2, [r3, #4]
10000432:	609a      	str	r2, [r3, #8]
10000434:	60da      	str	r2, [r3, #12]


  //HAL_StatusTypeDef status = init_all_sensors();

  HAL_StatusTypeDef status = Init_all_sensors();
10000436:	f000 fa2f 	bl	10000898 <Init_all_sensors>
1000043a:	4603      	mov	r3, r0
1000043c:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK){
1000043e:	7dfb      	ldrb	r3, [r7, #23]
10000440:	2b00      	cmp	r3, #0
10000442:	d106      	bne.n	10000452 <main+0x5e>
	  HAL_GPIO_WritePin(LED8_PORT, LED8_PIN, SET);
10000444:	2201      	movs	r2, #1
10000446:	f44f 6100 	mov.w	r1, #2048	; 0x800
1000044a:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
1000044e:	f000 feeb 	bl	10001228 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* USER CODE END WHILE */
	  Read_Gyroscope(&myNucleo);
10000452:	1d3b      	adds	r3, r7, #4
10000454:	4618      	mov	r0, r3
10000456:	f000 fac3 	bl	100009e0 <Read_Gyroscope>
	  HAL_Delay(50);
1000045a:	2032      	movs	r0, #50	; 0x32
1000045c:	f000 fc04 	bl	10000c68 <HAL_Delay>
	  if(myNucleo.Gyroscope_X < 0){
10000460:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
10000464:	2b00      	cmp	r3, #0
10000466:	daf4      	bge.n	10000452 <main+0x5e>
		  HAL_GPIO_WritePin(LED7_PORT, LED7_PIN, SET);
10000468:	2201      	movs	r2, #1
1000046a:	2180      	movs	r1, #128	; 0x80
1000046c:	4803      	ldr	r0, [pc, #12]	; (1000047c <main+0x88>)
1000046e:	f000 fedb 	bl	10001228 <HAL_GPIO_WritePin>
	  Read_Gyroscope(&myNucleo);
10000472:	e7ee      	b.n	10000452 <main+0x5e>
10000474:	50020000 	.word	0x50020000
10000478:	100200e4 	.word	0x100200e4
1000047c:	50009000 	.word	0x50009000

10000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000480:	b580      	push	{r7, lr}
10000482:	b0d2      	sub	sp, #328	; 0x148
10000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000486:	f107 0334 	add.w	r3, r7, #52	; 0x34
1000048a:	4618      	mov	r0, r3
1000048c:	f44f 738a 	mov.w	r3, #276	; 0x114
10000490:	461a      	mov	r2, r3
10000492:	2100      	movs	r1, #0
10000494:	f006 f8f6 	bl	10006684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000498:	1d3b      	adds	r3, r7, #4
1000049a:	4618      	mov	r0, r3
1000049c:	2330      	movs	r3, #48	; 0x30
1000049e:	461a      	mov	r2, r3
100004a0:	2100      	movs	r1, #0
100004a2:	f006 f8ef 	bl	10006684 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
100004a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004aa:	220a      	movs	r2, #10
100004ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100004ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004b2:	2201      	movs	r2, #1
100004b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
100004b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004ba:	2210      	movs	r2, #16
100004bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
100004be:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004c2:	2200      	movs	r2, #0
100004c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
100004c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004ca:	2201      	movs	r2, #1
100004cc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
100004ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004d2:	2200      	movs	r2, #0
100004d4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
100004d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004da:	2200      	movs	r2, #0
100004dc:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
100004de:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004e2:	2200      	movs	r2, #0
100004e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
100004e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004ec:	2200      	movs	r2, #0
100004ee:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100004f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004f6:	4618      	mov	r0, r3
100004f8:	f001 fd28 	bl	10001f4c <HAL_RCC_OscConfig>
100004fc:	4603      	mov	r3, r0
100004fe:	2b00      	cmp	r3, #0
10000500:	d001      	beq.n	10000506 <SystemClock_Config+0x86>
  {
    Error_Handler();
10000502:	f000 f82c 	bl	1000055e <Error_Handler>
  }
  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000506:	1d3b      	adds	r3, r7, #4
10000508:	22fe      	movs	r2, #254	; 0xfe
1000050a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
1000050c:	1d3b      	adds	r3, r7, #4
1000050e:	2200      	movs	r2, #0
10000510:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000512:	1d3b      	adds	r3, r7, #4
10000514:	2200      	movs	r2, #0
10000516:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_HSI;
10000518:	1d3b      	adds	r3, r7, #4
1000051a:	2200      	movs	r2, #0
1000051c:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
1000051e:	1d3b      	adds	r3, r7, #4
10000520:	2200      	movs	r2, #0
10000522:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
10000524:	1d3b      	adds	r3, r7, #4
10000526:	2200      	movs	r2, #0
10000528:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
1000052a:	1d3b      	adds	r3, r7, #4
1000052c:	2200      	movs	r2, #0
1000052e:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV1;
10000530:	1d3b      	adds	r3, r7, #4
10000532:	2200      	movs	r2, #0
10000534:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV1;
10000536:	1d3b      	adds	r3, r7, #4
10000538:	2200      	movs	r2, #0
1000053a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV1;
1000053c:	1d3b      	adds	r3, r7, #4
1000053e:	2200      	movs	r2, #0
10000540:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000542:	1d3b      	adds	r3, r7, #4
10000544:	4618      	mov	r0, r3
10000546:	f002 fa9d 	bl	10002a84 <HAL_RCC_ClockConfig>
1000054a:	4603      	mov	r3, r0
1000054c:	2b00      	cmp	r3, #0
1000054e:	d001      	beq.n	10000554 <SystemClock_Config+0xd4>
  {
    Error_Handler();
10000550:	f000 f805 	bl	1000055e <Error_Handler>
  }
}
10000554:	bf00      	nop
10000556:	f507 77a4 	add.w	r7, r7, #328	; 0x148
1000055a:	46bd      	mov	sp, r7
1000055c:	bd80      	pop	{r7, pc}

1000055e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
1000055e:	b480      	push	{r7}
10000560:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000562:	b672      	cpsid	i
}
10000564:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10000566:	e7fe      	b.n	10000566 <Error_Handler+0x8>

10000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000568:	b580      	push	{r7, lr}
1000056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
1000056c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000570:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000574:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10000578:	2200      	movs	r2, #0
1000057a:	2101      	movs	r1, #1
1000057c:	f06f 000b 	mvn.w	r0, #11
10000580:	f000 fc71 	bl	10000e66 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10000584:	2200      	movs	r2, #0
10000586:	2101      	movs	r1, #1
10000588:	f06f 000a 	mvn.w	r0, #10
1000058c:	f000 fc6b 	bl	10000e66 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10000590:	2200      	movs	r2, #0
10000592:	2101      	movs	r1, #1
10000594:	f06f 0009 	mvn.w	r0, #9
10000598:	f000 fc65 	bl	10000e66 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
1000059c:	2200      	movs	r2, #0
1000059e:	2101      	movs	r1, #1
100005a0:	f06f 0004 	mvn.w	r0, #4
100005a4:	f000 fc5f 	bl	10000e66 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100005a8:	2200      	movs	r2, #0
100005aa:	2101      	movs	r1, #1
100005ac:	f06f 0003 	mvn.w	r0, #3
100005b0:	f000 fc59 	bl	10000e66 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100005b4:	2200      	movs	r2, #0
100005b6:	2101      	movs	r1, #1
100005b8:	f06f 0001 	mvn.w	r0, #1
100005bc:	f000 fc53 	bl	10000e66 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100005c0:	2200      	movs	r2, #0
100005c2:	2100      	movs	r1, #0
100005c4:	2091      	movs	r0, #145	; 0x91
100005c6:	f000 fc4e 	bl	10000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
100005ca:	2091      	movs	r0, #145	; 0x91
100005cc:	f000 fc67 	bl	10000e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100005d0:	bf00      	nop
100005d2:	bd80      	pop	{r7, pc}

100005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100005d4:	b480      	push	{r7}
100005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
100005d8:	e7fe      	b.n	100005d8 <NMI_Handler+0x4>

100005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100005da:	b480      	push	{r7}
100005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100005de:	e7fe      	b.n	100005de <HardFault_Handler+0x4>

100005e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100005e0:	b480      	push	{r7}
100005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100005e4:	e7fe      	b.n	100005e4 <MemManage_Handler+0x4>

100005e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100005e6:	b480      	push	{r7}
100005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100005ea:	e7fe      	b.n	100005ea <BusFault_Handler+0x4>

100005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
100005ec:	b480      	push	{r7}
100005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100005f0:	e7fe      	b.n	100005f0 <UsageFault_Handler+0x4>

100005f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100005f2:	b480      	push	{r7}
100005f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100005f6:	bf00      	nop
100005f8:	46bd      	mov	sp, r7
100005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100005fe:	4770      	bx	lr

10000600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000600:	b480      	push	{r7}
10000602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000604:	bf00      	nop
10000606:	46bd      	mov	sp, r7
10000608:	f85d 7b04 	ldr.w	r7, [sp], #4
1000060c:	4770      	bx	lr

1000060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1000060e:	b480      	push	{r7}
10000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000612:	bf00      	nop
10000614:	46bd      	mov	sp, r7
10000616:	f85d 7b04 	ldr.w	r7, [sp], #4
1000061a:	4770      	bx	lr

1000061c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1000061c:	b580      	push	{r7, lr}
1000061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000620:	f000 fb02 	bl	10000c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000624:	bf00      	nop
10000626:	bd80      	pop	{r7, pc}

10000628 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10000628:	b580      	push	{r7, lr}
1000062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
1000062c:	f002 fe48 	bl	100032c0 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000630:	bf00      	nop
10000632:	bd80      	pop	{r7, pc}

10000634 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
10000634:	b580      	push	{r7, lr}
10000636:	b09c      	sub	sp, #112	; 0x70
10000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
1000063a:	f107 0360 	add.w	r3, r7, #96	; 0x60
1000063e:	2200      	movs	r2, #0
10000640:	601a      	str	r2, [r3, #0]
10000642:	605a      	str	r2, [r3, #4]
10000644:	609a      	str	r2, [r3, #8]
10000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
10000648:	f107 0354 	add.w	r3, r7, #84	; 0x54
1000064c:	2200      	movs	r2, #0
1000064e:	601a      	str	r2, [r3, #0]
10000650:	605a      	str	r2, [r3, #4]
10000652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
10000654:	f107 0338 	add.w	r3, r7, #56	; 0x38
10000658:	2200      	movs	r2, #0
1000065a:	601a      	str	r2, [r3, #0]
1000065c:	605a      	str	r2, [r3, #4]
1000065e:	609a      	str	r2, [r3, #8]
10000660:	60da      	str	r2, [r3, #12]
10000662:	611a      	str	r2, [r3, #16]
10000664:	615a      	str	r2, [r3, #20]
10000666:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
10000668:	1d3b      	adds	r3, r7, #4
1000066a:	2234      	movs	r2, #52	; 0x34
1000066c:	2100      	movs	r1, #0
1000066e:	4618      	mov	r0, r3
10000670:	f006 f808 	bl	10006684 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
10000674:	4b46      	ldr	r3, [pc, #280]	; (10000790 <MX_TIM1_Init+0x15c>)
10000676:	f04f 4288 	mov.w	r2, #1140850688	; 0x44000000
1000067a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
1000067c:	4b44      	ldr	r3, [pc, #272]	; (10000790 <MX_TIM1_Init+0x15c>)
1000067e:	2200      	movs	r2, #0
10000680:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
10000682:	4b43      	ldr	r3, [pc, #268]	; (10000790 <MX_TIM1_Init+0x15c>)
10000684:	2200      	movs	r2, #0
10000686:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
10000688:	4b41      	ldr	r3, [pc, #260]	; (10000790 <MX_TIM1_Init+0x15c>)
1000068a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1000068e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
10000690:	4b3f      	ldr	r3, [pc, #252]	; (10000790 <MX_TIM1_Init+0x15c>)
10000692:	2200      	movs	r2, #0
10000694:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
10000696:	4b3e      	ldr	r3, [pc, #248]	; (10000790 <MX_TIM1_Init+0x15c>)
10000698:	2200      	movs	r2, #0
1000069a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1000069c:	4b3c      	ldr	r3, [pc, #240]	; (10000790 <MX_TIM1_Init+0x15c>)
1000069e:	2200      	movs	r2, #0
100006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
100006a2:	483b      	ldr	r0, [pc, #236]	; (10000790 <MX_TIM1_Init+0x15c>)
100006a4:	f005 f81a 	bl	100056dc <HAL_TIM_Base_Init>
100006a8:	4603      	mov	r3, r0
100006aa:	2b00      	cmp	r3, #0
100006ac:	d001      	beq.n	100006b2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
100006ae:	f7ff ff56 	bl	1000055e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
100006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
100006b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
100006b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
100006bc:	4619      	mov	r1, r3
100006be:	4834      	ldr	r0, [pc, #208]	; (10000790 <MX_TIM1_Init+0x15c>)
100006c0:	f005 f9da 	bl	10005a78 <HAL_TIM_ConfigClockSource>
100006c4:	4603      	mov	r3, r0
100006c6:	2b00      	cmp	r3, #0
100006c8:	d001      	beq.n	100006ce <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
100006ca:	f7ff ff48 	bl	1000055e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
100006ce:	4830      	ldr	r0, [pc, #192]	; (10000790 <MX_TIM1_Init+0x15c>)
100006d0:	f005 f82f 	bl	10005732 <HAL_TIM_PWM_Init>
100006d4:	4603      	mov	r3, r0
100006d6:	2b00      	cmp	r3, #0
100006d8:	d001      	beq.n	100006de <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
100006da:	f7ff ff40 	bl	1000055e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
100006de:	2300      	movs	r3, #0
100006e0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
100006e2:	2300      	movs	r3, #0
100006e4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
100006e6:	2300      	movs	r3, #0
100006e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
100006ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
100006ee:	4619      	mov	r1, r3
100006f0:	4827      	ldr	r0, [pc, #156]	; (10000790 <MX_TIM1_Init+0x15c>)
100006f2:	f005 feab 	bl	1000644c <HAL_TIMEx_MasterConfigSynchronization>
100006f6:	4603      	mov	r3, r0
100006f8:	2b00      	cmp	r3, #0
100006fa:	d001      	beq.n	10000700 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
100006fc:	f7ff ff2f 	bl	1000055e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
10000700:	2360      	movs	r3, #96	; 0x60
10000702:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
10000704:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
10000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1000070a:	2300      	movs	r3, #0
1000070c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
1000070e:	2300      	movs	r3, #0
10000710:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
10000712:	2300      	movs	r3, #0
10000714:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
10000716:	2300      	movs	r3, #0
10000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
1000071a:	2300      	movs	r3, #0
1000071c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
1000071e:	f107 0338 	add.w	r3, r7, #56	; 0x38
10000722:	2200      	movs	r2, #0
10000724:	4619      	mov	r1, r3
10000726:	481a      	ldr	r0, [pc, #104]	; (10000790 <MX_TIM1_Init+0x15c>)
10000728:	f005 f88e 	bl	10005848 <HAL_TIM_PWM_ConfigChannel>
1000072c:	4603      	mov	r3, r0
1000072e:	2b00      	cmp	r3, #0
10000730:	d001      	beq.n	10000736 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
10000732:	f7ff ff14 	bl	1000055e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
10000736:	2300      	movs	r3, #0
10000738:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
1000073a:	2300      	movs	r3, #0
1000073c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
1000073e:	2300      	movs	r3, #0
10000740:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
10000742:	2300      	movs	r3, #0
10000744:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
10000746:	2300      	movs	r3, #0
10000748:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
1000074a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1000074e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
10000750:	2300      	movs	r3, #0
10000752:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
10000754:	2300      	movs	r3, #0
10000756:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
10000758:	2300      	movs	r3, #0
1000075a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
1000075c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
10000760:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
10000762:	2300      	movs	r3, #0
10000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
10000766:	2300      	movs	r3, #0
10000768:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
1000076a:	2300      	movs	r3, #0
1000076c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
1000076e:	1d3b      	adds	r3, r7, #4
10000770:	4619      	mov	r1, r3
10000772:	4807      	ldr	r0, [pc, #28]	; (10000790 <MX_TIM1_Init+0x15c>)
10000774:	f005 fec4 	bl	10006500 <HAL_TIMEx_ConfigBreakDeadTime>
10000778:	4603      	mov	r3, r0
1000077a:	2b00      	cmp	r3, #0
1000077c:	d001      	beq.n	10000782 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
1000077e:	f7ff feee 	bl	1000055e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
10000782:	4803      	ldr	r0, [pc, #12]	; (10000790 <MX_TIM1_Init+0x15c>)
10000784:	f000 f81a 	bl	100007bc <HAL_TIM_MspPostInit>

}
10000788:	bf00      	nop
1000078a:	3770      	adds	r7, #112	; 0x70
1000078c:	46bd      	mov	sp, r7
1000078e:	bd80      	pop	{r7, pc}
10000790:	100200e4 	.word	0x100200e4

10000794 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
10000794:	b480      	push	{r7}
10000796:	b083      	sub	sp, #12
10000798:	af00      	add	r7, sp, #0
1000079a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
1000079c:	687b      	ldr	r3, [r7, #4]
1000079e:	681b      	ldr	r3, [r3, #0]
100007a0:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
100007a4:	d104      	bne.n	100007b0 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
100007a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007aa:	2201      	movs	r2, #1
100007ac:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
100007b0:	bf00      	nop
100007b2:	370c      	adds	r7, #12
100007b4:	46bd      	mov	sp, r7
100007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
100007ba:	4770      	bx	lr

100007bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
100007bc:	b580      	push	{r7, lr}
100007be:	b088      	sub	sp, #32
100007c0:	af00      	add	r7, sp, #0
100007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
100007c4:	f107 030c 	add.w	r3, r7, #12
100007c8:	2200      	movs	r2, #0
100007ca:	601a      	str	r2, [r3, #0]
100007cc:	605a      	str	r2, [r3, #4]
100007ce:	609a      	str	r2, [r3, #8]
100007d0:	60da      	str	r2, [r3, #12]
100007d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
100007d4:	687b      	ldr	r3, [r7, #4]
100007d6:	681b      	ldr	r3, [r3, #0]
100007d8:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
100007dc:	d115      	bne.n	1000080a <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
100007de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007e2:	2201      	movs	r2, #1
100007e4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
100007e8:	f44f 7380 	mov.w	r3, #256	; 0x100
100007ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100007ee:	2302      	movs	r3, #2
100007f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100007f2:	2300      	movs	r3, #0
100007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100007f6:	2300      	movs	r3, #0
100007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
100007fa:	2301      	movs	r3, #1
100007fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100007fe:	f107 030c 	add.w	r3, r7, #12
10000802:	4619      	mov	r1, r3
10000804:	4803      	ldr	r0, [pc, #12]	; (10000814 <HAL_TIM_MspPostInit+0x58>)
10000806:	f000 fb65 	bl	10000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
1000080a:	bf00      	nop
1000080c:	3720      	adds	r7, #32
1000080e:	46bd      	mov	sp, r7
10000810:	bd80      	pop	{r7, pc}
10000812:	bf00      	nop
10000814:	50002000 	.word	0x50002000

10000818 <I2C_Read_nucleo>:
#include "xnucelo_sensors.h"



HAL_StatusTypeDef I2C_Read_nucleo(uint8_t address, uint8_t reg, uint8_t * received_data)
{
10000818:	b580      	push	{r7, lr}
1000081a:	b088      	sub	sp, #32
1000081c:	af04      	add	r7, sp, #16
1000081e:	4603      	mov	r3, r0
10000820:	603a      	str	r2, [r7, #0]
10000822:	71fb      	strb	r3, [r7, #7]
10000824:	460b      	mov	r3, r1
10000826:	71bb      	strb	r3, [r7, #6]

	uint16_t memAddressSize = I2C_MEMADD_SIZE_8BIT;
10000828:	2301      	movs	r3, #1
1000082a:	81fb      	strh	r3, [r7, #14]

	return HAL_I2C_Mem_Read(&hi2c5, address, reg, memAddressSize, received_data, 1, I2C_TIMEOUT);
1000082c:	79fb      	ldrb	r3, [r7, #7]
1000082e:	b299      	uxth	r1, r3
10000830:	79bb      	ldrb	r3, [r7, #6]
10000832:	b29a      	uxth	r2, r3
10000834:	89f8      	ldrh	r0, [r7, #14]
10000836:	2364      	movs	r3, #100	; 0x64
10000838:	9302      	str	r3, [sp, #8]
1000083a:	2301      	movs	r3, #1
1000083c:	9301      	str	r3, [sp, #4]
1000083e:	683b      	ldr	r3, [r7, #0]
10000840:	9300      	str	r3, [sp, #0]
10000842:	4603      	mov	r3, r0
10000844:	4803      	ldr	r0, [pc, #12]	; (10000854 <I2C_Read_nucleo+0x3c>)
10000846:	f000 feab 	bl	100015a0 <HAL_I2C_Mem_Read>
1000084a:	4603      	mov	r3, r0
}
1000084c:	4618      	mov	r0, r3
1000084e:	3710      	adds	r7, #16
10000850:	46bd      	mov	sp, r7
10000852:	bd80      	pop	{r7, pc}
10000854:	10020090 	.word	0x10020090

10000858 <I2C_Write_nucleo>:



HAL_StatusTypeDef I2C_Write_nucleo(uint8_t address, uint8_t reg, uint8_t * data_wrtitten){
10000858:	b580      	push	{r7, lr}
1000085a:	b088      	sub	sp, #32
1000085c:	af04      	add	r7, sp, #16
1000085e:	4603      	mov	r3, r0
10000860:	603a      	str	r2, [r7, #0]
10000862:	71fb      	strb	r3, [r7, #7]
10000864:	460b      	mov	r3, r1
10000866:	71bb      	strb	r3, [r7, #6]

	uint16_t memAddressSize = I2C_MEMADD_SIZE_8BIT;
10000868:	2301      	movs	r3, #1
1000086a:	81fb      	strh	r3, [r7, #14]

	return HAL_I2C_Mem_Write(&hi2c5, address, reg, memAddressSize, data_wrtitten, 1, I2C_TIMEOUT);
1000086c:	79fb      	ldrb	r3, [r7, #7]
1000086e:	b299      	uxth	r1, r3
10000870:	79bb      	ldrb	r3, [r7, #6]
10000872:	b29a      	uxth	r2, r3
10000874:	89f8      	ldrh	r0, [r7, #14]
10000876:	2364      	movs	r3, #100	; 0x64
10000878:	9302      	str	r3, [sp, #8]
1000087a:	2301      	movs	r3, #1
1000087c:	9301      	str	r3, [sp, #4]
1000087e:	683b      	ldr	r3, [r7, #0]
10000880:	9300      	str	r3, [sp, #0]
10000882:	4603      	mov	r3, r0
10000884:	4803      	ldr	r0, [pc, #12]	; (10000894 <I2C_Write_nucleo+0x3c>)
10000886:	f000 fd77 	bl	10001378 <HAL_I2C_Mem_Write>
1000088a:	4603      	mov	r3, r0
}
1000088c:	4618      	mov	r0, r3
1000088e:	3710      	adds	r7, #16
10000890:	46bd      	mov	sp, r7
10000892:	bd80      	pop	{r7, pc}
10000894:	10020090 	.word	0x10020090

10000898 <Init_all_sensors>:
	return HAL_I2C_Mem_Write(&hi2c5, address, reg, memAddressSize, tab_received_data, count, I2C_TIMEOUT);

}


HAL_StatusTypeDef Init_all_sensors(){
10000898:	b580      	push	{r7, lr}
1000089a:	b082      	sub	sp, #8
1000089c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status;

	status = Init_Temperature();
1000089e:	f000 f91f 	bl	10000ae0 <Init_Temperature>
100008a2:	4603      	mov	r3, r0
100008a4:	71fb      	strb	r3, [r7, #7]

	if(status != HAL_OK){
100008a6:	79fb      	ldrb	r3, [r7, #7]
100008a8:	2b00      	cmp	r3, #0
100008aa:	d001      	beq.n	100008b0 <Init_all_sensors+0x18>
		return HAL_ERROR;
100008ac:	2301      	movs	r3, #1
100008ae:	e012      	b.n	100008d6 <Init_all_sensors+0x3e>
	}

	status = Init_Accelerometer();
100008b0:	f000 f816 	bl	100008e0 <Init_Accelerometer>
100008b4:	4603      	mov	r3, r0
100008b6:	71fb      	strb	r3, [r7, #7]

	if(status != HAL_OK){
100008b8:	79fb      	ldrb	r3, [r7, #7]
100008ba:	2b00      	cmp	r3, #0
100008bc:	d001      	beq.n	100008c2 <Init_all_sensors+0x2a>
		return HAL_ERROR;
100008be:	2301      	movs	r3, #1
100008c0:	e009      	b.n	100008d6 <Init_all_sensors+0x3e>
	}

	status = Init_Gyroscope();
100008c2:	f000 f84d 	bl	10000960 <Init_Gyroscope>
100008c6:	4603      	mov	r3, r0
100008c8:	71fb      	strb	r3, [r7, #7]

	if(status != HAL_OK){
100008ca:	79fb      	ldrb	r3, [r7, #7]
100008cc:	2b00      	cmp	r3, #0
100008ce:	d001      	beq.n	100008d4 <Init_all_sensors+0x3c>
		return HAL_ERROR;
100008d0:	2301      	movs	r3, #1
100008d2:	e000      	b.n	100008d6 <Init_all_sensors+0x3e>
	}

	return status;
100008d4:	79fb      	ldrb	r3, [r7, #7]
}
100008d6:	4618      	mov	r0, r3
100008d8:	3708      	adds	r7, #8
100008da:	46bd      	mov	sp, r7
100008dc:	bd80      	pop	{r7, pc}
	...

100008e0 <Init_Accelerometer>:

static uint8_t adressSlaveAcc = ADRESS_SLAVE_ACC_H_8;
static uint8_t numberTrials = 3;
static uint8_t timeOutTrial = I2C_TIMEOUT;

HAL_StatusTypeDef Init_Accelerometer(){
100008e0:	b580      	push	{r7, lr}
100008e2:	b082      	sub	sp, #8
100008e4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef state_acc;

	if( (&hi2c5 == NULL) || hi2c5.Instance != I2C5  ){
100008e6:	4b19      	ldr	r3, [pc, #100]	; (1000094c <Init_Accelerometer+0x6c>)
100008e8:	681b      	ldr	r3, [r3, #0]
100008ea:	4a19      	ldr	r2, [pc, #100]	; (10000950 <Init_Accelerometer+0x70>)
100008ec:	4293      	cmp	r3, r2
100008ee:	d001      	beq.n	100008f4 <Init_Accelerometer+0x14>
		return HAL_ERROR;//OK, pas de soucis ici
100008f0:	2301      	movs	r3, #1
100008f2:	e027      	b.n	10000944 <Init_Accelerometer+0x64>
	}

	/* Verifier si sensor temperature connecte */
	state_acc = HAL_I2C_IsDeviceReady(&hi2c5 , adressSlaveAcc, numberTrials, timeOutTrial);
100008f4:	4b17      	ldr	r3, [pc, #92]	; (10000954 <Init_Accelerometer+0x74>)
100008f6:	781b      	ldrb	r3, [r3, #0]
100008f8:	b299      	uxth	r1, r3
100008fa:	4b17      	ldr	r3, [pc, #92]	; (10000958 <Init_Accelerometer+0x78>)
100008fc:	781b      	ldrb	r3, [r3, #0]
100008fe:	461a      	mov	r2, r3
10000900:	4b16      	ldr	r3, [pc, #88]	; (1000095c <Init_Accelerometer+0x7c>)
10000902:	781b      	ldrb	r3, [r3, #0]
10000904:	4811      	ldr	r0, [pc, #68]	; (1000094c <Init_Accelerometer+0x6c>)
10000906:	f000 ff65 	bl	100017d4 <HAL_I2C_IsDeviceReady>
1000090a:	4603      	mov	r3, r0
1000090c:	71fb      	strb	r3, [r7, #7]
	if(state_acc != HAL_OK){
1000090e:	79fb      	ldrb	r3, [r7, #7]
10000910:	2b00      	cmp	r3, #0
10000912:	d001      	beq.n	10000918 <Init_Accelerometer+0x38>
		return state_acc;
10000914:	79fb      	ldrb	r3, [r7, #7]
10000916:	e015      	b.n	10000944 <Init_Accelerometer+0x64>
	}

	/* Verifier communication */
	uint8_t register_who_i_am = ACC_REG_WHO_AM_I_8;
10000918:	230f      	movs	r3, #15
1000091a:	71bb      	strb	r3, [r7, #6]
	uint8_t who_i_am = 0x00;
1000091c:	2300      	movs	r3, #0
1000091e:	717b      	strb	r3, [r7, #5]

	state_acc = I2C_Read_nucleo(adressSlaveAcc, register_who_i_am, &who_i_am);
10000920:	4b0c      	ldr	r3, [pc, #48]	; (10000954 <Init_Accelerometer+0x74>)
10000922:	781b      	ldrb	r3, [r3, #0]
10000924:	1d7a      	adds	r2, r7, #5
10000926:	79b9      	ldrb	r1, [r7, #6]
10000928:	4618      	mov	r0, r3
1000092a:	f7ff ff75 	bl	10000818 <I2C_Read_nucleo>
1000092e:	4603      	mov	r3, r0
10000930:	71fb      	strb	r3, [r7, #7]
	if( state_acc != HAL_OK || who_i_am != ACC_REG_WHO_AM_I_VALUE_8){
10000932:	79fb      	ldrb	r3, [r7, #7]
10000934:	2b00      	cmp	r3, #0
10000936:	d102      	bne.n	1000093e <Init_Accelerometer+0x5e>
10000938:	797b      	ldrb	r3, [r7, #5]
1000093a:	2b44      	cmp	r3, #68	; 0x44
1000093c:	d001      	beq.n	10000942 <Init_Accelerometer+0x62>
		return HAL_ERROR;
1000093e:	2301      	movs	r3, #1
10000940:	e000      	b.n	10000944 <Init_Accelerometer+0x64>
//	if(state_temperature != HAL_OK){
//		return state_temperature;
//	}


	return state_acc;
10000942:	79fb      	ldrb	r3, [r7, #7]
}
10000944:	4618      	mov	r0, r3
10000946:	3708      	adds	r7, #8
10000948:	46bd      	mov	sp, r7
1000094a:	bd80      	pop	{r7, pc}
1000094c:	10020090 	.word	0x10020090
10000950:	40015000 	.word	0x40015000
10000954:	10020004 	.word	0x10020004
10000958:	10020005 	.word	0x10020005
1000095c:	10020006 	.word	0x10020006

10000960 <Init_Gyroscope>:
static uint16_t adressSlaveGyro = ADRESS_SLAVE_GYRO_H_8;
static uint32_t numberTrials = 3;
static uint32_t timeOutTrial = I2C_TIMEOUT;


HAL_StatusTypeDef Init_Gyroscope(){
10000960:	b580      	push	{r7, lr}
10000962:	b082      	sub	sp, #8
10000964:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef state_gyro;

	if( (&hi2c5 == NULL) || hi2c5.Instance != I2C5  ){
10000966:	4b19      	ldr	r3, [pc, #100]	; (100009cc <Init_Gyroscope+0x6c>)
10000968:	681b      	ldr	r3, [r3, #0]
1000096a:	4a19      	ldr	r2, [pc, #100]	; (100009d0 <Init_Gyroscope+0x70>)
1000096c:	4293      	cmp	r3, r2
1000096e:	d001      	beq.n	10000974 <Init_Gyroscope+0x14>
		return HAL_ERROR;//OK, pas de soucis ici
10000970:	2301      	movs	r3, #1
10000972:	e026      	b.n	100009c2 <Init_Gyroscope+0x62>
	}

	/* Verifier si sensor temperature connecte */
	state_gyro = HAL_I2C_IsDeviceReady(&hi2c5 , adressSlaveGyro, numberTrials, timeOutTrial);
10000974:	4b17      	ldr	r3, [pc, #92]	; (100009d4 <Init_Gyroscope+0x74>)
10000976:	8819      	ldrh	r1, [r3, #0]
10000978:	4b17      	ldr	r3, [pc, #92]	; (100009d8 <Init_Gyroscope+0x78>)
1000097a:	681a      	ldr	r2, [r3, #0]
1000097c:	4b17      	ldr	r3, [pc, #92]	; (100009dc <Init_Gyroscope+0x7c>)
1000097e:	681b      	ldr	r3, [r3, #0]
10000980:	4812      	ldr	r0, [pc, #72]	; (100009cc <Init_Gyroscope+0x6c>)
10000982:	f000 ff27 	bl	100017d4 <HAL_I2C_IsDeviceReady>
10000986:	4603      	mov	r3, r0
10000988:	71fb      	strb	r3, [r7, #7]
	if(state_gyro != HAL_OK){
1000098a:	79fb      	ldrb	r3, [r7, #7]
1000098c:	2b00      	cmp	r3, #0
1000098e:	d001      	beq.n	10000994 <Init_Gyroscope+0x34>
		return state_gyro;
10000990:	79fb      	ldrb	r3, [r7, #7]
10000992:	e016      	b.n	100009c2 <Init_Gyroscope+0x62>
	}

	/* Verifier communication */
	uint8_t register_who_i_am = GYRO_REG_WHO_AM_I_8;
10000994:	230f      	movs	r3, #15
10000996:	71bb      	strb	r3, [r7, #6]
	uint8_t who_i_am = 0x00;
10000998:	2300      	movs	r3, #0
1000099a:	717b      	strb	r3, [r7, #5]

	state_gyro = I2C_Read_nucleo(adressSlaveGyro, register_who_i_am, &who_i_am);
1000099c:	4b0d      	ldr	r3, [pc, #52]	; (100009d4 <Init_Gyroscope+0x74>)
1000099e:	881b      	ldrh	r3, [r3, #0]
100009a0:	b2db      	uxtb	r3, r3
100009a2:	1d7a      	adds	r2, r7, #5
100009a4:	79b9      	ldrb	r1, [r7, #6]
100009a6:	4618      	mov	r0, r3
100009a8:	f7ff ff36 	bl	10000818 <I2C_Read_nucleo>
100009ac:	4603      	mov	r3, r0
100009ae:	71fb      	strb	r3, [r7, #7]
	if( state_gyro != HAL_OK || who_i_am != GYRO_REG_WHO_AM_I_VALUE_8){
100009b0:	79fb      	ldrb	r3, [r7, #7]
100009b2:	2b00      	cmp	r3, #0
100009b4:	d102      	bne.n	100009bc <Init_Gyroscope+0x5c>
100009b6:	797b      	ldrb	r3, [r7, #5]
100009b8:	2b6c      	cmp	r3, #108	; 0x6c
100009ba:	d001      	beq.n	100009c0 <Init_Gyroscope+0x60>
		return HAL_ERROR;
100009bc:	2301      	movs	r3, #1
100009be:	e000      	b.n	100009c2 <Init_Gyroscope+0x62>
//	state_temperature = I2C_Write_nucleo(adressSlaveTemp, register_config, &config_value);
//	if(state_temperature != HAL_OK){
//		return state_temperature;
//	}

	return state_gyro;
100009c0:	79fb      	ldrb	r3, [r7, #7]
}
100009c2:	4618      	mov	r0, r3
100009c4:	3708      	adds	r7, #8
100009c6:	46bd      	mov	sp, r7
100009c8:	bd80      	pop	{r7, pc}
100009ca:	bf00      	nop
100009cc:	10020090 	.word	0x10020090
100009d0:	40015000 	.word	0x40015000
100009d4:	10020008 	.word	0x10020008
100009d8:	1002000c 	.word	0x1002000c
100009dc:	10020010 	.word	0x10020010

100009e0 <Read_Gyroscope>:


HAL_StatusTypeDef Read_Gyroscope(X_NUCLEO_SENSORS_t * nucleoStruct){
100009e0:	b580      	push	{r7, lr}
100009e2:	b086      	sub	sp, #24
100009e4:	af00      	add	r7, sp, #0
100009e6:	6078      	str	r0, [r7, #4]

	uint8_t register_gyro_X_L = GYRO_REG_OUT_XG_L_8;
100009e8:	2322      	movs	r3, #34	; 0x22
100009ea:	75fb      	strb	r3, [r7, #23]
	uint8_t register_gyro_X_H = GYRO_REG_OUT_XG_H_8;
100009ec:	2323      	movs	r3, #35	; 0x23
100009ee:	75bb      	strb	r3, [r7, #22]
	uint8_t register_gyro_Y_L = GYRO_REG_OUT_YG_L_8;
100009f0:	2324      	movs	r3, #36	; 0x24
100009f2:	757b      	strb	r3, [r7, #21]
	uint8_t register_gyro_Y_H = GYRO_REG_OUT_YG_H_8;
100009f4:	2325      	movs	r3, #37	; 0x25
100009f6:	753b      	strb	r3, [r7, #20]
	uint8_t register_gyro_Z_L = GYRO_REG_OUT_ZG_L_8;
100009f8:	2326      	movs	r3, #38	; 0x26
100009fa:	74fb      	strb	r3, [r7, #19]
	uint8_t register_gyro_Z_H = GYRO_REG_OUT_ZG_H_8;
100009fc:	2327      	movs	r3, #39	; 0x27
100009fe:	74bb      	strb	r3, [r7, #18]

	nucleoStruct->Gyroscope_X = ( ((int16_t) (dataGyro[1] << 8)) + (int16_t) dataGyro[0] ) ;
	nucleoStruct->Gyroscope_Y = ( ((int16_t) (dataGyro[3] << 8)) + (int16_t) dataGyro[2] ) ;
	nucleoStruct->Gyroscope_Z = ( ((int16_t) (dataGyro[5] << 8)) + (int16_t) dataGyro[4] ) ;
*/
	uint8_t dataGyroX_L = 0;
10000a00:	2300      	movs	r3, #0
10000a02:	743b      	strb	r3, [r7, #16]
	uint8_t dataGyroX_H = 0;
10000a04:	2300      	movs	r3, #0
10000a06:	73fb      	strb	r3, [r7, #15]
	uint8_t dataGyroY_L = 0;
10000a08:	2300      	movs	r3, #0
10000a0a:	73bb      	strb	r3, [r7, #14]
	uint8_t dataGyroY_H = 0;
10000a0c:	2300      	movs	r3, #0
10000a0e:	737b      	strb	r3, [r7, #13]
	uint8_t dataGyroZ_L = 0;
10000a10:	2300      	movs	r3, #0
10000a12:	733b      	strb	r3, [r7, #12]
	uint8_t dataGyroZ_H = 0;
10000a14:	2300      	movs	r3, #0
10000a16:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;

	status = I2C_Read_nucleo(adressSlaveGyro, register_gyro_X_L, &dataGyroX_L);
10000a18:	4b30      	ldr	r3, [pc, #192]	; (10000adc <Read_Gyroscope+0xfc>)
10000a1a:	881b      	ldrh	r3, [r3, #0]
10000a1c:	b2db      	uxtb	r3, r3
10000a1e:	f107 0210 	add.w	r2, r7, #16
10000a22:	7df9      	ldrb	r1, [r7, #23]
10000a24:	4618      	mov	r0, r3
10000a26:	f7ff fef7 	bl	10000818 <I2C_Read_nucleo>
10000a2a:	4603      	mov	r3, r0
10000a2c:	747b      	strb	r3, [r7, #17]
	status = I2C_Read_nucleo(adressSlaveGyro, register_gyro_X_H, &dataGyroX_H);
10000a2e:	4b2b      	ldr	r3, [pc, #172]	; (10000adc <Read_Gyroscope+0xfc>)
10000a30:	881b      	ldrh	r3, [r3, #0]
10000a32:	b2db      	uxtb	r3, r3
10000a34:	f107 020f 	add.w	r2, r7, #15
10000a38:	7db9      	ldrb	r1, [r7, #22]
10000a3a:	4618      	mov	r0, r3
10000a3c:	f7ff feec 	bl	10000818 <I2C_Read_nucleo>
10000a40:	4603      	mov	r3, r0
10000a42:	747b      	strb	r3, [r7, #17]
	status = I2C_Read_nucleo(adressSlaveGyro, register_gyro_Y_L, &dataGyroY_L);
10000a44:	4b25      	ldr	r3, [pc, #148]	; (10000adc <Read_Gyroscope+0xfc>)
10000a46:	881b      	ldrh	r3, [r3, #0]
10000a48:	b2db      	uxtb	r3, r3
10000a4a:	f107 020e 	add.w	r2, r7, #14
10000a4e:	7d79      	ldrb	r1, [r7, #21]
10000a50:	4618      	mov	r0, r3
10000a52:	f7ff fee1 	bl	10000818 <I2C_Read_nucleo>
10000a56:	4603      	mov	r3, r0
10000a58:	747b      	strb	r3, [r7, #17]
	status = I2C_Read_nucleo(adressSlaveGyro, register_gyro_Y_H, &dataGyroY_H);
10000a5a:	4b20      	ldr	r3, [pc, #128]	; (10000adc <Read_Gyroscope+0xfc>)
10000a5c:	881b      	ldrh	r3, [r3, #0]
10000a5e:	b2db      	uxtb	r3, r3
10000a60:	f107 020d 	add.w	r2, r7, #13
10000a64:	7d39      	ldrb	r1, [r7, #20]
10000a66:	4618      	mov	r0, r3
10000a68:	f7ff fed6 	bl	10000818 <I2C_Read_nucleo>
10000a6c:	4603      	mov	r3, r0
10000a6e:	747b      	strb	r3, [r7, #17]
	status = I2C_Read_nucleo(adressSlaveGyro, register_gyro_Z_L, &dataGyroZ_L);
10000a70:	4b1a      	ldr	r3, [pc, #104]	; (10000adc <Read_Gyroscope+0xfc>)
10000a72:	881b      	ldrh	r3, [r3, #0]
10000a74:	b2db      	uxtb	r3, r3
10000a76:	f107 020c 	add.w	r2, r7, #12
10000a7a:	7cf9      	ldrb	r1, [r7, #19]
10000a7c:	4618      	mov	r0, r3
10000a7e:	f7ff fecb 	bl	10000818 <I2C_Read_nucleo>
10000a82:	4603      	mov	r3, r0
10000a84:	747b      	strb	r3, [r7, #17]
	status = I2C_Read_nucleo(adressSlaveGyro, register_gyro_Z_H, &dataGyroZ_H);
10000a86:	4b15      	ldr	r3, [pc, #84]	; (10000adc <Read_Gyroscope+0xfc>)
10000a88:	881b      	ldrh	r3, [r3, #0]
10000a8a:	b2db      	uxtb	r3, r3
10000a8c:	f107 020b 	add.w	r2, r7, #11
10000a90:	7cb9      	ldrb	r1, [r7, #18]
10000a92:	4618      	mov	r0, r3
10000a94:	f7ff fec0 	bl	10000818 <I2C_Read_nucleo>
10000a98:	4603      	mov	r3, r0
10000a9a:	747b      	strb	r3, [r7, #17]

	nucleoStruct->Gyroscope_X = (int16_t) (dataGyroX_H << 8 | dataGyroX_L);
10000a9c:	7bfb      	ldrb	r3, [r7, #15]
10000a9e:	021b      	lsls	r3, r3, #8
10000aa0:	b21a      	sxth	r2, r3
10000aa2:	7c3b      	ldrb	r3, [r7, #16]
10000aa4:	b21b      	sxth	r3, r3
10000aa6:	4313      	orrs	r3, r2
10000aa8:	b21a      	sxth	r2, r3
10000aaa:	687b      	ldr	r3, [r7, #4]
10000aac:	80da      	strh	r2, [r3, #6]
	nucleoStruct->Gyroscope_Y = (int16_t) (dataGyroY_H << 8 | dataGyroY_L);
10000aae:	7b7b      	ldrb	r3, [r7, #13]
10000ab0:	021b      	lsls	r3, r3, #8
10000ab2:	b21a      	sxth	r2, r3
10000ab4:	7bbb      	ldrb	r3, [r7, #14]
10000ab6:	b21b      	sxth	r3, r3
10000ab8:	4313      	orrs	r3, r2
10000aba:	b21a      	sxth	r2, r3
10000abc:	687b      	ldr	r3, [r7, #4]
10000abe:	811a      	strh	r2, [r3, #8]
	nucleoStruct->Gyroscope_Z = (int16_t) (dataGyroZ_H << 8 | dataGyroZ_L);
10000ac0:	7afb      	ldrb	r3, [r7, #11]
10000ac2:	021b      	lsls	r3, r3, #8
10000ac4:	b21a      	sxth	r2, r3
10000ac6:	7b3b      	ldrb	r3, [r7, #12]
10000ac8:	b21b      	sxth	r3, r3
10000aca:	4313      	orrs	r3, r2
10000acc:	b21a      	sxth	r2, r3
10000ace:	687b      	ldr	r3, [r7, #4]
10000ad0:	815a      	strh	r2, [r3, #10]

	return status;
10000ad2:	7c7b      	ldrb	r3, [r7, #17]
}
10000ad4:	4618      	mov	r0, r3
10000ad6:	3718      	adds	r7, #24
10000ad8:	46bd      	mov	sp, r7
10000ada:	bd80      	pop	{r7, pc}
10000adc:	10020008 	.word	0x10020008

10000ae0 <Init_Temperature>:

static 	uint8_t adressSlaveTemp = ADRESS_SLAVE_TEMP_H_8; //0x94U
static uint8_t numberTrials = 3;
static uint8_t timeOutTrial = I2C_TIMEOUT;

HAL_StatusTypeDef Init_Temperature(){
10000ae0:	b580      	push	{r7, lr}
10000ae2:	b082      	sub	sp, #8
10000ae4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef state_temperature;


	if( (&hi2c5 == NULL) || hi2c5.Instance != I2C5  ){
10000ae6:	4b22      	ldr	r3, [pc, #136]	; (10000b70 <Init_Temperature+0x90>)
10000ae8:	681b      	ldr	r3, [r3, #0]
10000aea:	4a22      	ldr	r2, [pc, #136]	; (10000b74 <Init_Temperature+0x94>)
10000aec:	4293      	cmp	r3, r2
10000aee:	d001      	beq.n	10000af4 <Init_Temperature+0x14>
		return HAL_ERROR;//OK, pas de soucis ici
10000af0:	2301      	movs	r3, #1
10000af2:	e039      	b.n	10000b68 <Init_Temperature+0x88>
	}

	/* Verifier si sensor temperature connecte */
	state_temperature = HAL_I2C_IsDeviceReady(&hi2c5 , adressSlaveTemp, numberTrials, timeOutTrial);
10000af4:	4b20      	ldr	r3, [pc, #128]	; (10000b78 <Init_Temperature+0x98>)
10000af6:	781b      	ldrb	r3, [r3, #0]
10000af8:	b299      	uxth	r1, r3
10000afa:	4b20      	ldr	r3, [pc, #128]	; (10000b7c <Init_Temperature+0x9c>)
10000afc:	781b      	ldrb	r3, [r3, #0]
10000afe:	461a      	mov	r2, r3
10000b00:	4b1f      	ldr	r3, [pc, #124]	; (10000b80 <Init_Temperature+0xa0>)
10000b02:	781b      	ldrb	r3, [r3, #0]
10000b04:	481a      	ldr	r0, [pc, #104]	; (10000b70 <Init_Temperature+0x90>)
10000b06:	f000 fe65 	bl	100017d4 <HAL_I2C_IsDeviceReady>
10000b0a:	4603      	mov	r3, r0
10000b0c:	71fb      	strb	r3, [r7, #7]
	if(state_temperature != HAL_OK){
10000b0e:	79fb      	ldrb	r3, [r7, #7]
10000b10:	2b00      	cmp	r3, #0
10000b12:	d001      	beq.n	10000b18 <Init_Temperature+0x38>
		return state_temperature;
10000b14:	79fb      	ldrb	r3, [r7, #7]
10000b16:	e027      	b.n	10000b68 <Init_Temperature+0x88>
	}

	/* Verifier communication */
	uint8_t register_manufactor = TEMP_REG_ID_MANUFACTOR_8;
10000b18:	23fe      	movs	r3, #254	; 0xfe
10000b1a:	71bb      	strb	r3, [r7, #6]
	uint8_t manufactor_temp = 0x00;
10000b1c:	2300      	movs	r3, #0
10000b1e:	713b      	strb	r3, [r7, #4]
	state_temperature = I2C_Read_nucleo(adressSlaveTemp, register_manufactor, &manufactor_temp);
10000b20:	4b15      	ldr	r3, [pc, #84]	; (10000b78 <Init_Temperature+0x98>)
10000b22:	781b      	ldrb	r3, [r3, #0]
10000b24:	1d3a      	adds	r2, r7, #4
10000b26:	79b9      	ldrb	r1, [r7, #6]
10000b28:	4618      	mov	r0, r3
10000b2a:	f7ff fe75 	bl	10000818 <I2C_Read_nucleo>
10000b2e:	4603      	mov	r3, r0
10000b30:	71fb      	strb	r3, [r7, #7]
	if( state_temperature != HAL_OK || manufactor_temp != TEMP_REG_ID_MANUFACTOR_VALUE_8){
10000b32:	79fb      	ldrb	r3, [r7, #7]
10000b34:	2b00      	cmp	r3, #0
10000b36:	d102      	bne.n	10000b3e <Init_Temperature+0x5e>
10000b38:	793b      	ldrb	r3, [r7, #4]
10000b3a:	2b53      	cmp	r3, #83	; 0x53
10000b3c:	d001      	beq.n	10000b42 <Init_Temperature+0x62>
		return HAL_ERROR;
10000b3e:	2301      	movs	r3, #1
10000b40:	e012      	b.n	10000b68 <Init_Temperature+0x88>
	}

	/* Configurer */
	uint8_t register_config = TEMP_REG_CONFIG_8;
10000b42:	2303      	movs	r3, #3
10000b44:	717b      	strb	r3, [r7, #5]
	uint8_t config_value = TEMP_REG_CONFIG_VALUE_8;
10000b46:	2300      	movs	r3, #0
10000b48:	70fb      	strb	r3, [r7, #3]
	state_temperature = I2C_Write_nucleo(adressSlaveTemp, register_config, &config_value);
10000b4a:	4b0b      	ldr	r3, [pc, #44]	; (10000b78 <Init_Temperature+0x98>)
10000b4c:	781b      	ldrb	r3, [r3, #0]
10000b4e:	1cfa      	adds	r2, r7, #3
10000b50:	7979      	ldrb	r1, [r7, #5]
10000b52:	4618      	mov	r0, r3
10000b54:	f7ff fe80 	bl	10000858 <I2C_Write_nucleo>
10000b58:	4603      	mov	r3, r0
10000b5a:	71fb      	strb	r3, [r7, #7]
	if(state_temperature != HAL_OK){
10000b5c:	79fb      	ldrb	r3, [r7, #7]
10000b5e:	2b00      	cmp	r3, #0
10000b60:	d001      	beq.n	10000b66 <Init_Temperature+0x86>
		return state_temperature;
10000b62:	79fb      	ldrb	r3, [r7, #7]
10000b64:	e000      	b.n	10000b68 <Init_Temperature+0x88>
	}


	return state_temperature;
10000b66:	79fb      	ldrb	r3, [r7, #7]
}
10000b68:	4618      	mov	r0, r3
10000b6a:	3708      	adds	r7, #8
10000b6c:	46bd      	mov	sp, r7
10000b6e:	bd80      	pop	{r7, pc}
10000b70:	10020090 	.word	0x10020090
10000b74:	40015000 	.word	0x40015000
10000b78:	10020014 	.word	0x10020014
10000b7c:	10020015 	.word	0x10020015
10000b80:	10020016 	.word	0x10020016

10000b84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000b84:	e7fe      	b.n	10000b84 <ADC1_IRQHandler>
	...

10000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000b88:	b580      	push	{r7, lr}
10000b8a:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000b8c:	2003      	movs	r0, #3
10000b8e:	f000 f95f 	bl	10000e50 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000b92:	f002 fb54 	bl	1000323e <HAL_RCC_GetSystemCoreClockFreq>
10000b96:	4603      	mov	r3, r0
10000b98:	4a07      	ldr	r2, [pc, #28]	; (10000bb8 <HAL_Init+0x30>)
10000b9a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000b9c:	2001      	movs	r0, #1
10000b9e:	f000 f80d 	bl	10000bbc <HAL_InitTick>
10000ba2:	4603      	mov	r3, r0
10000ba4:	2b00      	cmp	r3, #0
10000ba6:	d001      	beq.n	10000bac <HAL_Init+0x24>
  {
    return HAL_ERROR;
10000ba8:	2301      	movs	r3, #1
10000baa:	e002      	b.n	10000bb2 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10000bac:	f7ff fcdc 	bl	10000568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000bb0:	2300      	movs	r3, #0
}
10000bb2:	4618      	mov	r0, r3
10000bb4:	bd80      	pop	{r7, pc}
10000bb6:	bf00      	nop
10000bb8:	10020000 	.word	0x10020000

10000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10000bbc:	b580      	push	{r7, lr}
10000bbe:	b082      	sub	sp, #8
10000bc0:	af00      	add	r7, sp, #0
10000bc2:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000bc4:	4b15      	ldr	r3, [pc, #84]	; (10000c1c <HAL_InitTick+0x60>)
10000bc6:	781b      	ldrb	r3, [r3, #0]
10000bc8:	2b00      	cmp	r3, #0
10000bca:	d101      	bne.n	10000bd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10000bcc:	2301      	movs	r3, #1
10000bce:	e021      	b.n	10000c14 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10000bd0:	4b13      	ldr	r3, [pc, #76]	; (10000c20 <HAL_InitTick+0x64>)
10000bd2:	681a      	ldr	r2, [r3, #0]
10000bd4:	4b11      	ldr	r3, [pc, #68]	; (10000c1c <HAL_InitTick+0x60>)
10000bd6:	781b      	ldrb	r3, [r3, #0]
10000bd8:	4619      	mov	r1, r3
10000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
10000bde:	fbb3 f3f1 	udiv	r3, r3, r1
10000be2:	fbb2 f3f3 	udiv	r3, r2, r3
10000be6:	4618      	mov	r0, r3
10000be8:	f000 f967 	bl	10000eba <HAL_SYSTICK_Config>
10000bec:	4603      	mov	r3, r0
10000bee:	2b00      	cmp	r3, #0
10000bf0:	d001      	beq.n	10000bf6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10000bf2:	2301      	movs	r3, #1
10000bf4:	e00e      	b.n	10000c14 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000bf6:	687b      	ldr	r3, [r7, #4]
10000bf8:	2b0f      	cmp	r3, #15
10000bfa:	d80a      	bhi.n	10000c12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000bfc:	2200      	movs	r2, #0
10000bfe:	6879      	ldr	r1, [r7, #4]
10000c00:	f04f 30ff 	mov.w	r0, #4294967295
10000c04:	f000 f92f 	bl	10000e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000c08:	4a06      	ldr	r2, [pc, #24]	; (10000c24 <HAL_InitTick+0x68>)
10000c0a:	687b      	ldr	r3, [r7, #4]
10000c0c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10000c0e:	2300      	movs	r3, #0
10000c10:	e000      	b.n	10000c14 <HAL_InitTick+0x58>
    return HAL_ERROR;
10000c12:	2301      	movs	r3, #1
}
10000c14:	4618      	mov	r0, r3
10000c16:	3708      	adds	r7, #8
10000c18:	46bd      	mov	sp, r7
10000c1a:	bd80      	pop	{r7, pc}
10000c1c:	1002001c 	.word	0x1002001c
10000c20:	10020000 	.word	0x10020000
10000c24:	10020018 	.word	0x10020018

10000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000c28:	b480      	push	{r7}
10000c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000c2c:	4b06      	ldr	r3, [pc, #24]	; (10000c48 <HAL_IncTick+0x20>)
10000c2e:	781b      	ldrb	r3, [r3, #0]
10000c30:	461a      	mov	r2, r3
10000c32:	4b06      	ldr	r3, [pc, #24]	; (10000c4c <HAL_IncTick+0x24>)
10000c34:	681b      	ldr	r3, [r3, #0]
10000c36:	4413      	add	r3, r2
10000c38:	4a04      	ldr	r2, [pc, #16]	; (10000c4c <HAL_IncTick+0x24>)
10000c3a:	6013      	str	r3, [r2, #0]
}
10000c3c:	bf00      	nop
10000c3e:	46bd      	mov	sp, r7
10000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c44:	4770      	bx	lr
10000c46:	bf00      	nop
10000c48:	1002001c 	.word	0x1002001c
10000c4c:	10020124 	.word	0x10020124

10000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000c50:	b480      	push	{r7}
10000c52:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000c54:	4b03      	ldr	r3, [pc, #12]	; (10000c64 <HAL_GetTick+0x14>)
10000c56:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000c58:	4618      	mov	r0, r3
10000c5a:	46bd      	mov	sp, r7
10000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c60:	4770      	bx	lr
10000c62:	bf00      	nop
10000c64:	10020124 	.word	0x10020124

10000c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10000c68:	b580      	push	{r7, lr}
10000c6a:	b084      	sub	sp, #16
10000c6c:	af00      	add	r7, sp, #0
10000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10000c70:	f7ff ffee 	bl	10000c50 <HAL_GetTick>
10000c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10000c76:	687b      	ldr	r3, [r7, #4]
10000c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10000c7a:	68fb      	ldr	r3, [r7, #12]
10000c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
10000c80:	d005      	beq.n	10000c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10000c82:	4b0a      	ldr	r3, [pc, #40]	; (10000cac <HAL_Delay+0x44>)
10000c84:	781b      	ldrb	r3, [r3, #0]
10000c86:	461a      	mov	r2, r3
10000c88:	68fb      	ldr	r3, [r7, #12]
10000c8a:	4413      	add	r3, r2
10000c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10000c8e:	bf00      	nop
10000c90:	f7ff ffde 	bl	10000c50 <HAL_GetTick>
10000c94:	4602      	mov	r2, r0
10000c96:	68bb      	ldr	r3, [r7, #8]
10000c98:	1ad3      	subs	r3, r2, r3
10000c9a:	68fa      	ldr	r2, [r7, #12]
10000c9c:	429a      	cmp	r2, r3
10000c9e:	d8f7      	bhi.n	10000c90 <HAL_Delay+0x28>
  {
  }
}
10000ca0:	bf00      	nop
10000ca2:	bf00      	nop
10000ca4:	3710      	adds	r7, #16
10000ca6:	46bd      	mov	sp, r7
10000ca8:	bd80      	pop	{r7, pc}
10000caa:	bf00      	nop
10000cac:	1002001c 	.word	0x1002001c

10000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000cb0:	b480      	push	{r7}
10000cb2:	b085      	sub	sp, #20
10000cb4:	af00      	add	r7, sp, #0
10000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000cb8:	687b      	ldr	r3, [r7, #4]
10000cba:	f003 0307 	and.w	r3, r3, #7
10000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000cc0:	4b0c      	ldr	r3, [pc, #48]	; (10000cf4 <__NVIC_SetPriorityGrouping+0x44>)
10000cc2:	68db      	ldr	r3, [r3, #12]
10000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10000cc6:	68ba      	ldr	r2, [r7, #8]
10000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10000ccc:	4013      	ands	r3, r2
10000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000cd0:	68fb      	ldr	r3, [r7, #12]
10000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000cd4:	68bb      	ldr	r3, [r7, #8]
10000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10000ce2:	4a04      	ldr	r2, [pc, #16]	; (10000cf4 <__NVIC_SetPriorityGrouping+0x44>)
10000ce4:	68bb      	ldr	r3, [r7, #8]
10000ce6:	60d3      	str	r3, [r2, #12]
}
10000ce8:	bf00      	nop
10000cea:	3714      	adds	r7, #20
10000cec:	46bd      	mov	sp, r7
10000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
10000cf2:	4770      	bx	lr
10000cf4:	e000ed00 	.word	0xe000ed00

10000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10000cf8:	b480      	push	{r7}
10000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10000cfc:	4b04      	ldr	r3, [pc, #16]	; (10000d10 <__NVIC_GetPriorityGrouping+0x18>)
10000cfe:	68db      	ldr	r3, [r3, #12]
10000d00:	0a1b      	lsrs	r3, r3, #8
10000d02:	f003 0307 	and.w	r3, r3, #7
}
10000d06:	4618      	mov	r0, r3
10000d08:	46bd      	mov	sp, r7
10000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d0e:	4770      	bx	lr
10000d10:	e000ed00 	.word	0xe000ed00

10000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000d14:	b480      	push	{r7}
10000d16:	b083      	sub	sp, #12
10000d18:	af00      	add	r7, sp, #0
10000d1a:	4603      	mov	r3, r0
10000d1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000d22:	2b00      	cmp	r3, #0
10000d24:	db0b      	blt.n	10000d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000d26:	88fb      	ldrh	r3, [r7, #6]
10000d28:	f003 021f 	and.w	r2, r3, #31
10000d2c:	4907      	ldr	r1, [pc, #28]	; (10000d4c <__NVIC_EnableIRQ+0x38>)
10000d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000d32:	095b      	lsrs	r3, r3, #5
10000d34:	2001      	movs	r0, #1
10000d36:	fa00 f202 	lsl.w	r2, r0, r2
10000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
10000d3e:	bf00      	nop
10000d40:	370c      	adds	r7, #12
10000d42:	46bd      	mov	sp, r7
10000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d48:	4770      	bx	lr
10000d4a:	bf00      	nop
10000d4c:	e000e100 	.word	0xe000e100

10000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000d50:	b480      	push	{r7}
10000d52:	b083      	sub	sp, #12
10000d54:	af00      	add	r7, sp, #0
10000d56:	4603      	mov	r3, r0
10000d58:	6039      	str	r1, [r7, #0]
10000d5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000d60:	2b00      	cmp	r3, #0
10000d62:	db0a      	blt.n	10000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000d64:	683b      	ldr	r3, [r7, #0]
10000d66:	b2da      	uxtb	r2, r3
10000d68:	490c      	ldr	r1, [pc, #48]	; (10000d9c <__NVIC_SetPriority+0x4c>)
10000d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000d6e:	0112      	lsls	r2, r2, #4
10000d70:	b2d2      	uxtb	r2, r2
10000d72:	440b      	add	r3, r1
10000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000d78:	e00a      	b.n	10000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000d7a:	683b      	ldr	r3, [r7, #0]
10000d7c:	b2da      	uxtb	r2, r3
10000d7e:	4908      	ldr	r1, [pc, #32]	; (10000da0 <__NVIC_SetPriority+0x50>)
10000d80:	88fb      	ldrh	r3, [r7, #6]
10000d82:	f003 030f 	and.w	r3, r3, #15
10000d86:	3b04      	subs	r3, #4
10000d88:	0112      	lsls	r2, r2, #4
10000d8a:	b2d2      	uxtb	r2, r2
10000d8c:	440b      	add	r3, r1
10000d8e:	761a      	strb	r2, [r3, #24]
}
10000d90:	bf00      	nop
10000d92:	370c      	adds	r7, #12
10000d94:	46bd      	mov	sp, r7
10000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d9a:	4770      	bx	lr
10000d9c:	e000e100 	.word	0xe000e100
10000da0:	e000ed00 	.word	0xe000ed00

10000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000da4:	b480      	push	{r7}
10000da6:	b089      	sub	sp, #36	; 0x24
10000da8:	af00      	add	r7, sp, #0
10000daa:	60f8      	str	r0, [r7, #12]
10000dac:	60b9      	str	r1, [r7, #8]
10000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000db0:	68fb      	ldr	r3, [r7, #12]
10000db2:	f003 0307 	and.w	r3, r3, #7
10000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000db8:	69fb      	ldr	r3, [r7, #28]
10000dba:	f1c3 0307 	rsb	r3, r3, #7
10000dbe:	2b04      	cmp	r3, #4
10000dc0:	bf28      	it	cs
10000dc2:	2304      	movcs	r3, #4
10000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10000dc6:	69fb      	ldr	r3, [r7, #28]
10000dc8:	3304      	adds	r3, #4
10000dca:	2b06      	cmp	r3, #6
10000dcc:	d902      	bls.n	10000dd4 <NVIC_EncodePriority+0x30>
10000dce:	69fb      	ldr	r3, [r7, #28]
10000dd0:	3b03      	subs	r3, #3
10000dd2:	e000      	b.n	10000dd6 <NVIC_EncodePriority+0x32>
10000dd4:	2300      	movs	r3, #0
10000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000dd8:	f04f 32ff 	mov.w	r2, #4294967295
10000ddc:	69bb      	ldr	r3, [r7, #24]
10000dde:	fa02 f303 	lsl.w	r3, r2, r3
10000de2:	43da      	mvns	r2, r3
10000de4:	68bb      	ldr	r3, [r7, #8]
10000de6:	401a      	ands	r2, r3
10000de8:	697b      	ldr	r3, [r7, #20]
10000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10000dec:	f04f 31ff 	mov.w	r1, #4294967295
10000df0:	697b      	ldr	r3, [r7, #20]
10000df2:	fa01 f303 	lsl.w	r3, r1, r3
10000df6:	43d9      	mvns	r1, r3
10000df8:	687b      	ldr	r3, [r7, #4]
10000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000dfc:	4313      	orrs	r3, r2
         );
}
10000dfe:	4618      	mov	r0, r3
10000e00:	3724      	adds	r7, #36	; 0x24
10000e02:	46bd      	mov	sp, r7
10000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
10000e08:	4770      	bx	lr
	...

10000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000e0c:	b580      	push	{r7, lr}
10000e0e:	b082      	sub	sp, #8
10000e10:	af00      	add	r7, sp, #0
10000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10000e14:	687b      	ldr	r3, [r7, #4]
10000e16:	3b01      	subs	r3, #1
10000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10000e1c:	d301      	bcc.n	10000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10000e1e:	2301      	movs	r3, #1
10000e20:	e00f      	b.n	10000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10000e22:	4a0a      	ldr	r2, [pc, #40]	; (10000e4c <SysTick_Config+0x40>)
10000e24:	687b      	ldr	r3, [r7, #4]
10000e26:	3b01      	subs	r3, #1
10000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10000e2a:	210f      	movs	r1, #15
10000e2c:	f04f 30ff 	mov.w	r0, #4294967295
10000e30:	f7ff ff8e 	bl	10000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000e34:	4b05      	ldr	r3, [pc, #20]	; (10000e4c <SysTick_Config+0x40>)
10000e36:	2200      	movs	r2, #0
10000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10000e3a:	4b04      	ldr	r3, [pc, #16]	; (10000e4c <SysTick_Config+0x40>)
10000e3c:	2207      	movs	r2, #7
10000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000e40:	2300      	movs	r3, #0
}
10000e42:	4618      	mov	r0, r3
10000e44:	3708      	adds	r7, #8
10000e46:	46bd      	mov	sp, r7
10000e48:	bd80      	pop	{r7, pc}
10000e4a:	bf00      	nop
10000e4c:	e000e010 	.word	0xe000e010

10000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000e50:	b580      	push	{r7, lr}
10000e52:	b082      	sub	sp, #8
10000e54:	af00      	add	r7, sp, #0
10000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000e58:	6878      	ldr	r0, [r7, #4]
10000e5a:	f7ff ff29 	bl	10000cb0 <__NVIC_SetPriorityGrouping>
}
10000e5e:	bf00      	nop
10000e60:	3708      	adds	r7, #8
10000e62:	46bd      	mov	sp, r7
10000e64:	bd80      	pop	{r7, pc}

10000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000e66:	b580      	push	{r7, lr}
10000e68:	b086      	sub	sp, #24
10000e6a:	af00      	add	r7, sp, #0
10000e6c:	4603      	mov	r3, r0
10000e6e:	60b9      	str	r1, [r7, #8]
10000e70:	607a      	str	r2, [r7, #4]
10000e72:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000e74:	2300      	movs	r3, #0
10000e76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000e78:	f7ff ff3e 	bl	10000cf8 <__NVIC_GetPriorityGrouping>
10000e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000e7e:	687a      	ldr	r2, [r7, #4]
10000e80:	68b9      	ldr	r1, [r7, #8]
10000e82:	6978      	ldr	r0, [r7, #20]
10000e84:	f7ff ff8e 	bl	10000da4 <NVIC_EncodePriority>
10000e88:	4602      	mov	r2, r0
10000e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000e8e:	4611      	mov	r1, r2
10000e90:	4618      	mov	r0, r3
10000e92:	f7ff ff5d 	bl	10000d50 <__NVIC_SetPriority>
}
10000e96:	bf00      	nop
10000e98:	3718      	adds	r7, #24
10000e9a:	46bd      	mov	sp, r7
10000e9c:	bd80      	pop	{r7, pc}

10000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000e9e:	b580      	push	{r7, lr}
10000ea0:	b082      	sub	sp, #8
10000ea2:	af00      	add	r7, sp, #0
10000ea4:	4603      	mov	r3, r0
10000ea6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000eac:	4618      	mov	r0, r3
10000eae:	f7ff ff31 	bl	10000d14 <__NVIC_EnableIRQ>
}
10000eb2:	bf00      	nop
10000eb4:	3708      	adds	r7, #8
10000eb6:	46bd      	mov	sp, r7
10000eb8:	bd80      	pop	{r7, pc}

10000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000eba:	b580      	push	{r7, lr}
10000ebc:	b082      	sub	sp, #8
10000ebe:	af00      	add	r7, sp, #0
10000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
10000ec2:	6878      	ldr	r0, [r7, #4]
10000ec4:	f7ff ffa2 	bl	10000e0c <SysTick_Config>
10000ec8:	4603      	mov	r3, r0
}
10000eca:	4618      	mov	r0, r3
10000ecc:	3708      	adds	r7, #8
10000ece:	46bd      	mov	sp, r7
10000ed0:	bd80      	pop	{r7, pc}
	...

10000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10000ed4:	b480      	push	{r7}
10000ed6:	b089      	sub	sp, #36	; 0x24
10000ed8:	af00      	add	r7, sp, #0
10000eda:	6078      	str	r0, [r7, #4]
10000edc:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10000ede:	4b8a      	ldr	r3, [pc, #552]	; (10001108 <HAL_GPIO_Init+0x234>)
10000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10000ee2:	2300      	movs	r3, #0
10000ee4:	61fb      	str	r3, [r7, #28]
10000ee6:	e191      	b.n	1000120c <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10000ee8:	2201      	movs	r2, #1
10000eea:	69fb      	ldr	r3, [r7, #28]
10000eec:	fa02 f303 	lsl.w	r3, r2, r3
10000ef0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10000ef2:	683b      	ldr	r3, [r7, #0]
10000ef4:	681b      	ldr	r3, [r3, #0]
10000ef6:	693a      	ldr	r2, [r7, #16]
10000ef8:	4013      	ands	r3, r2
10000efa:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10000efc:	68fa      	ldr	r2, [r7, #12]
10000efe:	693b      	ldr	r3, [r7, #16]
10000f00:	429a      	cmp	r2, r3
10000f02:	f040 8180 	bne.w	10001206 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000f06:	683b      	ldr	r3, [r7, #0]
10000f08:	685b      	ldr	r3, [r3, #4]
10000f0a:	2b02      	cmp	r3, #2
10000f0c:	d003      	beq.n	10000f16 <HAL_GPIO_Init+0x42>
10000f0e:	683b      	ldr	r3, [r7, #0]
10000f10:	685b      	ldr	r3, [r3, #4]
10000f12:	2b12      	cmp	r3, #18
10000f14:	d123      	bne.n	10000f5e <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10000f16:	69fb      	ldr	r3, [r7, #28]
10000f18:	08da      	lsrs	r2, r3, #3
10000f1a:	687b      	ldr	r3, [r7, #4]
10000f1c:	3208      	adds	r2, #8
10000f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10000f24:	69fb      	ldr	r3, [r7, #28]
10000f26:	f003 0307 	and.w	r3, r3, #7
10000f2a:	009b      	lsls	r3, r3, #2
10000f2c:	220f      	movs	r2, #15
10000f2e:	fa02 f303 	lsl.w	r3, r2, r3
10000f32:	43db      	mvns	r3, r3
10000f34:	69ba      	ldr	r2, [r7, #24]
10000f36:	4013      	ands	r3, r2
10000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10000f3a:	683b      	ldr	r3, [r7, #0]
10000f3c:	691a      	ldr	r2, [r3, #16]
10000f3e:	69fb      	ldr	r3, [r7, #28]
10000f40:	f003 0307 	and.w	r3, r3, #7
10000f44:	009b      	lsls	r3, r3, #2
10000f46:	fa02 f303 	lsl.w	r3, r2, r3
10000f4a:	69ba      	ldr	r2, [r7, #24]
10000f4c:	4313      	orrs	r3, r2
10000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10000f50:	69fb      	ldr	r3, [r7, #28]
10000f52:	08da      	lsrs	r2, r3, #3
10000f54:	687b      	ldr	r3, [r7, #4]
10000f56:	3208      	adds	r2, #8
10000f58:	69b9      	ldr	r1, [r7, #24]
10000f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10000f5e:	687b      	ldr	r3, [r7, #4]
10000f60:	681b      	ldr	r3, [r3, #0]
10000f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10000f64:	69fb      	ldr	r3, [r7, #28]
10000f66:	005b      	lsls	r3, r3, #1
10000f68:	2203      	movs	r2, #3
10000f6a:	fa02 f303 	lsl.w	r3, r2, r3
10000f6e:	43db      	mvns	r3, r3
10000f70:	69ba      	ldr	r2, [r7, #24]
10000f72:	4013      	ands	r3, r2
10000f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10000f76:	683b      	ldr	r3, [r7, #0]
10000f78:	685b      	ldr	r3, [r3, #4]
10000f7a:	f003 0203 	and.w	r2, r3, #3
10000f7e:	69fb      	ldr	r3, [r7, #28]
10000f80:	005b      	lsls	r3, r3, #1
10000f82:	fa02 f303 	lsl.w	r3, r2, r3
10000f86:	69ba      	ldr	r2, [r7, #24]
10000f88:	4313      	orrs	r3, r2
10000f8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10000f8c:	687b      	ldr	r3, [r7, #4]
10000f8e:	69ba      	ldr	r2, [r7, #24]
10000f90:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000f92:	683b      	ldr	r3, [r7, #0]
10000f94:	685b      	ldr	r3, [r3, #4]
10000f96:	2b01      	cmp	r3, #1
10000f98:	d00b      	beq.n	10000fb2 <HAL_GPIO_Init+0xde>
10000f9a:	683b      	ldr	r3, [r7, #0]
10000f9c:	685b      	ldr	r3, [r3, #4]
10000f9e:	2b02      	cmp	r3, #2
10000fa0:	d007      	beq.n	10000fb2 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000fa2:	683b      	ldr	r3, [r7, #0]
10000fa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000fa6:	2b11      	cmp	r3, #17
10000fa8:	d003      	beq.n	10000fb2 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000faa:	683b      	ldr	r3, [r7, #0]
10000fac:	685b      	ldr	r3, [r3, #4]
10000fae:	2b12      	cmp	r3, #18
10000fb0:	d130      	bne.n	10001014 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10000fb2:	687b      	ldr	r3, [r7, #4]
10000fb4:	689b      	ldr	r3, [r3, #8]
10000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10000fb8:	69fb      	ldr	r3, [r7, #28]
10000fba:	005b      	lsls	r3, r3, #1
10000fbc:	2203      	movs	r2, #3
10000fbe:	fa02 f303 	lsl.w	r3, r2, r3
10000fc2:	43db      	mvns	r3, r3
10000fc4:	69ba      	ldr	r2, [r7, #24]
10000fc6:	4013      	ands	r3, r2
10000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10000fca:	683b      	ldr	r3, [r7, #0]
10000fcc:	68da      	ldr	r2, [r3, #12]
10000fce:	69fb      	ldr	r3, [r7, #28]
10000fd0:	005b      	lsls	r3, r3, #1
10000fd2:	fa02 f303 	lsl.w	r3, r2, r3
10000fd6:	69ba      	ldr	r2, [r7, #24]
10000fd8:	4313      	orrs	r3, r2
10000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10000fdc:	687b      	ldr	r3, [r7, #4]
10000fde:	69ba      	ldr	r2, [r7, #24]
10000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10000fe2:	687b      	ldr	r3, [r7, #4]
10000fe4:	685b      	ldr	r3, [r3, #4]
10000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10000fe8:	2201      	movs	r2, #1
10000fea:	69fb      	ldr	r3, [r7, #28]
10000fec:	fa02 f303 	lsl.w	r3, r2, r3
10000ff0:	43db      	mvns	r3, r3
10000ff2:	69ba      	ldr	r2, [r7, #24]
10000ff4:	4013      	ands	r3, r2
10000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10000ff8:	683b      	ldr	r3, [r7, #0]
10000ffa:	685b      	ldr	r3, [r3, #4]
10000ffc:	091b      	lsrs	r3, r3, #4
10000ffe:	f003 0201 	and.w	r2, r3, #1
10001002:	69fb      	ldr	r3, [r7, #28]
10001004:	fa02 f303 	lsl.w	r3, r2, r3
10001008:	69ba      	ldr	r2, [r7, #24]
1000100a:	4313      	orrs	r3, r2
1000100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
1000100e:	687b      	ldr	r3, [r7, #4]
10001010:	69ba      	ldr	r2, [r7, #24]
10001012:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10001014:	687b      	ldr	r3, [r7, #4]
10001016:	68db      	ldr	r3, [r3, #12]
10001018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
1000101a:	69fb      	ldr	r3, [r7, #28]
1000101c:	005b      	lsls	r3, r3, #1
1000101e:	2203      	movs	r2, #3
10001020:	fa02 f303 	lsl.w	r3, r2, r3
10001024:	43db      	mvns	r3, r3
10001026:	69ba      	ldr	r2, [r7, #24]
10001028:	4013      	ands	r3, r2
1000102a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
1000102c:	683b      	ldr	r3, [r7, #0]
1000102e:	689a      	ldr	r2, [r3, #8]
10001030:	69fb      	ldr	r3, [r7, #28]
10001032:	005b      	lsls	r3, r3, #1
10001034:	fa02 f303 	lsl.w	r3, r2, r3
10001038:	69ba      	ldr	r2, [r7, #24]
1000103a:	4313      	orrs	r3, r2
1000103c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
1000103e:	687b      	ldr	r3, [r7, #4]
10001040:	69ba      	ldr	r2, [r7, #24]
10001042:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10001044:	683b      	ldr	r3, [r7, #0]
10001046:	685b      	ldr	r3, [r3, #4]
10001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
1000104c:	2b00      	cmp	r3, #0
1000104e:	f000 80da 	beq.w	10001206 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10001052:	4a2e      	ldr	r2, [pc, #184]	; (1000110c <HAL_GPIO_Init+0x238>)
10001054:	69fb      	ldr	r3, [r7, #28]
10001056:	089b      	lsrs	r3, r3, #2
10001058:	3318      	adds	r3, #24
1000105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10001060:	69fb      	ldr	r3, [r7, #28]
10001062:	f003 0303 	and.w	r3, r3, #3
10001066:	00db      	lsls	r3, r3, #3
10001068:	22ff      	movs	r2, #255	; 0xff
1000106a:	fa02 f303 	lsl.w	r3, r2, r3
1000106e:	43db      	mvns	r3, r3
10001070:	69ba      	ldr	r2, [r7, #24]
10001072:	4013      	ands	r3, r2
10001074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10001076:	687b      	ldr	r3, [r7, #4]
10001078:	4a25      	ldr	r2, [pc, #148]	; (10001110 <HAL_GPIO_Init+0x23c>)
1000107a:	4293      	cmp	r3, r2
1000107c:	d05e      	beq.n	1000113c <HAL_GPIO_Init+0x268>
1000107e:	687b      	ldr	r3, [r7, #4]
10001080:	4a24      	ldr	r2, [pc, #144]	; (10001114 <HAL_GPIO_Init+0x240>)
10001082:	4293      	cmp	r3, r2
10001084:	d03d      	beq.n	10001102 <HAL_GPIO_Init+0x22e>
10001086:	687b      	ldr	r3, [r7, #4]
10001088:	4a23      	ldr	r2, [pc, #140]	; (10001118 <HAL_GPIO_Init+0x244>)
1000108a:	4293      	cmp	r3, r2
1000108c:	d037      	beq.n	100010fe <HAL_GPIO_Init+0x22a>
1000108e:	687b      	ldr	r3, [r7, #4]
10001090:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10001094:	d031      	beq.n	100010fa <HAL_GPIO_Init+0x226>
10001096:	687b      	ldr	r3, [r7, #4]
10001098:	4a20      	ldr	r2, [pc, #128]	; (1000111c <HAL_GPIO_Init+0x248>)
1000109a:	4293      	cmp	r3, r2
1000109c:	d02b      	beq.n	100010f6 <HAL_GPIO_Init+0x222>
1000109e:	687b      	ldr	r3, [r7, #4]
100010a0:	4a1f      	ldr	r2, [pc, #124]	; (10001120 <HAL_GPIO_Init+0x24c>)
100010a2:	4293      	cmp	r3, r2
100010a4:	d025      	beq.n	100010f2 <HAL_GPIO_Init+0x21e>
100010a6:	687b      	ldr	r3, [r7, #4]
100010a8:	4a1e      	ldr	r2, [pc, #120]	; (10001124 <HAL_GPIO_Init+0x250>)
100010aa:	4293      	cmp	r3, r2
100010ac:	d01f      	beq.n	100010ee <HAL_GPIO_Init+0x21a>
100010ae:	687b      	ldr	r3, [r7, #4]
100010b0:	4a1d      	ldr	r2, [pc, #116]	; (10001128 <HAL_GPIO_Init+0x254>)
100010b2:	4293      	cmp	r3, r2
100010b4:	d019      	beq.n	100010ea <HAL_GPIO_Init+0x216>
100010b6:	687b      	ldr	r3, [r7, #4]
100010b8:	4a1c      	ldr	r2, [pc, #112]	; (1000112c <HAL_GPIO_Init+0x258>)
100010ba:	4293      	cmp	r3, r2
100010bc:	d013      	beq.n	100010e6 <HAL_GPIO_Init+0x212>
100010be:	687b      	ldr	r3, [r7, #4]
100010c0:	4a1b      	ldr	r2, [pc, #108]	; (10001130 <HAL_GPIO_Init+0x25c>)
100010c2:	4293      	cmp	r3, r2
100010c4:	d00d      	beq.n	100010e2 <HAL_GPIO_Init+0x20e>
100010c6:	687b      	ldr	r3, [r7, #4]
100010c8:	4a1a      	ldr	r2, [pc, #104]	; (10001134 <HAL_GPIO_Init+0x260>)
100010ca:	4293      	cmp	r3, r2
100010cc:	d007      	beq.n	100010de <HAL_GPIO_Init+0x20a>
100010ce:	687b      	ldr	r3, [r7, #4]
100010d0:	4a19      	ldr	r2, [pc, #100]	; (10001138 <HAL_GPIO_Init+0x264>)
100010d2:	4293      	cmp	r3, r2
100010d4:	d101      	bne.n	100010da <HAL_GPIO_Init+0x206>
100010d6:	230b      	movs	r3, #11
100010d8:	e031      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010da:	2319      	movs	r3, #25
100010dc:	e02f      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010de:	230a      	movs	r3, #10
100010e0:	e02d      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010e2:	2309      	movs	r3, #9
100010e4:	e02b      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010e6:	2308      	movs	r3, #8
100010e8:	e029      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010ea:	2307      	movs	r3, #7
100010ec:	e027      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010ee:	2306      	movs	r3, #6
100010f0:	e025      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010f2:	2305      	movs	r3, #5
100010f4:	e023      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010f6:	2304      	movs	r3, #4
100010f8:	e021      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010fa:	2303      	movs	r3, #3
100010fc:	e01f      	b.n	1000113e <HAL_GPIO_Init+0x26a>
100010fe:	2302      	movs	r3, #2
10001100:	e01d      	b.n	1000113e <HAL_GPIO_Init+0x26a>
10001102:	2301      	movs	r3, #1
10001104:	e01b      	b.n	1000113e <HAL_GPIO_Init+0x26a>
10001106:	bf00      	nop
10001108:	5000d0c0 	.word	0x5000d0c0
1000110c:	5000d000 	.word	0x5000d000
10001110:	50002000 	.word	0x50002000
10001114:	50003000 	.word	0x50003000
10001118:	50004000 	.word	0x50004000
1000111c:	50006000 	.word	0x50006000
10001120:	50007000 	.word	0x50007000
10001124:	50008000 	.word	0x50008000
10001128:	50009000 	.word	0x50009000
1000112c:	5000a000 	.word	0x5000a000
10001130:	5000b000 	.word	0x5000b000
10001134:	5000c000 	.word	0x5000c000
10001138:	54004000 	.word	0x54004000
1000113c:	2300      	movs	r3, #0
1000113e:	69fa      	ldr	r2, [r7, #28]
10001140:	f002 0203 	and.w	r2, r2, #3
10001144:	00d2      	lsls	r2, r2, #3
10001146:	4093      	lsls	r3, r2
10001148:	461a      	mov	r2, r3
1000114a:	69bb      	ldr	r3, [r7, #24]
1000114c:	4313      	orrs	r3, r2
1000114e:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10001150:	4934      	ldr	r1, [pc, #208]	; (10001224 <HAL_GPIO_Init+0x350>)
10001152:	69fb      	ldr	r3, [r7, #28]
10001154:	089b      	lsrs	r3, r3, #2
10001156:	3318      	adds	r3, #24
10001158:	69ba      	ldr	r2, [r7, #24]
1000115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
1000115e:	697b      	ldr	r3, [r7, #20]
10001160:	681b      	ldr	r3, [r3, #0]
10001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001164:	68fb      	ldr	r3, [r7, #12]
10001166:	43db      	mvns	r3, r3
10001168:	69ba      	ldr	r2, [r7, #24]
1000116a:	4013      	ands	r3, r2
1000116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
1000116e:	683b      	ldr	r3, [r7, #0]
10001170:	685b      	ldr	r3, [r3, #4]
10001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10001176:	2b00      	cmp	r3, #0
10001178:	d003      	beq.n	10001182 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
1000117a:	69ba      	ldr	r2, [r7, #24]
1000117c:	68fb      	ldr	r3, [r7, #12]
1000117e:	4313      	orrs	r3, r2
10001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10001182:	697b      	ldr	r3, [r7, #20]
10001184:	69ba      	ldr	r2, [r7, #24]
10001186:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10001188:	697b      	ldr	r3, [r7, #20]
1000118a:	685b      	ldr	r3, [r3, #4]
1000118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000118e:	68fb      	ldr	r3, [r7, #12]
10001190:	43db      	mvns	r3, r3
10001192:	69ba      	ldr	r2, [r7, #24]
10001194:	4013      	ands	r3, r2
10001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10001198:	683b      	ldr	r3, [r7, #0]
1000119a:	685b      	ldr	r3, [r3, #4]
1000119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
100011a0:	2b00      	cmp	r3, #0
100011a2:	d003      	beq.n	100011ac <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
100011a4:	69ba      	ldr	r2, [r7, #24]
100011a6:	68fb      	ldr	r3, [r7, #12]
100011a8:	4313      	orrs	r3, r2
100011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
100011ac:	697b      	ldr	r3, [r7, #20]
100011ae:	69ba      	ldr	r2, [r7, #24]
100011b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
100011b2:	4b1c      	ldr	r3, [pc, #112]	; (10001224 <HAL_GPIO_Init+0x350>)
100011b4:	681b      	ldr	r3, [r3, #0]
100011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100011b8:	68fb      	ldr	r3, [r7, #12]
100011ba:	43db      	mvns	r3, r3
100011bc:	69ba      	ldr	r2, [r7, #24]
100011be:	4013      	ands	r3, r2
100011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
100011c2:	683b      	ldr	r3, [r7, #0]
100011c4:	685b      	ldr	r3, [r3, #4]
100011c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
100011ca:	2b00      	cmp	r3, #0
100011cc:	d003      	beq.n	100011d6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
100011ce:	69ba      	ldr	r2, [r7, #24]
100011d0:	68fb      	ldr	r3, [r7, #12]
100011d2:	4313      	orrs	r3, r2
100011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
100011d6:	4a13      	ldr	r2, [pc, #76]	; (10001224 <HAL_GPIO_Init+0x350>)
100011d8:	69bb      	ldr	r3, [r7, #24]
100011da:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
100011dc:	4b11      	ldr	r3, [pc, #68]	; (10001224 <HAL_GPIO_Init+0x350>)
100011de:	685b      	ldr	r3, [r3, #4]
100011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100011e2:	68fb      	ldr	r3, [r7, #12]
100011e4:	43db      	mvns	r3, r3
100011e6:	69ba      	ldr	r2, [r7, #24]
100011e8:	4013      	ands	r3, r2
100011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
100011ec:	683b      	ldr	r3, [r7, #0]
100011ee:	685b      	ldr	r3, [r3, #4]
100011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
100011f4:	2b00      	cmp	r3, #0
100011f6:	d003      	beq.n	10001200 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
100011f8:	69ba      	ldr	r2, [r7, #24]
100011fa:	68fb      	ldr	r3, [r7, #12]
100011fc:	4313      	orrs	r3, r2
100011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10001200:	4a08      	ldr	r2, [pc, #32]	; (10001224 <HAL_GPIO_Init+0x350>)
10001202:	69bb      	ldr	r3, [r7, #24]
10001204:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10001206:	69fb      	ldr	r3, [r7, #28]
10001208:	3301      	adds	r3, #1
1000120a:	61fb      	str	r3, [r7, #28]
1000120c:	69fb      	ldr	r3, [r7, #28]
1000120e:	2b0f      	cmp	r3, #15
10001210:	f67f ae6a 	bls.w	10000ee8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10001214:	bf00      	nop
10001216:	bf00      	nop
10001218:	3724      	adds	r7, #36	; 0x24
1000121a:	46bd      	mov	sp, r7
1000121c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001220:	4770      	bx	lr
10001222:	bf00      	nop
10001224:	5000d000 	.word	0x5000d000

10001228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10001228:	b480      	push	{r7}
1000122a:	b083      	sub	sp, #12
1000122c:	af00      	add	r7, sp, #0
1000122e:	6078      	str	r0, [r7, #4]
10001230:	460b      	mov	r3, r1
10001232:	807b      	strh	r3, [r7, #2]
10001234:	4613      	mov	r3, r2
10001236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10001238:	787b      	ldrb	r3, [r7, #1]
1000123a:	2b00      	cmp	r3, #0
1000123c:	d003      	beq.n	10001246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
1000123e:	887a      	ldrh	r2, [r7, #2]
10001240:	687b      	ldr	r3, [r7, #4]
10001242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10001244:	e003      	b.n	1000124e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10001246:	887b      	ldrh	r3, [r7, #2]
10001248:	041a      	lsls	r2, r3, #16
1000124a:	687b      	ldr	r3, [r7, #4]
1000124c:	619a      	str	r2, [r3, #24]
}
1000124e:	bf00      	nop
10001250:	370c      	adds	r7, #12
10001252:	46bd      	mov	sp, r7
10001254:	f85d 7b04 	ldr.w	r7, [sp], #4
10001258:	4770      	bx	lr

1000125a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
1000125a:	b580      	push	{r7, lr}
1000125c:	b082      	sub	sp, #8
1000125e:	af00      	add	r7, sp, #0
10001260:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
10001262:	687b      	ldr	r3, [r7, #4]
10001264:	2b00      	cmp	r3, #0
10001266:	d101      	bne.n	1000126c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
10001268:	2301      	movs	r3, #1
1000126a:	e081      	b.n	10001370 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
1000126c:	687b      	ldr	r3, [r7, #4]
1000126e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
10001272:	b2db      	uxtb	r3, r3
10001274:	2b00      	cmp	r3, #0
10001276:	d106      	bne.n	10001286 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
10001278:	687b      	ldr	r3, [r7, #4]
1000127a:	2200      	movs	r2, #0
1000127c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
10001280:	6878      	ldr	r0, [r7, #4]
10001282:	f7ff f809 	bl	10000298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
10001286:	687b      	ldr	r3, [r7, #4]
10001288:	2224      	movs	r2, #36	; 0x24
1000128a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
1000128e:	687b      	ldr	r3, [r7, #4]
10001290:	681b      	ldr	r3, [r3, #0]
10001292:	681a      	ldr	r2, [r3, #0]
10001294:	687b      	ldr	r3, [r7, #4]
10001296:	681b      	ldr	r3, [r3, #0]
10001298:	f022 0201 	bic.w	r2, r2, #1
1000129c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
1000129e:	687b      	ldr	r3, [r7, #4]
100012a0:	685a      	ldr	r2, [r3, #4]
100012a2:	687b      	ldr	r3, [r7, #4]
100012a4:	681b      	ldr	r3, [r3, #0]
100012a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
100012aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
100012ac:	687b      	ldr	r3, [r7, #4]
100012ae:	681b      	ldr	r3, [r3, #0]
100012b0:	689a      	ldr	r2, [r3, #8]
100012b2:	687b      	ldr	r3, [r7, #4]
100012b4:	681b      	ldr	r3, [r3, #0]
100012b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
100012ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
100012bc:	687b      	ldr	r3, [r7, #4]
100012be:	68db      	ldr	r3, [r3, #12]
100012c0:	2b01      	cmp	r3, #1
100012c2:	d107      	bne.n	100012d4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
100012c4:	687b      	ldr	r3, [r7, #4]
100012c6:	689a      	ldr	r2, [r3, #8]
100012c8:	687b      	ldr	r3, [r7, #4]
100012ca:	681b      	ldr	r3, [r3, #0]
100012cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
100012d0:	609a      	str	r2, [r3, #8]
100012d2:	e006      	b.n	100012e2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
100012d4:	687b      	ldr	r3, [r7, #4]
100012d6:	689a      	ldr	r2, [r3, #8]
100012d8:	687b      	ldr	r3, [r7, #4]
100012da:	681b      	ldr	r3, [r3, #0]
100012dc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
100012e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
100012e2:	687b      	ldr	r3, [r7, #4]
100012e4:	68db      	ldr	r3, [r3, #12]
100012e6:	2b02      	cmp	r3, #2
100012e8:	d104      	bne.n	100012f4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
100012ea:	687b      	ldr	r3, [r7, #4]
100012ec:	681b      	ldr	r3, [r3, #0]
100012ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
100012f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
100012f4:	687b      	ldr	r3, [r7, #4]
100012f6:	681b      	ldr	r3, [r3, #0]
100012f8:	685b      	ldr	r3, [r3, #4]
100012fa:	687a      	ldr	r2, [r7, #4]
100012fc:	6812      	ldr	r2, [r2, #0]
100012fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
10001302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
10001306:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
10001308:	687b      	ldr	r3, [r7, #4]
1000130a:	681b      	ldr	r3, [r3, #0]
1000130c:	68da      	ldr	r2, [r3, #12]
1000130e:	687b      	ldr	r3, [r7, #4]
10001310:	681b      	ldr	r3, [r3, #0]
10001312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
10001316:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
10001318:	687b      	ldr	r3, [r7, #4]
1000131a:	691a      	ldr	r2, [r3, #16]
1000131c:	687b      	ldr	r3, [r7, #4]
1000131e:	695b      	ldr	r3, [r3, #20]
10001320:	ea42 0103 	orr.w	r1, r2, r3
10001324:	687b      	ldr	r3, [r7, #4]
10001326:	699b      	ldr	r3, [r3, #24]
10001328:	021a      	lsls	r2, r3, #8
1000132a:	687b      	ldr	r3, [r7, #4]
1000132c:	681b      	ldr	r3, [r3, #0]
1000132e:	430a      	orrs	r2, r1
10001330:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
10001332:	687b      	ldr	r3, [r7, #4]
10001334:	69d9      	ldr	r1, [r3, #28]
10001336:	687b      	ldr	r3, [r7, #4]
10001338:	6a1a      	ldr	r2, [r3, #32]
1000133a:	687b      	ldr	r3, [r7, #4]
1000133c:	681b      	ldr	r3, [r3, #0]
1000133e:	430a      	orrs	r2, r1
10001340:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
10001342:	687b      	ldr	r3, [r7, #4]
10001344:	681b      	ldr	r3, [r3, #0]
10001346:	681a      	ldr	r2, [r3, #0]
10001348:	687b      	ldr	r3, [r7, #4]
1000134a:	681b      	ldr	r3, [r3, #0]
1000134c:	f042 0201 	orr.w	r2, r2, #1
10001350:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10001352:	687b      	ldr	r3, [r7, #4]
10001354:	2200      	movs	r2, #0
10001356:	64da      	str	r2, [r3, #76]	; 0x4c
  hi2c->State = HAL_I2C_STATE_READY;
10001358:	687b      	ldr	r3, [r7, #4]
1000135a:	2220      	movs	r2, #32
1000135c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  hi2c->PreviousState = I2C_STATE_NONE;
10001360:	687b      	ldr	r3, [r7, #4]
10001362:	2200      	movs	r2, #0
10001364:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10001366:	687b      	ldr	r3, [r7, #4]
10001368:	2200      	movs	r2, #0
1000136a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  return HAL_OK;
1000136e:	2300      	movs	r3, #0
}
10001370:	4618      	mov	r0, r3
10001372:	3708      	adds	r7, #8
10001374:	46bd      	mov	sp, r7
10001376:	bd80      	pop	{r7, pc}

10001378 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10001378:	b580      	push	{r7, lr}
1000137a:	b088      	sub	sp, #32
1000137c:	af02      	add	r7, sp, #8
1000137e:	60f8      	str	r0, [r7, #12]
10001380:	4608      	mov	r0, r1
10001382:	4611      	mov	r1, r2
10001384:	461a      	mov	r2, r3
10001386:	4603      	mov	r3, r0
10001388:	817b      	strh	r3, [r7, #10]
1000138a:	460b      	mov	r3, r1
1000138c:	813b      	strh	r3, [r7, #8]
1000138e:	4613      	mov	r3, r2
10001390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10001392:	68fb      	ldr	r3, [r7, #12]
10001394:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
10001398:	b2db      	uxtb	r3, r3
1000139a:	2b20      	cmp	r3, #32
1000139c:	f040 80f9 	bne.w	10001592 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
100013a0:	6a3b      	ldr	r3, [r7, #32]
100013a2:	2b00      	cmp	r3, #0
100013a4:	d002      	beq.n	100013ac <HAL_I2C_Mem_Write+0x34>
100013a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
100013a8:	2b00      	cmp	r3, #0
100013aa:	d105      	bne.n	100013b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
100013ac:	68fb      	ldr	r3, [r7, #12]
100013ae:	f44f 7200 	mov.w	r2, #512	; 0x200
100013b2:	64da      	str	r2, [r3, #76]	; 0x4c
      return  HAL_ERROR;
100013b4:	2301      	movs	r3, #1
100013b6:	e0ed      	b.n	10001594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100013b8:	68fb      	ldr	r3, [r7, #12]
100013ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
100013be:	2b01      	cmp	r3, #1
100013c0:	d101      	bne.n	100013c6 <HAL_I2C_Mem_Write+0x4e>
100013c2:	2302      	movs	r3, #2
100013c4:	e0e6      	b.n	10001594 <HAL_I2C_Mem_Write+0x21c>
100013c6:	68fb      	ldr	r3, [r7, #12]
100013c8:	2201      	movs	r2, #1
100013ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
100013ce:	f7ff fc3f 	bl	10000c50 <HAL_GetTick>
100013d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
100013d4:	697b      	ldr	r3, [r7, #20]
100013d6:	9300      	str	r3, [sp, #0]
100013d8:	2319      	movs	r3, #25
100013da:	2201      	movs	r2, #1
100013dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
100013e0:	68f8      	ldr	r0, [r7, #12]
100013e2:	f000 fbcb 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
100013e6:	4603      	mov	r3, r0
100013e8:	2b00      	cmp	r3, #0
100013ea:	d001      	beq.n	100013f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
100013ec:	2301      	movs	r3, #1
100013ee:	e0d1      	b.n	10001594 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
100013f0:	68fb      	ldr	r3, [r7, #12]
100013f2:	2221      	movs	r2, #33	; 0x21
100013f4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    hi2c->Mode      = HAL_I2C_MODE_MEM;
100013f8:	68fb      	ldr	r3, [r7, #12]
100013fa:	2240      	movs	r2, #64	; 0x40
100013fc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10001400:	68fb      	ldr	r3, [r7, #12]
10001402:	2200      	movs	r2, #0
10001404:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
10001406:	68fb      	ldr	r3, [r7, #12]
10001408:	6a3a      	ldr	r2, [r7, #32]
1000140a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
1000140c:	68fb      	ldr	r3, [r7, #12]
1000140e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
10001410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
10001412:	68fb      	ldr	r3, [r7, #12]
10001414:	2200      	movs	r2, #0
10001416:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
10001418:	88f8      	ldrh	r0, [r7, #6]
1000141a:	893a      	ldrh	r2, [r7, #8]
1000141c:	8979      	ldrh	r1, [r7, #10]
1000141e:	697b      	ldr	r3, [r7, #20]
10001420:	9301      	str	r3, [sp, #4]
10001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001424:	9300      	str	r3, [sp, #0]
10001426:	4603      	mov	r3, r0
10001428:	68f8      	ldr	r0, [r7, #12]
1000142a:	f000 fadb 	bl	100019e4 <I2C_RequestMemoryWrite>
1000142e:	4603      	mov	r3, r0
10001430:	2b00      	cmp	r3, #0
10001432:	d005      	beq.n	10001440 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10001434:	68fb      	ldr	r3, [r7, #12]
10001436:	2200      	movs	r2, #0
10001438:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
1000143c:	2301      	movs	r3, #1
1000143e:	e0a9      	b.n	10001594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10001440:	68fb      	ldr	r3, [r7, #12]
10001442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
10001444:	b29b      	uxth	r3, r3
10001446:	2bff      	cmp	r3, #255	; 0xff
10001448:	d90e      	bls.n	10001468 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
1000144a:	68fb      	ldr	r3, [r7, #12]
1000144c:	22ff      	movs	r2, #255	; 0xff
1000144e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
10001450:	68fb      	ldr	r3, [r7, #12]
10001452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10001454:	b2da      	uxtb	r2, r3
10001456:	8979      	ldrh	r1, [r7, #10]
10001458:	2300      	movs	r3, #0
1000145a:	9300      	str	r3, [sp, #0]
1000145c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10001460:	68f8      	ldr	r0, [r7, #12]
10001462:	f000 fcad 	bl	10001dc0 <I2C_TransferConfig>
10001466:	e00f      	b.n	10001488 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10001468:	68fb      	ldr	r3, [r7, #12]
1000146a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
1000146c:	b29a      	uxth	r2, r3
1000146e:	68fb      	ldr	r3, [r7, #12]
10001470:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
10001472:	68fb      	ldr	r3, [r7, #12]
10001474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10001476:	b2da      	uxtb	r2, r3
10001478:	8979      	ldrh	r1, [r7, #10]
1000147a:	2300      	movs	r3, #0
1000147c:	9300      	str	r3, [sp, #0]
1000147e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
10001482:	68f8      	ldr	r0, [r7, #12]
10001484:	f000 fc9c 	bl	10001dc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
10001488:	697a      	ldr	r2, [r7, #20]
1000148a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1000148c:	68f8      	ldr	r0, [r7, #12]
1000148e:	f000 fbb5 	bl	10001bfc <I2C_WaitOnTXISFlagUntilTimeout>
10001492:	4603      	mov	r3, r0
10001494:	2b00      	cmp	r3, #0
10001496:	d001      	beq.n	1000149c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
10001498:	2301      	movs	r3, #1
1000149a:	e07b      	b.n	10001594 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
1000149c:	68fb      	ldr	r3, [r7, #12]
1000149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014a0:	781a      	ldrb	r2, [r3, #0]
100014a2:	68fb      	ldr	r3, [r7, #12]
100014a4:	681b      	ldr	r3, [r3, #0]
100014a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100014a8:	68fb      	ldr	r3, [r7, #12]
100014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014ac:	1c5a      	adds	r2, r3, #1
100014ae:	68fb      	ldr	r3, [r7, #12]
100014b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
100014b2:	68fb      	ldr	r3, [r7, #12]
100014b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
100014b6:	b29b      	uxth	r3, r3
100014b8:	3b01      	subs	r3, #1
100014ba:	b29a      	uxth	r2, r3
100014bc:	68fb      	ldr	r3, [r7, #12]
100014be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
100014c0:	68fb      	ldr	r3, [r7, #12]
100014c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
100014c4:	3b01      	subs	r3, #1
100014c6:	b29a      	uxth	r2, r3
100014c8:	68fb      	ldr	r3, [r7, #12]
100014ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
100014cc:	68fb      	ldr	r3, [r7, #12]
100014ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
100014d0:	b29b      	uxth	r3, r3
100014d2:	2b00      	cmp	r3, #0
100014d4:	d034      	beq.n	10001540 <HAL_I2C_Mem_Write+0x1c8>
100014d6:	68fb      	ldr	r3, [r7, #12]
100014d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
100014da:	2b00      	cmp	r3, #0
100014dc:	d130      	bne.n	10001540 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
100014de:	697b      	ldr	r3, [r7, #20]
100014e0:	9300      	str	r3, [sp, #0]
100014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
100014e4:	2200      	movs	r2, #0
100014e6:	2180      	movs	r1, #128	; 0x80
100014e8:	68f8      	ldr	r0, [r7, #12]
100014ea:	f000 fb47 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
100014ee:	4603      	mov	r3, r0
100014f0:	2b00      	cmp	r3, #0
100014f2:	d001      	beq.n	100014f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
100014f4:	2301      	movs	r3, #1
100014f6:	e04d      	b.n	10001594 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
100014f8:	68fb      	ldr	r3, [r7, #12]
100014fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
100014fc:	b29b      	uxth	r3, r3
100014fe:	2bff      	cmp	r3, #255	; 0xff
10001500:	d90e      	bls.n	10001520 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
10001502:	68fb      	ldr	r3, [r7, #12]
10001504:	22ff      	movs	r2, #255	; 0xff
10001506:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
10001508:	68fb      	ldr	r3, [r7, #12]
1000150a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000150c:	b2da      	uxtb	r2, r3
1000150e:	8979      	ldrh	r1, [r7, #10]
10001510:	2300      	movs	r3, #0
10001512:	9300      	str	r3, [sp, #0]
10001514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10001518:	68f8      	ldr	r0, [r7, #12]
1000151a:	f000 fc51 	bl	10001dc0 <I2C_TransferConfig>
1000151e:	e00f      	b.n	10001540 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
10001520:	68fb      	ldr	r3, [r7, #12]
10001522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
10001524:	b29a      	uxth	r2, r3
10001526:	68fb      	ldr	r3, [r7, #12]
10001528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
1000152a:	68fb      	ldr	r3, [r7, #12]
1000152c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000152e:	b2da      	uxtb	r2, r3
10001530:	8979      	ldrh	r1, [r7, #10]
10001532:	2300      	movs	r3, #0
10001534:	9300      	str	r3, [sp, #0]
10001536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
1000153a:	68f8      	ldr	r0, [r7, #12]
1000153c:	f000 fc40 	bl	10001dc0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
10001540:	68fb      	ldr	r3, [r7, #12]
10001542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
10001544:	b29b      	uxth	r3, r3
10001546:	2b00      	cmp	r3, #0
10001548:	d19e      	bne.n	10001488 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
1000154a:	697a      	ldr	r2, [r7, #20]
1000154c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1000154e:	68f8      	ldr	r0, [r7, #12]
10001550:	f000 fb94 	bl	10001c7c <I2C_WaitOnSTOPFlagUntilTimeout>
10001554:	4603      	mov	r3, r0
10001556:	2b00      	cmp	r3, #0
10001558:	d001      	beq.n	1000155e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
1000155a:	2301      	movs	r3, #1
1000155c:	e01a      	b.n	10001594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1000155e:	68fb      	ldr	r3, [r7, #12]
10001560:	681b      	ldr	r3, [r3, #0]
10001562:	2220      	movs	r2, #32
10001564:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
10001566:	68fb      	ldr	r3, [r7, #12]
10001568:	681b      	ldr	r3, [r3, #0]
1000156a:	6859      	ldr	r1, [r3, #4]
1000156c:	68fb      	ldr	r3, [r7, #12]
1000156e:	681a      	ldr	r2, [r3, #0]
10001570:	4b0a      	ldr	r3, [pc, #40]	; (1000159c <HAL_I2C_Mem_Write+0x224>)
10001572:	400b      	ands	r3, r1
10001574:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
10001576:	68fb      	ldr	r3, [r7, #12]
10001578:	2220      	movs	r2, #32
1000157a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    hi2c->Mode  = HAL_I2C_MODE_NONE;
1000157e:	68fb      	ldr	r3, [r7, #12]
10001580:	2200      	movs	r2, #0
10001582:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10001586:	68fb      	ldr	r3, [r7, #12]
10001588:	2200      	movs	r2, #0
1000158a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
1000158e:	2300      	movs	r3, #0
10001590:	e000      	b.n	10001594 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
10001592:	2302      	movs	r3, #2
  }
}
10001594:	4618      	mov	r0, r3
10001596:	3718      	adds	r7, #24
10001598:	46bd      	mov	sp, r7
1000159a:	bd80      	pop	{r7, pc}
1000159c:	fe00e800 	.word	0xfe00e800

100015a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
100015a0:	b580      	push	{r7, lr}
100015a2:	b088      	sub	sp, #32
100015a4:	af02      	add	r7, sp, #8
100015a6:	60f8      	str	r0, [r7, #12]
100015a8:	4608      	mov	r0, r1
100015aa:	4611      	mov	r1, r2
100015ac:	461a      	mov	r2, r3
100015ae:	4603      	mov	r3, r0
100015b0:	817b      	strh	r3, [r7, #10]
100015b2:	460b      	mov	r3, r1
100015b4:	813b      	strh	r3, [r7, #8]
100015b6:	4613      	mov	r3, r2
100015b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
100015ba:	68fb      	ldr	r3, [r7, #12]
100015bc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
100015c0:	b2db      	uxtb	r3, r3
100015c2:	2b20      	cmp	r3, #32
100015c4:	f040 80fd 	bne.w	100017c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
100015c8:	6a3b      	ldr	r3, [r7, #32]
100015ca:	2b00      	cmp	r3, #0
100015cc:	d002      	beq.n	100015d4 <HAL_I2C_Mem_Read+0x34>
100015ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
100015d0:	2b00      	cmp	r3, #0
100015d2:	d105      	bne.n	100015e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
100015d4:	68fb      	ldr	r3, [r7, #12]
100015d6:	f44f 7200 	mov.w	r2, #512	; 0x200
100015da:	64da      	str	r2, [r3, #76]	; 0x4c
      return  HAL_ERROR;
100015dc:	2301      	movs	r3, #1
100015de:	e0f1      	b.n	100017c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100015e0:	68fb      	ldr	r3, [r7, #12]
100015e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
100015e6:	2b01      	cmp	r3, #1
100015e8:	d101      	bne.n	100015ee <HAL_I2C_Mem_Read+0x4e>
100015ea:	2302      	movs	r3, #2
100015ec:	e0ea      	b.n	100017c4 <HAL_I2C_Mem_Read+0x224>
100015ee:	68fb      	ldr	r3, [r7, #12]
100015f0:	2201      	movs	r2, #1
100015f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
100015f6:	f7ff fb2b 	bl	10000c50 <HAL_GetTick>
100015fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
100015fc:	697b      	ldr	r3, [r7, #20]
100015fe:	9300      	str	r3, [sp, #0]
10001600:	2319      	movs	r3, #25
10001602:	2201      	movs	r2, #1
10001604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
10001608:	68f8      	ldr	r0, [r7, #12]
1000160a:	f000 fab7 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
1000160e:	4603      	mov	r3, r0
10001610:	2b00      	cmp	r3, #0
10001612:	d001      	beq.n	10001618 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
10001614:	2301      	movs	r3, #1
10001616:	e0d5      	b.n	100017c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
10001618:	68fb      	ldr	r3, [r7, #12]
1000161a:	2222      	movs	r2, #34	; 0x22
1000161c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    hi2c->Mode      = HAL_I2C_MODE_MEM;
10001620:	68fb      	ldr	r3, [r7, #12]
10001622:	2240      	movs	r2, #64	; 0x40
10001624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10001628:	68fb      	ldr	r3, [r7, #12]
1000162a:	2200      	movs	r2, #0
1000162c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
1000162e:	68fb      	ldr	r3, [r7, #12]
10001630:	6a3a      	ldr	r2, [r7, #32]
10001632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
10001634:	68fb      	ldr	r3, [r7, #12]
10001636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
10001638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
1000163a:	68fb      	ldr	r3, [r7, #12]
1000163c:	2200      	movs	r2, #0
1000163e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
10001640:	88f8      	ldrh	r0, [r7, #6]
10001642:	893a      	ldrh	r2, [r7, #8]
10001644:	8979      	ldrh	r1, [r7, #10]
10001646:	697b      	ldr	r3, [r7, #20]
10001648:	9301      	str	r3, [sp, #4]
1000164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000164c:	9300      	str	r3, [sp, #0]
1000164e:	4603      	mov	r3, r0
10001650:	68f8      	ldr	r0, [r7, #12]
10001652:	f000 fa1b 	bl	10001a8c <I2C_RequestMemoryRead>
10001656:	4603      	mov	r3, r0
10001658:	2b00      	cmp	r3, #0
1000165a:	d005      	beq.n	10001668 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1000165c:	68fb      	ldr	r3, [r7, #12]
1000165e:	2200      	movs	r2, #0
10001660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
10001664:	2301      	movs	r3, #1
10001666:	e0ad      	b.n	100017c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10001668:	68fb      	ldr	r3, [r7, #12]
1000166a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
1000166c:	b29b      	uxth	r3, r3
1000166e:	2bff      	cmp	r3, #255	; 0xff
10001670:	d90e      	bls.n	10001690 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10001672:	68fb      	ldr	r3, [r7, #12]
10001674:	22ff      	movs	r2, #255	; 0xff
10001676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
10001678:	68fb      	ldr	r3, [r7, #12]
1000167a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000167c:	b2da      	uxtb	r2, r3
1000167e:	8979      	ldrh	r1, [r7, #10]
10001680:	4b52      	ldr	r3, [pc, #328]	; (100017cc <HAL_I2C_Mem_Read+0x22c>)
10001682:	9300      	str	r3, [sp, #0]
10001684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10001688:	68f8      	ldr	r0, [r7, #12]
1000168a:	f000 fb99 	bl	10001dc0 <I2C_TransferConfig>
1000168e:	e00f      	b.n	100016b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10001690:	68fb      	ldr	r3, [r7, #12]
10001692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
10001694:	b29a      	uxth	r2, r3
10001696:	68fb      	ldr	r3, [r7, #12]
10001698:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
1000169a:	68fb      	ldr	r3, [r7, #12]
1000169c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000169e:	b2da      	uxtb	r2, r3
100016a0:	8979      	ldrh	r1, [r7, #10]
100016a2:	4b4a      	ldr	r3, [pc, #296]	; (100017cc <HAL_I2C_Mem_Read+0x22c>)
100016a4:	9300      	str	r3, [sp, #0]
100016a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
100016aa:	68f8      	ldr	r0, [r7, #12]
100016ac:	f000 fb88 	bl	10001dc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
100016b0:	697b      	ldr	r3, [r7, #20]
100016b2:	9300      	str	r3, [sp, #0]
100016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
100016b6:	2200      	movs	r2, #0
100016b8:	2104      	movs	r1, #4
100016ba:	68f8      	ldr	r0, [r7, #12]
100016bc:	f000 fa5e 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
100016c0:	4603      	mov	r3, r0
100016c2:	2b00      	cmp	r3, #0
100016c4:	d001      	beq.n	100016ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
100016c6:	2301      	movs	r3, #1
100016c8:	e07c      	b.n	100017c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100016ca:	68fb      	ldr	r3, [r7, #12]
100016cc:	681b      	ldr	r3, [r3, #0]
100016ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100016d0:	68fb      	ldr	r3, [r7, #12]
100016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100016d4:	b2d2      	uxtb	r2, r2
100016d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100016d8:	68fb      	ldr	r3, [r7, #12]
100016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100016dc:	1c5a      	adds	r2, r3, #1
100016de:	68fb      	ldr	r3, [r7, #12]
100016e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
100016e2:	68fb      	ldr	r3, [r7, #12]
100016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
100016e6:	3b01      	subs	r3, #1
100016e8:	b29a      	uxth	r2, r3
100016ea:	68fb      	ldr	r3, [r7, #12]
100016ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
100016ee:	68fb      	ldr	r3, [r7, #12]
100016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
100016f2:	b29b      	uxth	r3, r3
100016f4:	3b01      	subs	r3, #1
100016f6:	b29a      	uxth	r2, r3
100016f8:	68fb      	ldr	r3, [r7, #12]
100016fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
100016fc:	68fb      	ldr	r3, [r7, #12]
100016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
10001700:	b29b      	uxth	r3, r3
10001702:	2b00      	cmp	r3, #0
10001704:	d034      	beq.n	10001770 <HAL_I2C_Mem_Read+0x1d0>
10001706:	68fb      	ldr	r3, [r7, #12]
10001708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000170a:	2b00      	cmp	r3, #0
1000170c:	d130      	bne.n	10001770 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
1000170e:	697b      	ldr	r3, [r7, #20]
10001710:	9300      	str	r3, [sp, #0]
10001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001714:	2200      	movs	r2, #0
10001716:	2180      	movs	r1, #128	; 0x80
10001718:	68f8      	ldr	r0, [r7, #12]
1000171a:	f000 fa2f 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
1000171e:	4603      	mov	r3, r0
10001720:	2b00      	cmp	r3, #0
10001722:	d001      	beq.n	10001728 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
10001724:	2301      	movs	r3, #1
10001726:	e04d      	b.n	100017c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
10001728:	68fb      	ldr	r3, [r7, #12]
1000172a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
1000172c:	b29b      	uxth	r3, r3
1000172e:	2bff      	cmp	r3, #255	; 0xff
10001730:	d90e      	bls.n	10001750 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
10001732:	68fb      	ldr	r3, [r7, #12]
10001734:	22ff      	movs	r2, #255	; 0xff
10001736:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
10001738:	68fb      	ldr	r3, [r7, #12]
1000173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000173c:	b2da      	uxtb	r2, r3
1000173e:	8979      	ldrh	r1, [r7, #10]
10001740:	2300      	movs	r3, #0
10001742:	9300      	str	r3, [sp, #0]
10001744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10001748:	68f8      	ldr	r0, [r7, #12]
1000174a:	f000 fb39 	bl	10001dc0 <I2C_TransferConfig>
1000174e:	e00f      	b.n	10001770 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
10001750:	68fb      	ldr	r3, [r7, #12]
10001752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
10001754:	b29a      	uxth	r2, r3
10001756:	68fb      	ldr	r3, [r7, #12]
10001758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
1000175a:	68fb      	ldr	r3, [r7, #12]
1000175c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000175e:	b2da      	uxtb	r2, r3
10001760:	8979      	ldrh	r1, [r7, #10]
10001762:	2300      	movs	r3, #0
10001764:	9300      	str	r3, [sp, #0]
10001766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
1000176a:	68f8      	ldr	r0, [r7, #12]
1000176c:	f000 fb28 	bl	10001dc0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
10001770:	68fb      	ldr	r3, [r7, #12]
10001772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
10001774:	b29b      	uxth	r3, r3
10001776:	2b00      	cmp	r3, #0
10001778:	d19a      	bne.n	100016b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
1000177a:	697a      	ldr	r2, [r7, #20]
1000177c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1000177e:	68f8      	ldr	r0, [r7, #12]
10001780:	f000 fa7c 	bl	10001c7c <I2C_WaitOnSTOPFlagUntilTimeout>
10001784:	4603      	mov	r3, r0
10001786:	2b00      	cmp	r3, #0
10001788:	d001      	beq.n	1000178e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
1000178a:	2301      	movs	r3, #1
1000178c:	e01a      	b.n	100017c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1000178e:	68fb      	ldr	r3, [r7, #12]
10001790:	681b      	ldr	r3, [r3, #0]
10001792:	2220      	movs	r2, #32
10001794:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
10001796:	68fb      	ldr	r3, [r7, #12]
10001798:	681b      	ldr	r3, [r3, #0]
1000179a:	6859      	ldr	r1, [r3, #4]
1000179c:	68fb      	ldr	r3, [r7, #12]
1000179e:	681a      	ldr	r2, [r3, #0]
100017a0:	4b0b      	ldr	r3, [pc, #44]	; (100017d0 <HAL_I2C_Mem_Read+0x230>)
100017a2:	400b      	ands	r3, r1
100017a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
100017a6:	68fb      	ldr	r3, [r7, #12]
100017a8:	2220      	movs	r2, #32
100017aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    hi2c->Mode  = HAL_I2C_MODE_NONE;
100017ae:	68fb      	ldr	r3, [r7, #12]
100017b0:	2200      	movs	r2, #0
100017b2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100017b6:	68fb      	ldr	r3, [r7, #12]
100017b8:	2200      	movs	r2, #0
100017ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
100017be:	2300      	movs	r3, #0
100017c0:	e000      	b.n	100017c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
100017c2:	2302      	movs	r3, #2
  }
}
100017c4:	4618      	mov	r0, r3
100017c6:	3718      	adds	r7, #24
100017c8:	46bd      	mov	sp, r7
100017ca:	bd80      	pop	{r7, pc}
100017cc:	80002400 	.word	0x80002400
100017d0:	fe00e800 	.word	0xfe00e800

100017d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
100017d4:	b580      	push	{r7, lr}
100017d6:	b08a      	sub	sp, #40	; 0x28
100017d8:	af02      	add	r7, sp, #8
100017da:	60f8      	str	r0, [r7, #12]
100017dc:	607a      	str	r2, [r7, #4]
100017de:	603b      	str	r3, [r7, #0]
100017e0:	460b      	mov	r3, r1
100017e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
100017e4:	2300      	movs	r3, #0
100017e6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
100017e8:	68fb      	ldr	r3, [r7, #12]
100017ea:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
100017ee:	b2db      	uxtb	r3, r3
100017f0:	2b20      	cmp	r3, #32
100017f2:	f040 80f1 	bne.w	100019d8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
100017f6:	68fb      	ldr	r3, [r7, #12]
100017f8:	681b      	ldr	r3, [r3, #0]
100017fa:	699b      	ldr	r3, [r3, #24]
100017fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
10001800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
10001804:	d101      	bne.n	1000180a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
10001806:	2302      	movs	r3, #2
10001808:	e0e7      	b.n	100019da <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
1000180a:	68fb      	ldr	r3, [r7, #12]
1000180c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
10001810:	2b01      	cmp	r3, #1
10001812:	d101      	bne.n	10001818 <HAL_I2C_IsDeviceReady+0x44>
10001814:	2302      	movs	r3, #2
10001816:	e0e0      	b.n	100019da <HAL_I2C_IsDeviceReady+0x206>
10001818:	68fb      	ldr	r3, [r7, #12]
1000181a:	2201      	movs	r2, #1
1000181c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    hi2c->State = HAL_I2C_STATE_BUSY;
10001820:	68fb      	ldr	r3, [r7, #12]
10001822:	2224      	movs	r2, #36	; 0x24
10001824:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10001828:	68fb      	ldr	r3, [r7, #12]
1000182a:	2200      	movs	r2, #0
1000182c:	64da      	str	r2, [r3, #76]	; 0x4c

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
1000182e:	68fb      	ldr	r3, [r7, #12]
10001830:	68db      	ldr	r3, [r3, #12]
10001832:	2b01      	cmp	r3, #1
10001834:	d107      	bne.n	10001846 <HAL_I2C_IsDeviceReady+0x72>
10001836:	897b      	ldrh	r3, [r7, #10]
10001838:	f3c3 0309 	ubfx	r3, r3, #0, #10
1000183c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
10001840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
10001844:	e004      	b.n	10001850 <HAL_I2C_IsDeviceReady+0x7c>
10001846:	897b      	ldrh	r3, [r7, #10]
10001848:	f3c3 0309 	ubfx	r3, r3, #0, #10
1000184c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
10001850:	68fa      	ldr	r2, [r7, #12]
10001852:	6812      	ldr	r2, [r2, #0]
10001854:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
10001856:	f7ff f9fb 	bl	10000c50 <HAL_GetTick>
1000185a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
1000185c:	68fb      	ldr	r3, [r7, #12]
1000185e:	681b      	ldr	r3, [r3, #0]
10001860:	699b      	ldr	r3, [r3, #24]
10001862:	f003 0320 	and.w	r3, r3, #32
10001866:	2b20      	cmp	r3, #32
10001868:	bf0c      	ite	eq
1000186a:	2301      	moveq	r3, #1
1000186c:	2300      	movne	r3, #0
1000186e:	b2db      	uxtb	r3, r3
10001870:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
10001872:	68fb      	ldr	r3, [r7, #12]
10001874:	681b      	ldr	r3, [r3, #0]
10001876:	699b      	ldr	r3, [r3, #24]
10001878:	f003 0310 	and.w	r3, r3, #16
1000187c:	2b10      	cmp	r3, #16
1000187e:	bf0c      	ite	eq
10001880:	2301      	moveq	r3, #1
10001882:	2300      	movne	r3, #0
10001884:	b2db      	uxtb	r3, r3
10001886:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
10001888:	e034      	b.n	100018f4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
1000188a:	683b      	ldr	r3, [r7, #0]
1000188c:	f1b3 3fff 	cmp.w	r3, #4294967295
10001890:	d01a      	beq.n	100018c8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
10001892:	f7ff f9dd 	bl	10000c50 <HAL_GetTick>
10001896:	4602      	mov	r2, r0
10001898:	69bb      	ldr	r3, [r7, #24]
1000189a:	1ad3      	subs	r3, r2, r3
1000189c:	683a      	ldr	r2, [r7, #0]
1000189e:	429a      	cmp	r2, r3
100018a0:	d302      	bcc.n	100018a8 <HAL_I2C_IsDeviceReady+0xd4>
100018a2:	683b      	ldr	r3, [r7, #0]
100018a4:	2b00      	cmp	r3, #0
100018a6:	d10f      	bne.n	100018c8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
100018a8:	68fb      	ldr	r3, [r7, #12]
100018aa:	2220      	movs	r2, #32
100018ac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
100018b0:	68fb      	ldr	r3, [r7, #12]
100018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100018b4:	f043 0220 	orr.w	r2, r3, #32
100018b8:	68fb      	ldr	r3, [r7, #12]
100018ba:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
100018bc:	68fb      	ldr	r3, [r7, #12]
100018be:	2200      	movs	r2, #0
100018c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

            return HAL_ERROR;
100018c4:	2301      	movs	r3, #1
100018c6:	e088      	b.n	100019da <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
100018c8:	68fb      	ldr	r3, [r7, #12]
100018ca:	681b      	ldr	r3, [r3, #0]
100018cc:	699b      	ldr	r3, [r3, #24]
100018ce:	f003 0320 	and.w	r3, r3, #32
100018d2:	2b20      	cmp	r3, #32
100018d4:	bf0c      	ite	eq
100018d6:	2301      	moveq	r3, #1
100018d8:	2300      	movne	r3, #0
100018da:	b2db      	uxtb	r3, r3
100018dc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
100018de:	68fb      	ldr	r3, [r7, #12]
100018e0:	681b      	ldr	r3, [r3, #0]
100018e2:	699b      	ldr	r3, [r3, #24]
100018e4:	f003 0310 	and.w	r3, r3, #16
100018e8:	2b10      	cmp	r3, #16
100018ea:	bf0c      	ite	eq
100018ec:	2301      	moveq	r3, #1
100018ee:	2300      	movne	r3, #0
100018f0:	b2db      	uxtb	r3, r3
100018f2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
100018f4:	7ffb      	ldrb	r3, [r7, #31]
100018f6:	2b00      	cmp	r3, #0
100018f8:	d102      	bne.n	10001900 <HAL_I2C_IsDeviceReady+0x12c>
100018fa:	7fbb      	ldrb	r3, [r7, #30]
100018fc:	2b00      	cmp	r3, #0
100018fe:	d0c4      	beq.n	1000188a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
10001900:	68fb      	ldr	r3, [r7, #12]
10001902:	681b      	ldr	r3, [r3, #0]
10001904:	699b      	ldr	r3, [r3, #24]
10001906:	f003 0310 	and.w	r3, r3, #16
1000190a:	2b10      	cmp	r3, #16
1000190c:	d01a      	beq.n	10001944 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
1000190e:	69bb      	ldr	r3, [r7, #24]
10001910:	9300      	str	r3, [sp, #0]
10001912:	683b      	ldr	r3, [r7, #0]
10001914:	2200      	movs	r2, #0
10001916:	2120      	movs	r1, #32
10001918:	68f8      	ldr	r0, [r7, #12]
1000191a:	f000 f92f 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
1000191e:	4603      	mov	r3, r0
10001920:	2b00      	cmp	r3, #0
10001922:	d001      	beq.n	10001928 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
10001924:	2301      	movs	r3, #1
10001926:	e058      	b.n	100019da <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10001928:	68fb      	ldr	r3, [r7, #12]
1000192a:	681b      	ldr	r3, [r3, #0]
1000192c:	2220      	movs	r2, #32
1000192e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
10001930:	68fb      	ldr	r3, [r7, #12]
10001932:	2220      	movs	r2, #32
10001934:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
10001938:	68fb      	ldr	r3, [r7, #12]
1000193a:	2200      	movs	r2, #0
1000193c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_OK;
10001940:	2300      	movs	r3, #0
10001942:	e04a      	b.n	100019da <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
10001944:	69bb      	ldr	r3, [r7, #24]
10001946:	9300      	str	r3, [sp, #0]
10001948:	683b      	ldr	r3, [r7, #0]
1000194a:	2200      	movs	r2, #0
1000194c:	2120      	movs	r1, #32
1000194e:	68f8      	ldr	r0, [r7, #12]
10001950:	f000 f914 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
10001954:	4603      	mov	r3, r0
10001956:	2b00      	cmp	r3, #0
10001958:	d001      	beq.n	1000195e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
1000195a:	2301      	movs	r3, #1
1000195c:	e03d      	b.n	100019da <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1000195e:	68fb      	ldr	r3, [r7, #12]
10001960:	681b      	ldr	r3, [r3, #0]
10001962:	2210      	movs	r2, #16
10001964:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10001966:	68fb      	ldr	r3, [r7, #12]
10001968:	681b      	ldr	r3, [r3, #0]
1000196a:	2220      	movs	r2, #32
1000196c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
1000196e:	697b      	ldr	r3, [r7, #20]
10001970:	687a      	ldr	r2, [r7, #4]
10001972:	429a      	cmp	r2, r3
10001974:	d118      	bne.n	100019a8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
10001976:	68fb      	ldr	r3, [r7, #12]
10001978:	681b      	ldr	r3, [r3, #0]
1000197a:	685a      	ldr	r2, [r3, #4]
1000197c:	68fb      	ldr	r3, [r7, #12]
1000197e:	681b      	ldr	r3, [r3, #0]
10001980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
10001984:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
10001986:	69bb      	ldr	r3, [r7, #24]
10001988:	9300      	str	r3, [sp, #0]
1000198a:	683b      	ldr	r3, [r7, #0]
1000198c:	2200      	movs	r2, #0
1000198e:	2120      	movs	r1, #32
10001990:	68f8      	ldr	r0, [r7, #12]
10001992:	f000 f8f3 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
10001996:	4603      	mov	r3, r0
10001998:	2b00      	cmp	r3, #0
1000199a:	d001      	beq.n	100019a0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
1000199c:	2301      	movs	r3, #1
1000199e:	e01c      	b.n	100019da <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100019a0:	68fb      	ldr	r3, [r7, #12]
100019a2:	681b      	ldr	r3, [r3, #0]
100019a4:	2220      	movs	r2, #32
100019a6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
100019a8:	697b      	ldr	r3, [r7, #20]
100019aa:	3301      	adds	r3, #1
100019ac:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
100019ae:	697b      	ldr	r3, [r7, #20]
100019b0:	687a      	ldr	r2, [r7, #4]
100019b2:	429a      	cmp	r2, r3
100019b4:	f63f af3b 	bhi.w	1000182e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
100019b8:	68fb      	ldr	r3, [r7, #12]
100019ba:	2220      	movs	r2, #32
100019bc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
100019c0:	68fb      	ldr	r3, [r7, #12]
100019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100019c4:	f043 0220 	orr.w	r2, r3, #32
100019c8:	68fb      	ldr	r3, [r7, #12]
100019ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100019cc:	68fb      	ldr	r3, [r7, #12]
100019ce:	2200      	movs	r2, #0
100019d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_ERROR;
100019d4:	2301      	movs	r3, #1
100019d6:	e000      	b.n	100019da <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
100019d8:	2302      	movs	r3, #2
  }
}
100019da:	4618      	mov	r0, r3
100019dc:	3720      	adds	r7, #32
100019de:	46bd      	mov	sp, r7
100019e0:	bd80      	pop	{r7, pc}
	...

100019e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
100019e4:	b580      	push	{r7, lr}
100019e6:	b086      	sub	sp, #24
100019e8:	af02      	add	r7, sp, #8
100019ea:	60f8      	str	r0, [r7, #12]
100019ec:	4608      	mov	r0, r1
100019ee:	4611      	mov	r1, r2
100019f0:	461a      	mov	r2, r3
100019f2:	4603      	mov	r3, r0
100019f4:	817b      	strh	r3, [r7, #10]
100019f6:	460b      	mov	r3, r1
100019f8:	813b      	strh	r3, [r7, #8]
100019fa:	4613      	mov	r3, r2
100019fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
100019fe:	88fb      	ldrh	r3, [r7, #6]
10001a00:	b2da      	uxtb	r2, r3
10001a02:	8979      	ldrh	r1, [r7, #10]
10001a04:	4b20      	ldr	r3, [pc, #128]	; (10001a88 <I2C_RequestMemoryWrite+0xa4>)
10001a06:	9300      	str	r3, [sp, #0]
10001a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10001a0c:	68f8      	ldr	r0, [r7, #12]
10001a0e:	f000 f9d7 	bl	10001dc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10001a12:	69fa      	ldr	r2, [r7, #28]
10001a14:	69b9      	ldr	r1, [r7, #24]
10001a16:	68f8      	ldr	r0, [r7, #12]
10001a18:	f000 f8f0 	bl	10001bfc <I2C_WaitOnTXISFlagUntilTimeout>
10001a1c:	4603      	mov	r3, r0
10001a1e:	2b00      	cmp	r3, #0
10001a20:	d001      	beq.n	10001a26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
10001a22:	2301      	movs	r3, #1
10001a24:	e02c      	b.n	10001a80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10001a26:	88fb      	ldrh	r3, [r7, #6]
10001a28:	2b01      	cmp	r3, #1
10001a2a:	d105      	bne.n	10001a38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10001a2c:	893b      	ldrh	r3, [r7, #8]
10001a2e:	b2da      	uxtb	r2, r3
10001a30:	68fb      	ldr	r3, [r7, #12]
10001a32:	681b      	ldr	r3, [r3, #0]
10001a34:	629a      	str	r2, [r3, #40]	; 0x28
10001a36:	e015      	b.n	10001a64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10001a38:	893b      	ldrh	r3, [r7, #8]
10001a3a:	0a1b      	lsrs	r3, r3, #8
10001a3c:	b29b      	uxth	r3, r3
10001a3e:	b2da      	uxtb	r2, r3
10001a40:	68fb      	ldr	r3, [r7, #12]
10001a42:	681b      	ldr	r3, [r3, #0]
10001a44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10001a46:	69fa      	ldr	r2, [r7, #28]
10001a48:	69b9      	ldr	r1, [r7, #24]
10001a4a:	68f8      	ldr	r0, [r7, #12]
10001a4c:	f000 f8d6 	bl	10001bfc <I2C_WaitOnTXISFlagUntilTimeout>
10001a50:	4603      	mov	r3, r0
10001a52:	2b00      	cmp	r3, #0
10001a54:	d001      	beq.n	10001a5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
10001a56:	2301      	movs	r3, #1
10001a58:	e012      	b.n	10001a80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10001a5a:	893b      	ldrh	r3, [r7, #8]
10001a5c:	b2da      	uxtb	r2, r3
10001a5e:	68fb      	ldr	r3, [r7, #12]
10001a60:	681b      	ldr	r3, [r3, #0]
10001a62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
10001a64:	69fb      	ldr	r3, [r7, #28]
10001a66:	9300      	str	r3, [sp, #0]
10001a68:	69bb      	ldr	r3, [r7, #24]
10001a6a:	2200      	movs	r2, #0
10001a6c:	2180      	movs	r1, #128	; 0x80
10001a6e:	68f8      	ldr	r0, [r7, #12]
10001a70:	f000 f884 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
10001a74:	4603      	mov	r3, r0
10001a76:	2b00      	cmp	r3, #0
10001a78:	d001      	beq.n	10001a7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
10001a7a:	2301      	movs	r3, #1
10001a7c:	e000      	b.n	10001a80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
10001a7e:	2300      	movs	r3, #0
}
10001a80:	4618      	mov	r0, r3
10001a82:	3710      	adds	r7, #16
10001a84:	46bd      	mov	sp, r7
10001a86:	bd80      	pop	{r7, pc}
10001a88:	80002000 	.word	0x80002000

10001a8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
10001a8c:	b580      	push	{r7, lr}
10001a8e:	b086      	sub	sp, #24
10001a90:	af02      	add	r7, sp, #8
10001a92:	60f8      	str	r0, [r7, #12]
10001a94:	4608      	mov	r0, r1
10001a96:	4611      	mov	r1, r2
10001a98:	461a      	mov	r2, r3
10001a9a:	4603      	mov	r3, r0
10001a9c:	817b      	strh	r3, [r7, #10]
10001a9e:	460b      	mov	r3, r1
10001aa0:	813b      	strh	r3, [r7, #8]
10001aa2:	4613      	mov	r3, r2
10001aa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
10001aa6:	88fb      	ldrh	r3, [r7, #6]
10001aa8:	b2da      	uxtb	r2, r3
10001aaa:	8979      	ldrh	r1, [r7, #10]
10001aac:	4b20      	ldr	r3, [pc, #128]	; (10001b30 <I2C_RequestMemoryRead+0xa4>)
10001aae:	9300      	str	r3, [sp, #0]
10001ab0:	2300      	movs	r3, #0
10001ab2:	68f8      	ldr	r0, [r7, #12]
10001ab4:	f000 f984 	bl	10001dc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10001ab8:	69fa      	ldr	r2, [r7, #28]
10001aba:	69b9      	ldr	r1, [r7, #24]
10001abc:	68f8      	ldr	r0, [r7, #12]
10001abe:	f000 f89d 	bl	10001bfc <I2C_WaitOnTXISFlagUntilTimeout>
10001ac2:	4603      	mov	r3, r0
10001ac4:	2b00      	cmp	r3, #0
10001ac6:	d001      	beq.n	10001acc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
10001ac8:	2301      	movs	r3, #1
10001aca:	e02c      	b.n	10001b26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10001acc:	88fb      	ldrh	r3, [r7, #6]
10001ace:	2b01      	cmp	r3, #1
10001ad0:	d105      	bne.n	10001ade <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10001ad2:	893b      	ldrh	r3, [r7, #8]
10001ad4:	b2da      	uxtb	r2, r3
10001ad6:	68fb      	ldr	r3, [r7, #12]
10001ad8:	681b      	ldr	r3, [r3, #0]
10001ada:	629a      	str	r2, [r3, #40]	; 0x28
10001adc:	e015      	b.n	10001b0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10001ade:	893b      	ldrh	r3, [r7, #8]
10001ae0:	0a1b      	lsrs	r3, r3, #8
10001ae2:	b29b      	uxth	r3, r3
10001ae4:	b2da      	uxtb	r2, r3
10001ae6:	68fb      	ldr	r3, [r7, #12]
10001ae8:	681b      	ldr	r3, [r3, #0]
10001aea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10001aec:	69fa      	ldr	r2, [r7, #28]
10001aee:	69b9      	ldr	r1, [r7, #24]
10001af0:	68f8      	ldr	r0, [r7, #12]
10001af2:	f000 f883 	bl	10001bfc <I2C_WaitOnTXISFlagUntilTimeout>
10001af6:	4603      	mov	r3, r0
10001af8:	2b00      	cmp	r3, #0
10001afa:	d001      	beq.n	10001b00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
10001afc:	2301      	movs	r3, #1
10001afe:	e012      	b.n	10001b26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10001b00:	893b      	ldrh	r3, [r7, #8]
10001b02:	b2da      	uxtb	r2, r3
10001b04:	68fb      	ldr	r3, [r7, #12]
10001b06:	681b      	ldr	r3, [r3, #0]
10001b08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
10001b0a:	69fb      	ldr	r3, [r7, #28]
10001b0c:	9300      	str	r3, [sp, #0]
10001b0e:	69bb      	ldr	r3, [r7, #24]
10001b10:	2200      	movs	r2, #0
10001b12:	2140      	movs	r1, #64	; 0x40
10001b14:	68f8      	ldr	r0, [r7, #12]
10001b16:	f000 f831 	bl	10001b7c <I2C_WaitOnFlagUntilTimeout>
10001b1a:	4603      	mov	r3, r0
10001b1c:	2b00      	cmp	r3, #0
10001b1e:	d001      	beq.n	10001b24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
10001b20:	2301      	movs	r3, #1
10001b22:	e000      	b.n	10001b26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
10001b24:	2300      	movs	r3, #0
}
10001b26:	4618      	mov	r0, r3
10001b28:	3710      	adds	r7, #16
10001b2a:	46bd      	mov	sp, r7
10001b2c:	bd80      	pop	{r7, pc}
10001b2e:	bf00      	nop
10001b30:	80002000 	.word	0x80002000

10001b34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
10001b34:	b480      	push	{r7}
10001b36:	b083      	sub	sp, #12
10001b38:	af00      	add	r7, sp, #0
10001b3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
10001b3c:	687b      	ldr	r3, [r7, #4]
10001b3e:	681b      	ldr	r3, [r3, #0]
10001b40:	699b      	ldr	r3, [r3, #24]
10001b42:	f003 0302 	and.w	r3, r3, #2
10001b46:	2b02      	cmp	r3, #2
10001b48:	d103      	bne.n	10001b52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
10001b4a:	687b      	ldr	r3, [r7, #4]
10001b4c:	681b      	ldr	r3, [r3, #0]
10001b4e:	2200      	movs	r2, #0
10001b50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
10001b52:	687b      	ldr	r3, [r7, #4]
10001b54:	681b      	ldr	r3, [r3, #0]
10001b56:	699b      	ldr	r3, [r3, #24]
10001b58:	f003 0301 	and.w	r3, r3, #1
10001b5c:	2b01      	cmp	r3, #1
10001b5e:	d007      	beq.n	10001b70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
10001b60:	687b      	ldr	r3, [r7, #4]
10001b62:	681b      	ldr	r3, [r3, #0]
10001b64:	699a      	ldr	r2, [r3, #24]
10001b66:	687b      	ldr	r3, [r7, #4]
10001b68:	681b      	ldr	r3, [r3, #0]
10001b6a:	f042 0201 	orr.w	r2, r2, #1
10001b6e:	619a      	str	r2, [r3, #24]
  }
}
10001b70:	bf00      	nop
10001b72:	370c      	adds	r7, #12
10001b74:	46bd      	mov	sp, r7
10001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b7a:	4770      	bx	lr

10001b7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
10001b7c:	b580      	push	{r7, lr}
10001b7e:	b084      	sub	sp, #16
10001b80:	af00      	add	r7, sp, #0
10001b82:	60f8      	str	r0, [r7, #12]
10001b84:	60b9      	str	r1, [r7, #8]
10001b86:	603b      	str	r3, [r7, #0]
10001b88:	4613      	mov	r3, r2
10001b8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10001b8c:	e022      	b.n	10001bd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10001b8e:	683b      	ldr	r3, [r7, #0]
10001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
10001b94:	d01e      	beq.n	10001bd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10001b96:	f7ff f85b 	bl	10000c50 <HAL_GetTick>
10001b9a:	4602      	mov	r2, r0
10001b9c:	69bb      	ldr	r3, [r7, #24]
10001b9e:	1ad3      	subs	r3, r2, r3
10001ba0:	683a      	ldr	r2, [r7, #0]
10001ba2:	429a      	cmp	r2, r3
10001ba4:	d302      	bcc.n	10001bac <I2C_WaitOnFlagUntilTimeout+0x30>
10001ba6:	683b      	ldr	r3, [r7, #0]
10001ba8:	2b00      	cmp	r3, #0
10001baa:	d113      	bne.n	10001bd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10001bac:	68fb      	ldr	r3, [r7, #12]
10001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10001bb0:	f043 0220 	orr.w	r2, r3, #32
10001bb4:	68fb      	ldr	r3, [r7, #12]
10001bb6:	64da      	str	r2, [r3, #76]	; 0x4c
        hi2c->State = HAL_I2C_STATE_READY;
10001bb8:	68fb      	ldr	r3, [r7, #12]
10001bba:	2220      	movs	r2, #32
10001bbc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        hi2c->Mode = HAL_I2C_MODE_NONE;
10001bc0:	68fb      	ldr	r3, [r7, #12]
10001bc2:	2200      	movs	r2, #0
10001bc4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
10001bc8:	68fb      	ldr	r3, [r7, #12]
10001bca:	2200      	movs	r2, #0
10001bcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        return HAL_ERROR;
10001bd0:	2301      	movs	r3, #1
10001bd2:	e00f      	b.n	10001bf4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10001bd4:	68fb      	ldr	r3, [r7, #12]
10001bd6:	681b      	ldr	r3, [r3, #0]
10001bd8:	699a      	ldr	r2, [r3, #24]
10001bda:	68bb      	ldr	r3, [r7, #8]
10001bdc:	4013      	ands	r3, r2
10001bde:	68ba      	ldr	r2, [r7, #8]
10001be0:	429a      	cmp	r2, r3
10001be2:	bf0c      	ite	eq
10001be4:	2301      	moveq	r3, #1
10001be6:	2300      	movne	r3, #0
10001be8:	b2db      	uxtb	r3, r3
10001bea:	461a      	mov	r2, r3
10001bec:	79fb      	ldrb	r3, [r7, #7]
10001bee:	429a      	cmp	r2, r3
10001bf0:	d0cd      	beq.n	10001b8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
10001bf2:	2300      	movs	r3, #0
}
10001bf4:	4618      	mov	r0, r3
10001bf6:	3710      	adds	r7, #16
10001bf8:	46bd      	mov	sp, r7
10001bfa:	bd80      	pop	{r7, pc}

10001bfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
10001bfc:	b580      	push	{r7, lr}
10001bfe:	b084      	sub	sp, #16
10001c00:	af00      	add	r7, sp, #0
10001c02:	60f8      	str	r0, [r7, #12]
10001c04:	60b9      	str	r1, [r7, #8]
10001c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10001c08:	e02c      	b.n	10001c64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
10001c0a:	687a      	ldr	r2, [r7, #4]
10001c0c:	68b9      	ldr	r1, [r7, #8]
10001c0e:	68f8      	ldr	r0, [r7, #12]
10001c10:	f000 f870 	bl	10001cf4 <I2C_IsAcknowledgeFailed>
10001c14:	4603      	mov	r3, r0
10001c16:	2b00      	cmp	r3, #0
10001c18:	d001      	beq.n	10001c1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
10001c1a:	2301      	movs	r3, #1
10001c1c:	e02a      	b.n	10001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10001c1e:	68bb      	ldr	r3, [r7, #8]
10001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
10001c24:	d01e      	beq.n	10001c64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10001c26:	f7ff f813 	bl	10000c50 <HAL_GetTick>
10001c2a:	4602      	mov	r2, r0
10001c2c:	687b      	ldr	r3, [r7, #4]
10001c2e:	1ad3      	subs	r3, r2, r3
10001c30:	68ba      	ldr	r2, [r7, #8]
10001c32:	429a      	cmp	r2, r3
10001c34:	d302      	bcc.n	10001c3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
10001c36:	68bb      	ldr	r3, [r7, #8]
10001c38:	2b00      	cmp	r3, #0
10001c3a:	d113      	bne.n	10001c64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10001c3c:	68fb      	ldr	r3, [r7, #12]
10001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10001c40:	f043 0220 	orr.w	r2, r3, #32
10001c44:	68fb      	ldr	r3, [r7, #12]
10001c46:	64da      	str	r2, [r3, #76]	; 0x4c
        hi2c->State = HAL_I2C_STATE_READY;
10001c48:	68fb      	ldr	r3, [r7, #12]
10001c4a:	2220      	movs	r2, #32
10001c4c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        hi2c->Mode = HAL_I2C_MODE_NONE;
10001c50:	68fb      	ldr	r3, [r7, #12]
10001c52:	2200      	movs	r2, #0
10001c54:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
10001c58:	68fb      	ldr	r3, [r7, #12]
10001c5a:	2200      	movs	r2, #0
10001c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
10001c60:	2301      	movs	r3, #1
10001c62:	e007      	b.n	10001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10001c64:	68fb      	ldr	r3, [r7, #12]
10001c66:	681b      	ldr	r3, [r3, #0]
10001c68:	699b      	ldr	r3, [r3, #24]
10001c6a:	f003 0302 	and.w	r3, r3, #2
10001c6e:	2b02      	cmp	r3, #2
10001c70:	d1cb      	bne.n	10001c0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
10001c72:	2300      	movs	r3, #0
}
10001c74:	4618      	mov	r0, r3
10001c76:	3710      	adds	r7, #16
10001c78:	46bd      	mov	sp, r7
10001c7a:	bd80      	pop	{r7, pc}

10001c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
10001c7c:	b580      	push	{r7, lr}
10001c7e:	b084      	sub	sp, #16
10001c80:	af00      	add	r7, sp, #0
10001c82:	60f8      	str	r0, [r7, #12]
10001c84:	60b9      	str	r1, [r7, #8]
10001c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10001c88:	e028      	b.n	10001cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
10001c8a:	687a      	ldr	r2, [r7, #4]
10001c8c:	68b9      	ldr	r1, [r7, #8]
10001c8e:	68f8      	ldr	r0, [r7, #12]
10001c90:	f000 f830 	bl	10001cf4 <I2C_IsAcknowledgeFailed>
10001c94:	4603      	mov	r3, r0
10001c96:	2b00      	cmp	r3, #0
10001c98:	d001      	beq.n	10001c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
10001c9a:	2301      	movs	r3, #1
10001c9c:	e026      	b.n	10001cec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10001c9e:	f7fe ffd7 	bl	10000c50 <HAL_GetTick>
10001ca2:	4602      	mov	r2, r0
10001ca4:	687b      	ldr	r3, [r7, #4]
10001ca6:	1ad3      	subs	r3, r2, r3
10001ca8:	68ba      	ldr	r2, [r7, #8]
10001caa:	429a      	cmp	r2, r3
10001cac:	d302      	bcc.n	10001cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
10001cae:	68bb      	ldr	r3, [r7, #8]
10001cb0:	2b00      	cmp	r3, #0
10001cb2:	d113      	bne.n	10001cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10001cb4:	68fb      	ldr	r3, [r7, #12]
10001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10001cb8:	f043 0220 	orr.w	r2, r3, #32
10001cbc:	68fb      	ldr	r3, [r7, #12]
10001cbe:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->State = HAL_I2C_STATE_READY;
10001cc0:	68fb      	ldr	r3, [r7, #12]
10001cc2:	2220      	movs	r2, #32
10001cc4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
      hi2c->Mode = HAL_I2C_MODE_NONE;
10001cc8:	68fb      	ldr	r3, [r7, #12]
10001cca:	2200      	movs	r2, #0
10001ccc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10001cd0:	68fb      	ldr	r3, [r7, #12]
10001cd2:	2200      	movs	r2, #0
10001cd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

      return HAL_ERROR;
10001cd8:	2301      	movs	r3, #1
10001cda:	e007      	b.n	10001cec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10001cdc:	68fb      	ldr	r3, [r7, #12]
10001cde:	681b      	ldr	r3, [r3, #0]
10001ce0:	699b      	ldr	r3, [r3, #24]
10001ce2:	f003 0320 	and.w	r3, r3, #32
10001ce6:	2b20      	cmp	r3, #32
10001ce8:	d1cf      	bne.n	10001c8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
10001cea:	2300      	movs	r3, #0
}
10001cec:	4618      	mov	r0, r3
10001cee:	3710      	adds	r7, #16
10001cf0:	46bd      	mov	sp, r7
10001cf2:	bd80      	pop	{r7, pc}

10001cf4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
10001cf4:	b580      	push	{r7, lr}
10001cf6:	b084      	sub	sp, #16
10001cf8:	af00      	add	r7, sp, #0
10001cfa:	60f8      	str	r0, [r7, #12]
10001cfc:	60b9      	str	r1, [r7, #8]
10001cfe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
10001d00:	68fb      	ldr	r3, [r7, #12]
10001d02:	681b      	ldr	r3, [r3, #0]
10001d04:	699b      	ldr	r3, [r3, #24]
10001d06:	f003 0310 	and.w	r3, r3, #16
10001d0a:	2b10      	cmp	r3, #16
10001d0c:	d151      	bne.n	10001db2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10001d0e:	e022      	b.n	10001d56 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
10001d10:	68bb      	ldr	r3, [r7, #8]
10001d12:	f1b3 3fff 	cmp.w	r3, #4294967295
10001d16:	d01e      	beq.n	10001d56 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10001d18:	f7fe ff9a 	bl	10000c50 <HAL_GetTick>
10001d1c:	4602      	mov	r2, r0
10001d1e:	687b      	ldr	r3, [r7, #4]
10001d20:	1ad3      	subs	r3, r2, r3
10001d22:	68ba      	ldr	r2, [r7, #8]
10001d24:	429a      	cmp	r2, r3
10001d26:	d302      	bcc.n	10001d2e <I2C_IsAcknowledgeFailed+0x3a>
10001d28:	68bb      	ldr	r3, [r7, #8]
10001d2a:	2b00      	cmp	r3, #0
10001d2c:	d113      	bne.n	10001d56 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10001d2e:	68fb      	ldr	r3, [r7, #12]
10001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10001d32:	f043 0220 	orr.w	r2, r3, #32
10001d36:	68fb      	ldr	r3, [r7, #12]
10001d38:	64da      	str	r2, [r3, #76]	; 0x4c
          hi2c->State = HAL_I2C_STATE_READY;
10001d3a:	68fb      	ldr	r3, [r7, #12]
10001d3c:	2220      	movs	r2, #32
10001d3e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          hi2c->Mode = HAL_I2C_MODE_NONE;
10001d42:	68fb      	ldr	r3, [r7, #12]
10001d44:	2200      	movs	r2, #0
10001d46:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10001d4a:	68fb      	ldr	r3, [r7, #12]
10001d4c:	2200      	movs	r2, #0
10001d4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
10001d52:	2301      	movs	r3, #1
10001d54:	e02e      	b.n	10001db4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10001d56:	68fb      	ldr	r3, [r7, #12]
10001d58:	681b      	ldr	r3, [r3, #0]
10001d5a:	699b      	ldr	r3, [r3, #24]
10001d5c:	f003 0320 	and.w	r3, r3, #32
10001d60:	2b20      	cmp	r3, #32
10001d62:	d1d5      	bne.n	10001d10 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10001d64:	68fb      	ldr	r3, [r7, #12]
10001d66:	681b      	ldr	r3, [r3, #0]
10001d68:	2210      	movs	r2, #16
10001d6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10001d6c:	68fb      	ldr	r3, [r7, #12]
10001d6e:	681b      	ldr	r3, [r3, #0]
10001d70:	2220      	movs	r2, #32
10001d72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10001d74:	68f8      	ldr	r0, [r7, #12]
10001d76:	f7ff fedd 	bl	10001b34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
10001d7a:	68fb      	ldr	r3, [r7, #12]
10001d7c:	681b      	ldr	r3, [r3, #0]
10001d7e:	6859      	ldr	r1, [r3, #4]
10001d80:	68fb      	ldr	r3, [r7, #12]
10001d82:	681a      	ldr	r2, [r3, #0]
10001d84:	4b0d      	ldr	r3, [pc, #52]	; (10001dbc <I2C_IsAcknowledgeFailed+0xc8>)
10001d86:	400b      	ands	r3, r1
10001d88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10001d8a:	68fb      	ldr	r3, [r7, #12]
10001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10001d8e:	f043 0204 	orr.w	r2, r3, #4
10001d92:	68fb      	ldr	r3, [r7, #12]
10001d94:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->State = HAL_I2C_STATE_READY;
10001d96:	68fb      	ldr	r3, [r7, #12]
10001d98:	2220      	movs	r2, #32
10001d9a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    hi2c->Mode = HAL_I2C_MODE_NONE;
10001d9e:	68fb      	ldr	r3, [r7, #12]
10001da0:	2200      	movs	r2, #0
10001da2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10001da6:	68fb      	ldr	r3, [r7, #12]
10001da8:	2200      	movs	r2, #0
10001daa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_ERROR;
10001dae:	2301      	movs	r3, #1
10001db0:	e000      	b.n	10001db4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
10001db2:	2300      	movs	r3, #0
}
10001db4:	4618      	mov	r0, r3
10001db6:	3710      	adds	r7, #16
10001db8:	46bd      	mov	sp, r7
10001dba:	bd80      	pop	{r7, pc}
10001dbc:	fe00e800 	.word	0xfe00e800

10001dc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
10001dc0:	b480      	push	{r7}
10001dc2:	b085      	sub	sp, #20
10001dc4:	af00      	add	r7, sp, #0
10001dc6:	60f8      	str	r0, [r7, #12]
10001dc8:	607b      	str	r3, [r7, #4]
10001dca:	460b      	mov	r3, r1
10001dcc:	817b      	strh	r3, [r7, #10]
10001dce:	4613      	mov	r3, r2
10001dd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
10001dd2:	68fb      	ldr	r3, [r7, #12]
10001dd4:	681b      	ldr	r3, [r3, #0]
10001dd6:	685a      	ldr	r2, [r3, #4]
10001dd8:	69bb      	ldr	r3, [r7, #24]
10001dda:	0d5b      	lsrs	r3, r3, #21
10001ddc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
10001de0:	4b0d      	ldr	r3, [pc, #52]	; (10001e18 <I2C_TransferConfig+0x58>)
10001de2:	430b      	orrs	r3, r1
10001de4:	43db      	mvns	r3, r3
10001de6:	ea02 0103 	and.w	r1, r2, r3
10001dea:	897b      	ldrh	r3, [r7, #10]
10001dec:	f3c3 0209 	ubfx	r2, r3, #0, #10
10001df0:	7a7b      	ldrb	r3, [r7, #9]
10001df2:	041b      	lsls	r3, r3, #16
10001df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
10001df8:	431a      	orrs	r2, r3
10001dfa:	687b      	ldr	r3, [r7, #4]
10001dfc:	431a      	orrs	r2, r3
10001dfe:	69bb      	ldr	r3, [r7, #24]
10001e00:	431a      	orrs	r2, r3
10001e02:	68fb      	ldr	r3, [r7, #12]
10001e04:	681b      	ldr	r3, [r3, #0]
10001e06:	430a      	orrs	r2, r1
10001e08:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
10001e0a:	bf00      	nop
10001e0c:	3714      	adds	r7, #20
10001e0e:	46bd      	mov	sp, r7
10001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e14:	4770      	bx	lr
10001e16:	bf00      	nop
10001e18:	03ff63ff 	.word	0x03ff63ff

10001e1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
10001e1c:	b480      	push	{r7}
10001e1e:	b083      	sub	sp, #12
10001e20:	af00      	add	r7, sp, #0
10001e22:	6078      	str	r0, [r7, #4]
10001e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10001e26:	687b      	ldr	r3, [r7, #4]
10001e28:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
10001e2c:	b2db      	uxtb	r3, r3
10001e2e:	2b20      	cmp	r3, #32
10001e30:	d138      	bne.n	10001ea4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10001e32:	687b      	ldr	r3, [r7, #4]
10001e34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
10001e38:	2b01      	cmp	r3, #1
10001e3a:	d101      	bne.n	10001e40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
10001e3c:	2302      	movs	r3, #2
10001e3e:	e032      	b.n	10001ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
10001e40:	687b      	ldr	r3, [r7, #4]
10001e42:	2201      	movs	r2, #1
10001e44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    hi2c->State = HAL_I2C_STATE_BUSY;
10001e48:	687b      	ldr	r3, [r7, #4]
10001e4a:	2224      	movs	r2, #36	; 0x24
10001e4c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10001e50:	687b      	ldr	r3, [r7, #4]
10001e52:	681b      	ldr	r3, [r3, #0]
10001e54:	681a      	ldr	r2, [r3, #0]
10001e56:	687b      	ldr	r3, [r7, #4]
10001e58:	681b      	ldr	r3, [r3, #0]
10001e5a:	f022 0201 	bic.w	r2, r2, #1
10001e5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
10001e60:	687b      	ldr	r3, [r7, #4]
10001e62:	681b      	ldr	r3, [r3, #0]
10001e64:	681a      	ldr	r2, [r3, #0]
10001e66:	687b      	ldr	r3, [r7, #4]
10001e68:	681b      	ldr	r3, [r3, #0]
10001e6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
10001e6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
10001e70:	687b      	ldr	r3, [r7, #4]
10001e72:	681b      	ldr	r3, [r3, #0]
10001e74:	6819      	ldr	r1, [r3, #0]
10001e76:	687b      	ldr	r3, [r7, #4]
10001e78:	681b      	ldr	r3, [r3, #0]
10001e7a:	683a      	ldr	r2, [r7, #0]
10001e7c:	430a      	orrs	r2, r1
10001e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10001e80:	687b      	ldr	r3, [r7, #4]
10001e82:	681b      	ldr	r3, [r3, #0]
10001e84:	681a      	ldr	r2, [r3, #0]
10001e86:	687b      	ldr	r3, [r7, #4]
10001e88:	681b      	ldr	r3, [r3, #0]
10001e8a:	f042 0201 	orr.w	r2, r2, #1
10001e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10001e90:	687b      	ldr	r3, [r7, #4]
10001e92:	2220      	movs	r2, #32
10001e94:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10001e98:	687b      	ldr	r3, [r7, #4]
10001e9a:	2200      	movs	r2, #0
10001e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
10001ea0:	2300      	movs	r3, #0
10001ea2:	e000      	b.n	10001ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
10001ea4:	2302      	movs	r3, #2
  }
}
10001ea6:	4618      	mov	r0, r3
10001ea8:	370c      	adds	r7, #12
10001eaa:	46bd      	mov	sp, r7
10001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
10001eb0:	4770      	bx	lr

10001eb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
10001eb2:	b480      	push	{r7}
10001eb4:	b085      	sub	sp, #20
10001eb6:	af00      	add	r7, sp, #0
10001eb8:	6078      	str	r0, [r7, #4]
10001eba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10001ebc:	687b      	ldr	r3, [r7, #4]
10001ebe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
10001ec2:	b2db      	uxtb	r3, r3
10001ec4:	2b20      	cmp	r3, #32
10001ec6:	d139      	bne.n	10001f3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10001ec8:	687b      	ldr	r3, [r7, #4]
10001eca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
10001ece:	2b01      	cmp	r3, #1
10001ed0:	d101      	bne.n	10001ed6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
10001ed2:	2302      	movs	r3, #2
10001ed4:	e033      	b.n	10001f3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
10001ed6:	687b      	ldr	r3, [r7, #4]
10001ed8:	2201      	movs	r2, #1
10001eda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    hi2c->State = HAL_I2C_STATE_BUSY;
10001ede:	687b      	ldr	r3, [r7, #4]
10001ee0:	2224      	movs	r2, #36	; 0x24
10001ee2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10001ee6:	687b      	ldr	r3, [r7, #4]
10001ee8:	681b      	ldr	r3, [r3, #0]
10001eea:	681a      	ldr	r2, [r3, #0]
10001eec:	687b      	ldr	r3, [r7, #4]
10001eee:	681b      	ldr	r3, [r3, #0]
10001ef0:	f022 0201 	bic.w	r2, r2, #1
10001ef4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
10001ef6:	687b      	ldr	r3, [r7, #4]
10001ef8:	681b      	ldr	r3, [r3, #0]
10001efa:	681b      	ldr	r3, [r3, #0]
10001efc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
10001efe:	68fb      	ldr	r3, [r7, #12]
10001f00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
10001f04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
10001f06:	683b      	ldr	r3, [r7, #0]
10001f08:	021b      	lsls	r3, r3, #8
10001f0a:	68fa      	ldr	r2, [r7, #12]
10001f0c:	4313      	orrs	r3, r2
10001f0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
10001f10:	687b      	ldr	r3, [r7, #4]
10001f12:	681b      	ldr	r3, [r3, #0]
10001f14:	68fa      	ldr	r2, [r7, #12]
10001f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10001f18:	687b      	ldr	r3, [r7, #4]
10001f1a:	681b      	ldr	r3, [r3, #0]
10001f1c:	681a      	ldr	r2, [r3, #0]
10001f1e:	687b      	ldr	r3, [r7, #4]
10001f20:	681b      	ldr	r3, [r3, #0]
10001f22:	f042 0201 	orr.w	r2, r2, #1
10001f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10001f28:	687b      	ldr	r3, [r7, #4]
10001f2a:	2220      	movs	r2, #32
10001f2c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10001f30:	687b      	ldr	r3, [r7, #4]
10001f32:	2200      	movs	r2, #0
10001f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
10001f38:	2300      	movs	r3, #0
10001f3a:	e000      	b.n	10001f3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
10001f3c:	2302      	movs	r3, #2
  }
}
10001f3e:	4618      	mov	r0, r3
10001f40:	3714      	adds	r7, #20
10001f42:	46bd      	mov	sp, r7
10001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f48:	4770      	bx	lr
	...

10001f4c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10001f4c:	b580      	push	{r7, lr}
10001f4e:	b084      	sub	sp, #16
10001f50:	af00      	add	r7, sp, #0
10001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10001f54:	2300      	movs	r3, #0
10001f56:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10001f58:	687b      	ldr	r3, [r7, #4]
10001f5a:	2b00      	cmp	r3, #0
10001f5c:	d101      	bne.n	10001f62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10001f5e:	2301      	movs	r3, #1
10001f60:	e31f      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10001f62:	687b      	ldr	r3, [r7, #4]
10001f64:	681b      	ldr	r3, [r3, #0]
10001f66:	f003 0301 	and.w	r3, r3, #1
10001f6a:	2b00      	cmp	r3, #0
10001f6c:	f000 8081 	beq.w	10002072 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10001f70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f74:	6a1b      	ldr	r3, [r3, #32]
10001f76:	f003 0303 	and.w	r3, r3, #3
10001f7a:	2b01      	cmp	r3, #1
10001f7c:	d107      	bne.n	10001f8e <HAL_RCC_OscConfig+0x42>
10001f7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f82:	6a1b      	ldr	r3, [r3, #32]
10001f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001f8c:	d054      	beq.n	10002038 <HAL_RCC_OscConfig+0xec>
10001f8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001f94:	f003 0307 	and.w	r3, r3, #7
10001f98:	2b01      	cmp	r3, #1
10001f9a:	d107      	bne.n	10001fac <HAL_RCC_OscConfig+0x60>
10001f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001faa:	d045      	beq.n	10002038 <HAL_RCC_OscConfig+0xec>
10001fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001fb2:	f003 0303 	and.w	r3, r3, #3
10001fb6:	2b01      	cmp	r3, #1
10001fb8:	d107      	bne.n	10001fca <HAL_RCC_OscConfig+0x7e>
10001fba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001fc8:	d036      	beq.n	10002038 <HAL_RCC_OscConfig+0xec>
10001fca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001fd0:	f003 0303 	and.w	r3, r3, #3
10001fd4:	2b01      	cmp	r3, #1
10001fd6:	d10f      	bne.n	10001ff8 <HAL_RCC_OscConfig+0xac>
10001fd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001fe0:	f003 0302 	and.w	r3, r3, #2
10001fe4:	2b02      	cmp	r3, #2
10001fe6:	d027      	beq.n	10002038 <HAL_RCC_OscConfig+0xec>
10001fe8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001ff0:	f003 0302 	and.w	r3, r3, #2
10001ff4:	2b02      	cmp	r3, #2
10001ff6:	d01f      	beq.n	10002038 <HAL_RCC_OscConfig+0xec>
10001ff8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ffc:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002000:	f003 0303 	and.w	r3, r3, #3
10002004:	2b01      	cmp	r3, #1
10002006:	d107      	bne.n	10002018 <HAL_RCC_OscConfig+0xcc>
10002008:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000200c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002010:	f003 0302 	and.w	r3, r3, #2
10002014:	2b02      	cmp	r3, #2
10002016:	d00f      	beq.n	10002038 <HAL_RCC_OscConfig+0xec>
10002018:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000201c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002020:	f003 0303 	and.w	r3, r3, #3
10002024:	2b01      	cmp	r3, #1
10002026:	d117      	bne.n	10002058 <HAL_RCC_OscConfig+0x10c>
10002028:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000202c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002030:	f003 0302 	and.w	r3, r3, #2
10002034:	2b02      	cmp	r3, #2
10002036:	d10f      	bne.n	10002058 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10002038:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000203c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002048:	d112      	bne.n	10002070 <HAL_RCC_OscConfig+0x124>
1000204a:	687b      	ldr	r3, [r7, #4]
1000204c:	685b      	ldr	r3, [r3, #4]
1000204e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002052:	d00d      	beq.n	10002070 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10002054:	2301      	movs	r3, #1
10002056:	e2a4      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10002058:	687b      	ldr	r3, [r7, #4]
1000205a:	685b      	ldr	r3, [r3, #4]
1000205c:	4618      	mov	r0, r3
1000205e:	f000 faa5 	bl	100025ac <HAL_RCC_HSEConfig>
10002062:	4603      	mov	r3, r0
10002064:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10002066:	7bfb      	ldrb	r3, [r7, #15]
10002068:	2b00      	cmp	r3, #0
1000206a:	d002      	beq.n	10002072 <HAL_RCC_OscConfig+0x126>
      {
        return result;
1000206c:	7bfb      	ldrb	r3, [r7, #15]
1000206e:	e298      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10002070:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10002072:	687b      	ldr	r3, [r7, #4]
10002074:	681b      	ldr	r3, [r3, #0]
10002076:	f003 0302 	and.w	r3, r3, #2
1000207a:	2b00      	cmp	r3, #0
1000207c:	f000 814e 	beq.w	1000231c <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10002080:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002084:	6a1b      	ldr	r3, [r3, #32]
10002086:	f003 0303 	and.w	r3, r3, #3
1000208a:	2b00      	cmp	r3, #0
1000208c:	d107      	bne.n	1000209e <HAL_RCC_OscConfig+0x152>
1000208e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002092:	6a1b      	ldr	r3, [r3, #32]
10002094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000209c:	d055      	beq.n	1000214a <HAL_RCC_OscConfig+0x1fe>
1000209e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100020a4:	f003 0307 	and.w	r3, r3, #7
100020a8:	2b00      	cmp	r3, #0
100020aa:	d107      	bne.n	100020bc <HAL_RCC_OscConfig+0x170>
100020ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100020b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100020b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100020ba:	d046      	beq.n	1000214a <HAL_RCC_OscConfig+0x1fe>
100020bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100020c2:	f003 0303 	and.w	r3, r3, #3
100020c6:	2b00      	cmp	r3, #0
100020c8:	d107      	bne.n	100020da <HAL_RCC_OscConfig+0x18e>
100020ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100020d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100020d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100020d8:	d037      	beq.n	1000214a <HAL_RCC_OscConfig+0x1fe>
100020da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100020e0:	f003 0303 	and.w	r3, r3, #3
100020e4:	2b00      	cmp	r3, #0
100020e6:	d10f      	bne.n	10002108 <HAL_RCC_OscConfig+0x1bc>
100020e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100020f0:	f003 0302 	and.w	r3, r3, #2
100020f4:	2b02      	cmp	r3, #2
100020f6:	d028      	beq.n	1000214a <HAL_RCC_OscConfig+0x1fe>
100020f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002100:	f003 0302 	and.w	r3, r3, #2
10002104:	2b02      	cmp	r3, #2
10002106:	d020      	beq.n	1000214a <HAL_RCC_OscConfig+0x1fe>
10002108:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000210c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002110:	f003 0303 	and.w	r3, r3, #3
10002114:	2b00      	cmp	r3, #0
10002116:	d107      	bne.n	10002128 <HAL_RCC_OscConfig+0x1dc>
10002118:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000211c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002120:	f003 0302 	and.w	r3, r3, #2
10002124:	2b02      	cmp	r3, #2
10002126:	d010      	beq.n	1000214a <HAL_RCC_OscConfig+0x1fe>
10002128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000212c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002130:	f003 0303 	and.w	r3, r3, #3
10002134:	2b00      	cmp	r3, #0
10002136:	f040 8088 	bne.w	1000224a <HAL_RCC_OscConfig+0x2fe>
1000213a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000213e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002142:	f003 0302 	and.w	r3, r3, #2
10002146:	2b02      	cmp	r3, #2
10002148:	d17f      	bne.n	1000224a <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000214a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000214e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002152:	f003 0301 	and.w	r3, r3, #1
10002156:	2b01      	cmp	r3, #1
10002158:	d105      	bne.n	10002166 <HAL_RCC_OscConfig+0x21a>
1000215a:	687b      	ldr	r3, [r7, #4]
1000215c:	68db      	ldr	r3, [r3, #12]
1000215e:	2b01      	cmp	r3, #1
10002160:	d001      	beq.n	10002166 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10002162:	2301      	movs	r3, #1
10002164:	e21d      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10002166:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000216a:	699b      	ldr	r3, [r3, #24]
1000216c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10002170:	687b      	ldr	r3, [r7, #4]
10002172:	691b      	ldr	r3, [r3, #16]
10002174:	021b      	lsls	r3, r3, #8
10002176:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000217a:	4313      	orrs	r3, r2
1000217c:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
1000217e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002184:	f003 0303 	and.w	r3, r3, #3
10002188:	2b00      	cmp	r3, #0
1000218a:	d10f      	bne.n	100021ac <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
1000218c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002194:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10002198:	2b02      	cmp	r3, #2
1000219a:	d047      	beq.n	1000222c <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
1000219c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100021a4:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100021a8:	2b02      	cmp	r3, #2
100021aa:	d03f      	beq.n	1000222c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100021ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021b0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100021b4:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100021b8:	2b00      	cmp	r3, #0
100021ba:	d107      	bne.n	100021cc <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100021bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021c0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100021c4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100021c8:	2b02      	cmp	r3, #2
100021ca:	d02f      	beq.n	1000222c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100021cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021d0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100021d4:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100021d8:	2b00      	cmp	r3, #0
100021da:	d107      	bne.n	100021ec <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
100021dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021e0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100021e4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100021e8:	2b02      	cmp	r3, #2
100021ea:	d01f      	beq.n	1000222c <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100021ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021f0:	699b      	ldr	r3, [r3, #24]
100021f2:	f023 0203 	bic.w	r2, r3, #3
100021f6:	687b      	ldr	r3, [r7, #4]
100021f8:	695b      	ldr	r3, [r3, #20]
100021fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100021fe:	4313      	orrs	r3, r2
10002200:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10002202:	f7fe fd25 	bl	10000c50 <HAL_GetTick>
10002206:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10002208:	e008      	b.n	1000221c <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000220a:	f7fe fd21 	bl	10000c50 <HAL_GetTick>
1000220e:	4602      	mov	r2, r0
10002210:	68bb      	ldr	r3, [r7, #8]
10002212:	1ad3      	subs	r3, r2, r3
10002214:	2b64      	cmp	r3, #100	; 0x64
10002216:	d901      	bls.n	1000221c <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10002218:	2303      	movs	r3, #3
1000221a:	e1c2      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000221c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002220:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002224:	f003 0304 	and.w	r3, r3, #4
10002228:	2b04      	cmp	r3, #4
1000222a:	d1ee      	bne.n	1000220a <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
1000222c:	f001 f807 	bl	1000323e <HAL_RCC_GetSystemCoreClockFreq>
10002230:	4603      	mov	r3, r0
10002232:	4ac0      	ldr	r2, [pc, #768]	; (10002534 <HAL_RCC_OscConfig+0x5e8>)
10002234:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10002236:	4bc0      	ldr	r3, [pc, #768]	; (10002538 <HAL_RCC_OscConfig+0x5ec>)
10002238:	681b      	ldr	r3, [r3, #0]
1000223a:	4618      	mov	r0, r3
1000223c:	f7fe fcbe 	bl	10000bbc <HAL_InitTick>
10002240:	4603      	mov	r3, r0
10002242:	2b00      	cmp	r3, #0
10002244:	d069      	beq.n	1000231a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10002246:	2301      	movs	r3, #1
10002248:	e1ab      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
1000224a:	687b      	ldr	r3, [r7, #4]
1000224c:	68db      	ldr	r3, [r3, #12]
1000224e:	2b00      	cmp	r3, #0
10002250:	d049      	beq.n	100022e6 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10002252:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002256:	68db      	ldr	r3, [r3, #12]
10002258:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000225c:	f043 0301 	orr.w	r3, r3, #1
10002260:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002262:	f7fe fcf5 	bl	10000c50 <HAL_GetTick>
10002266:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002268:	e008      	b.n	1000227c <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000226a:	f7fe fcf1 	bl	10000c50 <HAL_GetTick>
1000226e:	4602      	mov	r2, r0
10002270:	68bb      	ldr	r3, [r7, #8]
10002272:	1ad3      	subs	r3, r2, r3
10002274:	2b64      	cmp	r3, #100	; 0x64
10002276:	d901      	bls.n	1000227c <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10002278:	2303      	movs	r3, #3
1000227a:	e192      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000227c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002280:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002284:	f003 0301 	and.w	r3, r3, #1
10002288:	2b01      	cmp	r3, #1
1000228a:	d1ee      	bne.n	1000226a <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
1000228c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002290:	699b      	ldr	r3, [r3, #24]
10002292:	f023 0203 	bic.w	r2, r3, #3
10002296:	687b      	ldr	r3, [r7, #4]
10002298:	695b      	ldr	r3, [r3, #20]
1000229a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000229e:	4313      	orrs	r3, r2
100022a0:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100022a2:	f7fe fcd5 	bl	10000c50 <HAL_GetTick>
100022a6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100022a8:	e008      	b.n	100022bc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100022aa:	f7fe fcd1 	bl	10000c50 <HAL_GetTick>
100022ae:	4602      	mov	r2, r0
100022b0:	68bb      	ldr	r3, [r7, #8]
100022b2:	1ad3      	subs	r3, r2, r3
100022b4:	2b64      	cmp	r3, #100	; 0x64
100022b6:	d901      	bls.n	100022bc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
100022b8:	2303      	movs	r3, #3
100022ba:	e172      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100022bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022c0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100022c4:	f003 0304 	and.w	r3, r3, #4
100022c8:	2b04      	cmp	r3, #4
100022ca:	d1ee      	bne.n	100022aa <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100022cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022d0:	699b      	ldr	r3, [r3, #24]
100022d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
100022d6:	687b      	ldr	r3, [r7, #4]
100022d8:	691b      	ldr	r3, [r3, #16]
100022da:	021b      	lsls	r3, r3, #8
100022dc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100022e0:	4313      	orrs	r3, r2
100022e2:	618b      	str	r3, [r1, #24]
100022e4:	e01a      	b.n	1000231c <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
100022e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022ea:	2201      	movs	r2, #1
100022ec:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100022ee:	f7fe fcaf 	bl	10000c50 <HAL_GetTick>
100022f2:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100022f4:	e008      	b.n	10002308 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100022f6:	f7fe fcab 	bl	10000c50 <HAL_GetTick>
100022fa:	4602      	mov	r2, r0
100022fc:	68bb      	ldr	r3, [r7, #8]
100022fe:	1ad3      	subs	r3, r2, r3
10002300:	2b64      	cmp	r3, #100	; 0x64
10002302:	d901      	bls.n	10002308 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10002304:	2303      	movs	r3, #3
10002306:	e14c      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10002308:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000230c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002310:	f003 0301 	and.w	r3, r3, #1
10002314:	2b01      	cmp	r3, #1
10002316:	d0ee      	beq.n	100022f6 <HAL_RCC_OscConfig+0x3aa>
10002318:	e000      	b.n	1000231c <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000231a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
1000231c:	687b      	ldr	r3, [r7, #4]
1000231e:	681b      	ldr	r3, [r3, #0]
10002320:	f003 0310 	and.w	r3, r3, #16
10002324:	2b00      	cmp	r3, #0
10002326:	f000 8091 	beq.w	1000244c <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
1000232a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000232e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002332:	f003 0303 	and.w	r3, r3, #3
10002336:	2b02      	cmp	r3, #2
10002338:	d107      	bne.n	1000234a <HAL_RCC_OscConfig+0x3fe>
1000233a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000233e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002342:	f003 0302 	and.w	r3, r3, #2
10002346:	2b02      	cmp	r3, #2
10002348:	d01e      	beq.n	10002388 <HAL_RCC_OscConfig+0x43c>
1000234a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000234e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002350:	f003 0303 	and.w	r3, r3, #3
10002354:	2b02      	cmp	r3, #2
10002356:	d107      	bne.n	10002368 <HAL_RCC_OscConfig+0x41c>
10002358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000235e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002366:	d00f      	beq.n	10002388 <HAL_RCC_OscConfig+0x43c>
10002368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000236c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002370:	f003 0303 	and.w	r3, r3, #3
10002374:	2b02      	cmp	r3, #2
10002376:	d122      	bne.n	100023be <HAL_RCC_OscConfig+0x472>
10002378:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000237c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002380:	f003 0302 	and.w	r3, r3, #2
10002384:	2b02      	cmp	r3, #2
10002386:	d11a      	bne.n	100023be <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10002388:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000238c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002390:	f003 0310 	and.w	r3, r3, #16
10002394:	2b10      	cmp	r3, #16
10002396:	d105      	bne.n	100023a4 <HAL_RCC_OscConfig+0x458>
10002398:	687b      	ldr	r3, [r7, #4]
1000239a:	69db      	ldr	r3, [r3, #28]
1000239c:	2b10      	cmp	r3, #16
1000239e:	d001      	beq.n	100023a4 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
100023a0:	2301      	movs	r3, #1
100023a2:	e0fe      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100023a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023a8:	69db      	ldr	r3, [r3, #28]
100023aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
100023ae:	687b      	ldr	r3, [r7, #4]
100023b0:	6a1b      	ldr	r3, [r3, #32]
100023b2:	021b      	lsls	r3, r3, #8
100023b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100023b8:	4313      	orrs	r3, r2
100023ba:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100023bc:	e046      	b.n	1000244c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
100023be:	687b      	ldr	r3, [r7, #4]
100023c0:	69db      	ldr	r3, [r3, #28]
100023c2:	2b00      	cmp	r3, #0
100023c4:	d029      	beq.n	1000241a <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
100023c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023ca:	68db      	ldr	r3, [r3, #12]
100023cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023d0:	f043 0310 	orr.w	r3, r3, #16
100023d4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100023d6:	f7fe fc3b 	bl	10000c50 <HAL_GetTick>
100023da:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100023dc:	e008      	b.n	100023f0 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100023de:	f7fe fc37 	bl	10000c50 <HAL_GetTick>
100023e2:	4602      	mov	r2, r0
100023e4:	68bb      	ldr	r3, [r7, #8]
100023e6:	1ad3      	subs	r3, r2, r3
100023e8:	2b64      	cmp	r3, #100	; 0x64
100023ea:	d901      	bls.n	100023f0 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
100023ec:	2303      	movs	r3, #3
100023ee:	e0d8      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100023f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023f4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100023f8:	f003 0310 	and.w	r3, r3, #16
100023fc:	2b10      	cmp	r3, #16
100023fe:	d1ee      	bne.n	100023de <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10002400:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002404:	69db      	ldr	r3, [r3, #28]
10002406:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
1000240a:	687b      	ldr	r3, [r7, #4]
1000240c:	6a1b      	ldr	r3, [r3, #32]
1000240e:	021b      	lsls	r3, r3, #8
10002410:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002414:	4313      	orrs	r3, r2
10002416:	61cb      	str	r3, [r1, #28]
10002418:	e018      	b.n	1000244c <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
1000241a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000241e:	2210      	movs	r2, #16
10002420:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002422:	f7fe fc15 	bl	10000c50 <HAL_GetTick>
10002426:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10002428:	e008      	b.n	1000243c <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
1000242a:	f7fe fc11 	bl	10000c50 <HAL_GetTick>
1000242e:	4602      	mov	r2, r0
10002430:	68bb      	ldr	r3, [r7, #8]
10002432:	1ad3      	subs	r3, r2, r3
10002434:	2b64      	cmp	r3, #100	; 0x64
10002436:	d901      	bls.n	1000243c <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10002438:	2303      	movs	r3, #3
1000243a:	e0b2      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
1000243c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002440:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002444:	f003 0310 	and.w	r3, r3, #16
10002448:	2b10      	cmp	r3, #16
1000244a:	d0ee      	beq.n	1000242a <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1000244c:	687b      	ldr	r3, [r7, #4]
1000244e:	681b      	ldr	r3, [r3, #0]
10002450:	f003 0308 	and.w	r3, r3, #8
10002454:	2b00      	cmp	r3, #0
10002456:	d042      	beq.n	100024de <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10002458:	687b      	ldr	r3, [r7, #4]
1000245a:	699b      	ldr	r3, [r3, #24]
1000245c:	2b00      	cmp	r3, #0
1000245e:	d01f      	beq.n	100024a0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10002460:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002464:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10002468:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000246c:	f043 0301 	orr.w	r3, r3, #1
10002470:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002474:	f7fe fbec 	bl	10000c50 <HAL_GetTick>
10002478:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000247a:	e008      	b.n	1000248e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1000247c:	f7fe fbe8 	bl	10000c50 <HAL_GetTick>
10002480:	4602      	mov	r2, r0
10002482:	68bb      	ldr	r3, [r7, #8]
10002484:	1ad3      	subs	r3, r2, r3
10002486:	2b64      	cmp	r3, #100	; 0x64
10002488:	d901      	bls.n	1000248e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000248a:	2303      	movs	r3, #3
1000248c:	e089      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000248e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002492:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10002496:	f003 0302 	and.w	r3, r3, #2
1000249a:	2b02      	cmp	r3, #2
1000249c:	d1ee      	bne.n	1000247c <HAL_RCC_OscConfig+0x530>
1000249e:	e01e      	b.n	100024de <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
100024a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024a4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100024a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100024ac:	f023 0301 	bic.w	r3, r3, #1
100024b0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100024b4:	f7fe fbcc 	bl	10000c50 <HAL_GetTick>
100024b8:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100024ba:	e008      	b.n	100024ce <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100024bc:	f7fe fbc8 	bl	10000c50 <HAL_GetTick>
100024c0:	4602      	mov	r2, r0
100024c2:	68bb      	ldr	r3, [r7, #8]
100024c4:	1ad3      	subs	r3, r2, r3
100024c6:	2b64      	cmp	r3, #100	; 0x64
100024c8:	d901      	bls.n	100024ce <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
100024ca:	2303      	movs	r3, #3
100024cc:	e069      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100024ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024d2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100024d6:	f003 0302 	and.w	r3, r3, #2
100024da:	2b02      	cmp	r3, #2
100024dc:	d0ee      	beq.n	100024bc <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100024de:	687b      	ldr	r3, [r7, #4]
100024e0:	681b      	ldr	r3, [r3, #0]
100024e2:	f003 0304 	and.w	r3, r3, #4
100024e6:	2b00      	cmp	r3, #0
100024e8:	d02a      	beq.n	10002540 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100024ea:	4b14      	ldr	r3, [pc, #80]	; (1000253c <HAL_RCC_OscConfig+0x5f0>)
100024ec:	681b      	ldr	r3, [r3, #0]
100024ee:	4a13      	ldr	r2, [pc, #76]	; (1000253c <HAL_RCC_OscConfig+0x5f0>)
100024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100024f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100024f6:	f7fe fbab 	bl	10000c50 <HAL_GetTick>
100024fa:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100024fc:	e008      	b.n	10002510 <HAL_RCC_OscConfig+0x5c4>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100024fe:	f7fe fba7 	bl	10000c50 <HAL_GetTick>
10002502:	4602      	mov	r2, r0
10002504:	68bb      	ldr	r3, [r7, #8]
10002506:	1ad3      	subs	r3, r2, r3
10002508:	2b64      	cmp	r3, #100	; 0x64
1000250a:	d901      	bls.n	10002510 <HAL_RCC_OscConfig+0x5c4>
      {
        return HAL_TIMEOUT;
1000250c:	2303      	movs	r3, #3
1000250e:	e048      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002510:	4b0a      	ldr	r3, [pc, #40]	; (1000253c <HAL_RCC_OscConfig+0x5f0>)
10002512:	681b      	ldr	r3, [r3, #0]
10002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002518:	2b00      	cmp	r3, #0
1000251a:	d0f0      	beq.n	100024fe <HAL_RCC_OscConfig+0x5b2>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
1000251c:	687b      	ldr	r3, [r7, #4]
1000251e:	689b      	ldr	r3, [r3, #8]
10002520:	4618      	mov	r0, r3
10002522:	f000 f8ae 	bl	10002682 <HAL_RCC_LSEConfig>
10002526:	4603      	mov	r3, r0
10002528:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
1000252a:	7bfb      	ldrb	r3, [r7, #15]
1000252c:	2b00      	cmp	r3, #0
1000252e:	d007      	beq.n	10002540 <HAL_RCC_OscConfig+0x5f4>
    {
      return result;
10002530:	7bfb      	ldrb	r3, [r7, #15]
10002532:	e036      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
10002534:	10020000 	.word	0x10020000
10002538:	10020018 	.word	0x10020018
1000253c:	50001000 	.word	0x50001000
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10002540:	687b      	ldr	r3, [r7, #4]
10002542:	3324      	adds	r3, #36	; 0x24
10002544:	4618      	mov	r0, r3
10002546:	f000 f919 	bl	1000277c <RCC_PLL1_Config>
1000254a:	4603      	mov	r3, r0
1000254c:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000254e:	7bfb      	ldrb	r3, [r7, #15]
10002550:	2b00      	cmp	r3, #0
10002552:	d001      	beq.n	10002558 <HAL_RCC_OscConfig+0x60c>
  {
    return result;
10002554:	7bfb      	ldrb	r3, [r7, #15]
10002556:	e024      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10002558:	687b      	ldr	r3, [r7, #4]
1000255a:	3360      	adds	r3, #96	; 0x60
1000255c:	4618      	mov	r0, r3
1000255e:	f000 fecb 	bl	100032f8 <RCCEx_PLL2_Config>
10002562:	4603      	mov	r3, r0
10002564:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002566:	7bfb      	ldrb	r3, [r7, #15]
10002568:	2b00      	cmp	r3, #0
1000256a:	d001      	beq.n	10002570 <HAL_RCC_OscConfig+0x624>
  {
    return result;
1000256c:	7bfb      	ldrb	r3, [r7, #15]
1000256e:	e018      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10002570:	687b      	ldr	r3, [r7, #4]
10002572:	339c      	adds	r3, #156	; 0x9c
10002574:	4618      	mov	r0, r3
10002576:	f001 f841 	bl	100035fc <RCCEx_PLL3_Config>
1000257a:	4603      	mov	r3, r0
1000257c:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000257e:	7bfb      	ldrb	r3, [r7, #15]
10002580:	2b00      	cmp	r3, #0
10002582:	d001      	beq.n	10002588 <HAL_RCC_OscConfig+0x63c>
  {
    return result;
10002584:	7bfb      	ldrb	r3, [r7, #15]
10002586:	e00c      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10002588:	687b      	ldr	r3, [r7, #4]
1000258a:	33d8      	adds	r3, #216	; 0xd8
1000258c:	4618      	mov	r0, r3
1000258e:	f001 f99f 	bl	100038d0 <RCCEx_PLL4_Config>
10002592:	4603      	mov	r3, r0
10002594:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002596:	7bfb      	ldrb	r3, [r7, #15]
10002598:	2b00      	cmp	r3, #0
1000259a:	d001      	beq.n	100025a0 <HAL_RCC_OscConfig+0x654>
  {
    return result;
1000259c:	7bfb      	ldrb	r3, [r7, #15]
1000259e:	e000      	b.n	100025a2 <HAL_RCC_OscConfig+0x656>
  }

  return HAL_OK;
100025a0:	2300      	movs	r3, #0
}
100025a2:	4618      	mov	r0, r3
100025a4:	3710      	adds	r7, #16
100025a6:	46bd      	mov	sp, r7
100025a8:	bd80      	pop	{r7, pc}
100025aa:	bf00      	nop

100025ac <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
100025ac:	b580      	push	{r7, lr}
100025ae:	b084      	sub	sp, #16
100025b0:	af00      	add	r7, sp, #0
100025b2:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
100025b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025b8:	f44f 7280 	mov.w	r2, #256	; 0x100
100025bc:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100025be:	f7fe fb47 	bl	10000c50 <HAL_GetTick>
100025c2:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100025c4:	e008      	b.n	100025d8 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100025c6:	f7fe fb43 	bl	10000c50 <HAL_GetTick>
100025ca:	4602      	mov	r2, r0
100025cc:	68fb      	ldr	r3, [r7, #12]
100025ce:	1ad3      	subs	r3, r2, r3
100025d0:	2b64      	cmp	r3, #100	; 0x64
100025d2:	d901      	bls.n	100025d8 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
100025d4:	2303      	movs	r3, #3
100025d6:	e050      	b.n	1000267a <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100025d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025dc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
100025e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100025e8:	d0ed      	beq.n	100025c6 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100025ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025ee:	f44f 6290 	mov.w	r2, #1152	; 0x480
100025f2:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100025f4:	687b      	ldr	r3, [r7, #4]
100025f6:	2b00      	cmp	r3, #0
100025f8:	d03e      	beq.n	10002678 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100025fa:	687b      	ldr	r3, [r7, #4]
100025fc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10002600:	d108      	bne.n	10002614 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10002602:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002606:	68db      	ldr	r3, [r3, #12]
10002608:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000260c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10002610:	60d3      	str	r3, [r2, #12]
10002612:	e013      	b.n	1000263c <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10002614:	687b      	ldr	r3, [r7, #4]
10002616:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
1000261a:	d10f      	bne.n	1000263c <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
1000261c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002620:	68db      	ldr	r3, [r3, #12]
10002622:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000262a:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000262c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002630:	68db      	ldr	r3, [r3, #12]
10002632:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1000263a:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
1000263c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002640:	68db      	ldr	r3, [r3, #12]
10002642:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000264a:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000264c:	f7fe fb00 	bl	10000c50 <HAL_GetTick>
10002650:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002652:	e008      	b.n	10002666 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10002654:	f7fe fafc 	bl	10000c50 <HAL_GetTick>
10002658:	4602      	mov	r2, r0
1000265a:	68fb      	ldr	r3, [r7, #12]
1000265c:	1ad3      	subs	r3, r2, r3
1000265e:	2b64      	cmp	r3, #100	; 0x64
10002660:	d901      	bls.n	10002666 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10002662:	2303      	movs	r3, #3
10002664:	e009      	b.n	1000267a <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002666:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000266a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002676:	d1ed      	bne.n	10002654 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10002678:	2300      	movs	r3, #0
}
1000267a:	4618      	mov	r0, r3
1000267c:	3710      	adds	r7, #16
1000267e:	46bd      	mov	sp, r7
10002680:	bd80      	pop	{r7, pc}

10002682 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10002682:	b580      	push	{r7, lr}
10002684:	b084      	sub	sp, #16
10002686:	af00      	add	r7, sp, #0
10002688:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1000268a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000268e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002692:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002696:	f023 0301 	bic.w	r3, r3, #1
1000269a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000269e:	f7fe fad7 	bl	10000c50 <HAL_GetTick>
100026a2:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100026a4:	e00a      	b.n	100026bc <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100026a6:	f7fe fad3 	bl	10000c50 <HAL_GetTick>
100026aa:	4602      	mov	r2, r0
100026ac:	68fb      	ldr	r3, [r7, #12]
100026ae:	1ad3      	subs	r3, r2, r3
100026b0:	f241 3288 	movw	r2, #5000	; 0x1388
100026b4:	4293      	cmp	r3, r2
100026b6:	d901      	bls.n	100026bc <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
100026b8:	2303      	movs	r3, #3
100026ba:	e05b      	b.n	10002774 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100026bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100026c4:	f003 0304 	and.w	r3, r3, #4
100026c8:	2b04      	cmp	r3, #4
100026ca:	d0ec      	beq.n	100026a6 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
100026cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100026d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026d8:	f023 030a 	bic.w	r3, r3, #10
100026dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
100026e0:	687b      	ldr	r3, [r7, #4]
100026e2:	2b00      	cmp	r3, #0
100026e4:	d045      	beq.n	10002772 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
100026e6:	687b      	ldr	r3, [r7, #4]
100026e8:	2b03      	cmp	r3, #3
100026ea:	d10a      	bne.n	10002702 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100026ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100026f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026f8:	f043 0302 	orr.w	r3, r3, #2
100026fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10002700:	e016      	b.n	10002730 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10002702:	687b      	ldr	r3, [r7, #4]
10002704:	2b0b      	cmp	r3, #11
10002706:	d113      	bne.n	10002730 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10002708:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000270c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002710:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002714:	f043 0308 	orr.w	r3, r3, #8
10002718:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
1000271c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002720:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002724:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002728:	f043 0302 	orr.w	r3, r3, #2
1000272c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10002730:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002734:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002738:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000273c:	f043 0301 	orr.w	r3, r3, #1
10002740:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002744:	f7fe fa84 	bl	10000c50 <HAL_GetTick>
10002748:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000274a:	e00a      	b.n	10002762 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000274c:	f7fe fa80 	bl	10000c50 <HAL_GetTick>
10002750:	4602      	mov	r2, r0
10002752:	68fb      	ldr	r3, [r7, #12]
10002754:	1ad3      	subs	r3, r2, r3
10002756:	f241 3288 	movw	r2, #5000	; 0x1388
1000275a:	4293      	cmp	r3, r2
1000275c:	d901      	bls.n	10002762 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
1000275e:	2303      	movs	r3, #3
10002760:	e008      	b.n	10002774 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10002762:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000276a:	f003 0304 	and.w	r3, r3, #4
1000276e:	2b04      	cmp	r3, #4
10002770:	d1ec      	bne.n	1000274c <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10002772:	2300      	movs	r3, #0
}
10002774:	4618      	mov	r0, r3
10002776:	3710      	adds	r7, #16
10002778:	46bd      	mov	sp, r7
1000277a:	bd80      	pop	{r7, pc}

1000277c <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
1000277c:	b580      	push	{r7, lr}
1000277e:	b084      	sub	sp, #16
10002780:	af00      	add	r7, sp, #0
10002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10002784:	687b      	ldr	r3, [r7, #4]
10002786:	681b      	ldr	r3, [r3, #0]
10002788:	2b00      	cmp	r3, #0
1000278a:	f000 8174 	beq.w	10002a76 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
1000278e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002792:	6a1b      	ldr	r3, [r3, #32]
10002794:	f003 0303 	and.w	r3, r3, #3
10002798:	2b02      	cmp	r3, #2
1000279a:	d108      	bne.n	100027ae <RCC_PLL1_Config+0x32>
1000279c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027a0:	6a1b      	ldr	r3, [r3, #32]
100027a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100027a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100027aa:	f000 8162 	beq.w	10002a72 <RCC_PLL1_Config+0x2f6>
100027ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027b2:	6a1b      	ldr	r3, [r3, #32]
100027b4:	f003 0303 	and.w	r3, r3, #3
100027b8:	2b03      	cmp	r3, #3
100027ba:	d108      	bne.n	100027ce <RCC_PLL1_Config+0x52>
100027bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027c0:	6a1b      	ldr	r3, [r3, #32]
100027c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100027c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100027ca:	f000 8152 	beq.w	10002a72 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
100027ce:	687b      	ldr	r3, [r7, #4]
100027d0:	681b      	ldr	r3, [r3, #0]
100027d2:	2b02      	cmp	r3, #2
100027d4:	f040 8123 	bne.w	10002a1e <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100027d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100027e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100027e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
100027ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100027f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027f8:	f023 0301 	bic.w	r3, r3, #1
100027fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002800:	f7fe fa26 	bl	10000c50 <HAL_GetTick>
10002804:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002806:	e008      	b.n	1000281a <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002808:	f7fe fa22 	bl	10000c50 <HAL_GetTick>
1000280c:	4602      	mov	r2, r0
1000280e:	68fb      	ldr	r3, [r7, #12]
10002810:	1ad3      	subs	r3, r2, r3
10002812:	2b64      	cmp	r3, #100	; 0x64
10002814:	d901      	bls.n	1000281a <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10002816:	2303      	movs	r3, #3
10002818:	e12e      	b.n	10002a78 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000281a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000281e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002822:	f003 0302 	and.w	r3, r3, #2
10002826:	2b02      	cmp	r3, #2
10002828:	d0ee      	beq.n	10002808 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
1000282a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002830:	f003 0307 	and.w	r3, r3, #7
10002834:	2b02      	cmp	r3, #2
10002836:	d112      	bne.n	1000285e <RCC_PLL1_Config+0xe2>
10002838:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000283e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002846:	d10a      	bne.n	1000285e <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10002848:	687b      	ldr	r3, [r7, #4]
1000284a:	685a      	ldr	r2, [r3, #4]
1000284c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002852:	f003 0303 	and.w	r3, r3, #3
10002856:	429a      	cmp	r2, r3
10002858:	d00c      	beq.n	10002874 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
1000285a:	2301      	movs	r3, #1
1000285c:	e10c      	b.n	10002a78 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
1000285e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002864:	f023 0203 	bic.w	r2, r3, #3
10002868:	687b      	ldr	r3, [r7, #4]
1000286a:	685b      	ldr	r3, [r3, #4]
1000286c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002870:	4313      	orrs	r3, r2
10002872:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10002874:	e008      	b.n	10002888 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002876:	f7fe f9eb 	bl	10000c50 <HAL_GetTick>
1000287a:	4602      	mov	r2, r0
1000287c:	68fb      	ldr	r3, [r7, #12]
1000287e:	1ad3      	subs	r3, r2, r3
10002880:	2b64      	cmp	r3, #100	; 0x64
10002882:	d901      	bls.n	10002888 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10002884:	2303      	movs	r3, #3
10002886:	e0f7      	b.n	10002a78 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10002888:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000288e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002896:	d1ee      	bne.n	10002876 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10002898:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000289c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
100028a0:	4b77      	ldr	r3, [pc, #476]	; (10002a80 <RCC_PLL1_Config+0x304>)
100028a2:	4013      	ands	r3, r2
100028a4:	687a      	ldr	r2, [r7, #4]
100028a6:	68d2      	ldr	r2, [r2, #12]
100028a8:	1e51      	subs	r1, r2, #1
100028aa:	687a      	ldr	r2, [r7, #4]
100028ac:	6892      	ldr	r2, [r2, #8]
100028ae:	3a01      	subs	r2, #1
100028b0:	0412      	lsls	r2, r2, #16
100028b2:	430a      	orrs	r2, r1
100028b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100028b8:	4313      	orrs	r3, r2
100028ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
100028be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100028c6:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100028ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100028ce:	687a      	ldr	r2, [r7, #4]
100028d0:	6912      	ldr	r2, [r2, #16]
100028d2:	1e51      	subs	r1, r2, #1
100028d4:	687a      	ldr	r2, [r7, #4]
100028d6:	6952      	ldr	r2, [r2, #20]
100028d8:	3a01      	subs	r2, #1
100028da:	0212      	lsls	r2, r2, #8
100028dc:	4311      	orrs	r1, r2
100028de:	687a      	ldr	r2, [r7, #4]
100028e0:	6992      	ldr	r2, [r2, #24]
100028e2:	3a01      	subs	r2, #1
100028e4:	0412      	lsls	r2, r2, #16
100028e6:	430a      	orrs	r2, r1
100028e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100028ec:	4313      	orrs	r3, r2
100028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
100028f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100028fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002902:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10002906:	687b      	ldr	r3, [r7, #4]
10002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000290a:	2b02      	cmp	r3, #2
1000290c:	d003      	beq.n	10002916 <RCC_PLL1_Config+0x19a>
1000290e:	687b      	ldr	r3, [r7, #4]
10002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002912:	2b00      	cmp	r3, #0
10002914:	d10c      	bne.n	10002930 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10002916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000291a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000291e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002926:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000292a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
1000292e:	e00f      	b.n	10002950 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10002930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10002938:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000293c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002940:	687a      	ldr	r2, [r7, #4]
10002942:	6a12      	ldr	r2, [r2, #32]
10002944:	00d2      	lsls	r2, r2, #3
10002946:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000294a:	4313      	orrs	r3, r2
1000294c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10002950:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10002958:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002960:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002964:	687b      	ldr	r3, [r7, #4]
10002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002968:	2b02      	cmp	r3, #2
1000296a:	d124      	bne.n	100029b6 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
1000296c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
10002974:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002978:	687b      	ldr	r3, [r7, #4]
1000297a:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000297c:	687b      	ldr	r3, [r7, #4]
1000297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002980:	4319      	orrs	r1, r3
10002982:	687b      	ldr	r3, [r7, #4]
10002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002986:	4319      	orrs	r1, r3
10002988:	687b      	ldr	r3, [r7, #4]
1000298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000298c:	4319      	orrs	r1, r3
1000298e:	687b      	ldr	r3, [r7, #4]
10002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002992:	041b      	lsls	r3, r3, #16
10002994:	430b      	orrs	r3, r1
10002996:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000299a:	4313      	orrs	r3, r2
1000299c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
100029a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100029a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029ac:	f043 0304 	orr.w	r3, r3, #4
100029b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
100029b4:	e009      	b.n	100029ca <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
100029b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100029be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029c2:	f023 0304 	bic.w	r3, r3, #4
100029c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
100029ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100029d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029d6:	f043 0301 	orr.w	r3, r3, #1
100029da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100029de:	f7fe f937 	bl	10000c50 <HAL_GetTick>
100029e2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100029e4:	e008      	b.n	100029f8 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100029e6:	f7fe f933 	bl	10000c50 <HAL_GetTick>
100029ea:	4602      	mov	r2, r0
100029ec:	68fb      	ldr	r3, [r7, #12]
100029ee:	1ad3      	subs	r3, r2, r3
100029f0:	2b64      	cmp	r3, #100	; 0x64
100029f2:	d901      	bls.n	100029f8 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
100029f4:	2303      	movs	r3, #3
100029f6:	e03f      	b.n	10002a78 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100029f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002a00:	f003 0302 	and.w	r3, r3, #2
10002a04:	2b02      	cmp	r3, #2
10002a06:	d1ee      	bne.n	100029e6 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002a10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a14:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002a18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10002a1c:	e02b      	b.n	10002a76 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002a1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002a26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002a2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10002a32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002a3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a3e:	f023 0301 	bic.w	r3, r3, #1
10002a42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002a46:	f7fe f903 	bl	10000c50 <HAL_GetTick>
10002a4a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002a4c:	e008      	b.n	10002a60 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002a4e:	f7fe f8ff 	bl	10000c50 <HAL_GetTick>
10002a52:	4602      	mov	r2, r0
10002a54:	68fb      	ldr	r3, [r7, #12]
10002a56:	1ad3      	subs	r3, r2, r3
10002a58:	2b64      	cmp	r3, #100	; 0x64
10002a5a:	d901      	bls.n	10002a60 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10002a5c:	2303      	movs	r3, #3
10002a5e:	e00b      	b.n	10002a78 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002a68:	f003 0302 	and.w	r3, r3, #2
10002a6c:	2b02      	cmp	r3, #2
10002a6e:	d0ee      	beq.n	10002a4e <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10002a70:	e001      	b.n	10002a76 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002a72:	2301      	movs	r3, #1
10002a74:	e000      	b.n	10002a78 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10002a76:	2300      	movs	r3, #0

}
10002a78:	4618      	mov	r0, r3
10002a7a:	3710      	adds	r7, #16
10002a7c:	46bd      	mov	sp, r7
10002a7e:	bd80      	pop	{r7, pc}
10002a80:	ffc0fe00 	.word	0xffc0fe00

10002a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10002a84:	b580      	push	{r7, lr}
10002a86:	b084      	sub	sp, #16
10002a88:	af00      	add	r7, sp, #0
10002a8a:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10002a8c:	2300      	movs	r3, #0
10002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10002a90:	687b      	ldr	r3, [r7, #4]
10002a92:	2b00      	cmp	r3, #0
10002a94:	d101      	bne.n	10002a9a <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10002a96:	2301      	movs	r3, #1
10002a98:	e102      	b.n	10002ca0 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10002a9a:	687b      	ldr	r3, [r7, #4]
10002a9c:	681b      	ldr	r3, [r3, #0]
10002a9e:	f003 0301 	and.w	r3, r3, #1
10002aa2:	2b00      	cmp	r3, #0
10002aa4:	d00b      	beq.n	10002abe <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10002aa6:	687b      	ldr	r3, [r7, #4]
10002aa8:	3304      	adds	r3, #4
10002aaa:	4618      	mov	r0, r3
10002aac:	f000 f8fc 	bl	10002ca8 <RCC_MPUConfig>
10002ab0:	4603      	mov	r3, r0
10002ab2:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002ab4:	7bfb      	ldrb	r3, [r7, #15]
10002ab6:	2b00      	cmp	r3, #0
10002ab8:	d001      	beq.n	10002abe <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10002aba:	7bfb      	ldrb	r3, [r7, #15]
10002abc:	e0f0      	b.n	10002ca0 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10002abe:	687b      	ldr	r3, [r7, #4]
10002ac0:	681b      	ldr	r3, [r3, #0]
10002ac2:	f003 0302 	and.w	r3, r3, #2
10002ac6:	2b00      	cmp	r3, #0
10002ac8:	d00b      	beq.n	10002ae2 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10002aca:	687b      	ldr	r3, [r7, #4]
10002acc:	330c      	adds	r3, #12
10002ace:	4618      	mov	r0, r3
10002ad0:	f000 f960 	bl	10002d94 <RCC_AXISSConfig>
10002ad4:	4603      	mov	r3, r0
10002ad6:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002ad8:	7bfb      	ldrb	r3, [r7, #15]
10002ada:	2b00      	cmp	r3, #0
10002adc:	d001      	beq.n	10002ae2 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10002ade:	7bfb      	ldrb	r3, [r7, #15]
10002ae0:	e0de      	b.n	10002ca0 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10002ae2:	687b      	ldr	r3, [r7, #4]
10002ae4:	681b      	ldr	r3, [r3, #0]
10002ae6:	f003 0304 	and.w	r3, r3, #4
10002aea:	2b00      	cmp	r3, #0
10002aec:	d00b      	beq.n	10002b06 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10002aee:	687b      	ldr	r3, [r7, #4]
10002af0:	3314      	adds	r3, #20
10002af2:	4618      	mov	r0, r3
10002af4:	f000 f9e6 	bl	10002ec4 <RCC_MCUConfig>
10002af8:	4603      	mov	r3, r0
10002afa:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002afc:	7bfb      	ldrb	r3, [r7, #15]
10002afe:	2b00      	cmp	r3, #0
10002b00:	d001      	beq.n	10002b06 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10002b02:	7bfb      	ldrb	r3, [r7, #15]
10002b04:	e0cc      	b.n	10002ca0 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10002b06:	687b      	ldr	r3, [r7, #4]
10002b08:	681b      	ldr	r3, [r3, #0]
10002b0a:	f003 0308 	and.w	r3, r3, #8
10002b0e:	2b00      	cmp	r3, #0
10002b10:	d020      	beq.n	10002b54 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10002b12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002b18:	f023 0207 	bic.w	r2, r3, #7
10002b1c:	687b      	ldr	r3, [r7, #4]
10002b1e:	69db      	ldr	r3, [r3, #28]
10002b20:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002b24:	4313      	orrs	r3, r2
10002b26:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002b28:	f7fe f892 	bl	10000c50 <HAL_GetTick>
10002b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002b2e:	e009      	b.n	10002b44 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002b30:	f7fe f88e 	bl	10000c50 <HAL_GetTick>
10002b34:	4602      	mov	r2, r0
10002b36:	68bb      	ldr	r3, [r7, #8]
10002b38:	1ad3      	subs	r3, r2, r3
10002b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002b3e:	d901      	bls.n	10002b44 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10002b40:	2303      	movs	r3, #3
10002b42:	e0ad      	b.n	10002ca0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002b44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002b52:	d1ed      	bne.n	10002b30 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10002b54:	687b      	ldr	r3, [r7, #4]
10002b56:	681b      	ldr	r3, [r3, #0]
10002b58:	f003 0310 	and.w	r3, r3, #16
10002b5c:	2b00      	cmp	r3, #0
10002b5e:	d020      	beq.n	10002ba2 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10002b60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002b66:	f023 0207 	bic.w	r2, r3, #7
10002b6a:	687b      	ldr	r3, [r7, #4]
10002b6c:	6a1b      	ldr	r3, [r3, #32]
10002b6e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002b72:	4313      	orrs	r3, r2
10002b74:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002b76:	f7fe f86b 	bl	10000c50 <HAL_GetTick>
10002b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10002b7c:	e009      	b.n	10002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002b7e:	f7fe f867 	bl	10000c50 <HAL_GetTick>
10002b82:	4602      	mov	r2, r0
10002b84:	68bb      	ldr	r3, [r7, #8]
10002b86:	1ad3      	subs	r3, r2, r3
10002b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002b8c:	d901      	bls.n	10002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10002b8e:	2303      	movs	r3, #3
10002b90:	e086      	b.n	10002ca0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10002b92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002ba0:	d1ed      	bne.n	10002b7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10002ba2:	687b      	ldr	r3, [r7, #4]
10002ba4:	681b      	ldr	r3, [r3, #0]
10002ba6:	f003 0320 	and.w	r3, r3, #32
10002baa:	2b00      	cmp	r3, #0
10002bac:	d023      	beq.n	10002bf6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10002bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bb2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002bb6:	f023 0207 	bic.w	r2, r3, #7
10002bba:	687b      	ldr	r3, [r7, #4]
10002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002bbe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002bc2:	4313      	orrs	r3, r2
10002bc4:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002bc8:	f7fe f842 	bl	10000c50 <HAL_GetTick>
10002bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002bce:	e009      	b.n	10002be4 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002bd0:	f7fe f83e 	bl	10000c50 <HAL_GetTick>
10002bd4:	4602      	mov	r2, r0
10002bd6:	68bb      	ldr	r3, [r7, #8]
10002bd8:	1ad3      	subs	r3, r2, r3
10002bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002bde:	d901      	bls.n	10002be4 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10002be0:	2303      	movs	r3, #3
10002be2:	e05d      	b.n	10002ca0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002be4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002be8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002bf4:	d1ec      	bne.n	10002bd0 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10002bf6:	687b      	ldr	r3, [r7, #4]
10002bf8:	681b      	ldr	r3, [r3, #0]
10002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
10002bfe:	2b00      	cmp	r3, #0
10002c00:	d023      	beq.n	10002c4a <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10002c02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c06:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10002c0a:	f023 0207 	bic.w	r2, r3, #7
10002c0e:	687b      	ldr	r3, [r7, #4]
10002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002c12:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c16:	4313      	orrs	r3, r2
10002c18:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002c1c:	f7fe f818 	bl	10000c50 <HAL_GetTick>
10002c20:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002c22:	e009      	b.n	10002c38 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002c24:	f7fe f814 	bl	10000c50 <HAL_GetTick>
10002c28:	4602      	mov	r2, r0
10002c2a:	68bb      	ldr	r3, [r7, #8]
10002c2c:	1ad3      	subs	r3, r2, r3
10002c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002c32:	d901      	bls.n	10002c38 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10002c34:	2303      	movs	r3, #3
10002c36:	e033      	b.n	10002ca0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002c38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c3c:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10002c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002c48:	d1ec      	bne.n	10002c24 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10002c4a:	687b      	ldr	r3, [r7, #4]
10002c4c:	681b      	ldr	r3, [r3, #0]
10002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
10002c52:	2b00      	cmp	r3, #0
10002c54:	d023      	beq.n	10002c9e <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10002c56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c5a:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10002c5e:	f023 0207 	bic.w	r2, r3, #7
10002c62:	687b      	ldr	r3, [r7, #4]
10002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002c66:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c6a:	4313      	orrs	r3, r2
10002c6c:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002c70:	f7fd ffee 	bl	10000c50 <HAL_GetTick>
10002c74:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10002c76:	e009      	b.n	10002c8c <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002c78:	f7fd ffea 	bl	10000c50 <HAL_GetTick>
10002c7c:	4602      	mov	r2, r0
10002c7e:	68bb      	ldr	r3, [r7, #8]
10002c80:	1ad3      	subs	r3, r2, r3
10002c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002c86:	d901      	bls.n	10002c8c <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10002c88:	2303      	movs	r3, #3
10002c8a:	e009      	b.n	10002ca0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10002c8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c90:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10002c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002c9c:	d1ec      	bne.n	10002c78 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10002c9e:	2300      	movs	r3, #0
}
10002ca0:	4618      	mov	r0, r3
10002ca2:	3710      	adds	r7, #16
10002ca4:	46bd      	mov	sp, r7
10002ca6:	bd80      	pop	{r7, pc}

10002ca8 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10002ca8:	b580      	push	{r7, lr}
10002caa:	b084      	sub	sp, #16
10002cac:	af00      	add	r7, sp, #0
10002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10002cb0:	687b      	ldr	r3, [r7, #4]
10002cb2:	681b      	ldr	r3, [r3, #0]
10002cb4:	2b03      	cmp	r3, #3
10002cb6:	d840      	bhi.n	10002d3a <RCC_MPUConfig+0x92>
10002cb8:	a201      	add	r2, pc, #4	; (adr r2, 10002cc0 <RCC_MPUConfig+0x18>)
10002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002cbe:	bf00      	nop
10002cc0:	10002cd1 	.word	0x10002cd1
10002cc4:	10002ce5 	.word	0x10002ce5
10002cc8:	10002cfb 	.word	0x10002cfb
10002ccc:	10002d0f 	.word	0x10002d0f
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002cd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cd4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002cd8:	f003 0301 	and.w	r3, r3, #1
10002cdc:	2b01      	cmp	r3, #1
10002cde:	d02e      	beq.n	10002d3e <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10002ce0:	2301      	movs	r3, #1
10002ce2:	e053      	b.n	10002d8c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002ce4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ce8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002cf4:	d025      	beq.n	10002d42 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10002cf6:	2301      	movs	r3, #1
10002cf8:	e048      	b.n	10002d8c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002cfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002d02:	f003 0302 	and.w	r3, r3, #2
10002d06:	2b02      	cmp	r3, #2
10002d08:	d01d      	beq.n	10002d46 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10002d0a:	2301      	movs	r3, #1
10002d0c:	e03e      	b.n	10002d8c <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002d0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002d16:	f003 0302 	and.w	r3, r3, #2
10002d1a:	2b02      	cmp	r3, #2
10002d1c:	d001      	beq.n	10002d22 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10002d1e:	2301      	movs	r3, #1
10002d20:	e034      	b.n	10002d8c <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10002d22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002d28:	f023 0207 	bic.w	r2, r3, #7
10002d2c:	687b      	ldr	r3, [r7, #4]
10002d2e:	685b      	ldr	r3, [r3, #4]
10002d30:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002d34:	4313      	orrs	r3, r2
10002d36:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10002d38:	e006      	b.n	10002d48 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10002d3a:	2301      	movs	r3, #1
10002d3c:	e026      	b.n	10002d8c <RCC_MPUConfig+0xe4>
      break;
10002d3e:	bf00      	nop
10002d40:	e002      	b.n	10002d48 <RCC_MPUConfig+0xa0>
      break;
10002d42:	bf00      	nop
10002d44:	e000      	b.n	10002d48 <RCC_MPUConfig+0xa0>
      break;
10002d46:	bf00      	nop

  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10002d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d4c:	6a1b      	ldr	r3, [r3, #32]
10002d4e:	f023 0203 	bic.w	r2, r3, #3
10002d52:	687b      	ldr	r3, [r7, #4]
10002d54:	681b      	ldr	r3, [r3, #0]
10002d56:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002d5a:	4313      	orrs	r3, r2
10002d5c:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002d5e:	f7fd ff77 	bl	10000c50 <HAL_GetTick>
10002d62:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10002d64:	e009      	b.n	10002d7a <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002d66:	f7fd ff73 	bl	10000c50 <HAL_GetTick>
10002d6a:	4602      	mov	r2, r0
10002d6c:	68fb      	ldr	r3, [r7, #12]
10002d6e:	1ad3      	subs	r3, r2, r3
10002d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002d74:	d901      	bls.n	10002d7a <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10002d76:	2303      	movs	r3, #3
10002d78:	e008      	b.n	10002d8c <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10002d7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d7e:	6a1b      	ldr	r3, [r3, #32]
10002d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002d88:	d1ed      	bne.n	10002d66 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10002d8a:	2300      	movs	r3, #0
}
10002d8c:	4618      	mov	r0, r3
10002d8e:	3710      	adds	r7, #16
10002d90:	46bd      	mov	sp, r7
10002d92:	bd80      	pop	{r7, pc}

10002d94 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10002d94:	b580      	push	{r7, lr}
10002d96:	b084      	sub	sp, #16
10002d98:	af00      	add	r7, sp, #0
10002d9a:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10002d9c:	687b      	ldr	r3, [r7, #4]
10002d9e:	681b      	ldr	r3, [r3, #0]
10002da0:	2b02      	cmp	r3, #2
10002da2:	d01b      	beq.n	10002ddc <RCC_AXISSConfig+0x48>
10002da4:	2b02      	cmp	r3, #2
10002da6:	d823      	bhi.n	10002df0 <RCC_AXISSConfig+0x5c>
10002da8:	2b00      	cmp	r3, #0
10002daa:	d002      	beq.n	10002db2 <RCC_AXISSConfig+0x1e>
10002dac:	2b01      	cmp	r3, #1
10002dae:	d00a      	beq.n	10002dc6 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10002db0:	e01e      	b.n	10002df0 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002db2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002db6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002dba:	f003 0301 	and.w	r3, r3, #1
10002dbe:	2b01      	cmp	r3, #1
10002dc0:	d018      	beq.n	10002df4 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10002dc2:	2301      	movs	r3, #1
10002dc4:	e079      	b.n	10002eba <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002dca:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002dd6:	d00f      	beq.n	10002df8 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10002dd8:	2301      	movs	r3, #1
10002dda:	e06e      	b.n	10002eba <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002ddc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002de4:	f003 0302 	and.w	r3, r3, #2
10002de8:	2b02      	cmp	r3, #2
10002dea:	d007      	beq.n	10002dfc <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10002dec:	2301      	movs	r3, #1
10002dee:	e064      	b.n	10002eba <RCC_AXISSConfig+0x126>
      break;
10002df0:	bf00      	nop
10002df2:	e004      	b.n	10002dfe <RCC_AXISSConfig+0x6a>
      break;
10002df4:	bf00      	nop
10002df6:	e002      	b.n	10002dfe <RCC_AXISSConfig+0x6a>
      break;
10002df8:	bf00      	nop
10002dfa:	e000      	b.n	10002dfe <RCC_AXISSConfig+0x6a>
      break;
10002dfc:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10002dfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002e04:	f023 0207 	bic.w	r2, r3, #7
10002e08:	687b      	ldr	r3, [r7, #4]
10002e0a:	681b      	ldr	r3, [r3, #0]
10002e0c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002e10:	4313      	orrs	r3, r2
10002e12:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10002e14:	687b      	ldr	r3, [r7, #4]
10002e16:	681b      	ldr	r3, [r3, #0]
10002e18:	2b03      	cmp	r3, #3
10002e1a:	d016      	beq.n	10002e4a <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002e1c:	f7fd ff18 	bl	10000c50 <HAL_GetTick>
10002e20:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002e22:	e009      	b.n	10002e38 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002e24:	f7fd ff14 	bl	10000c50 <HAL_GetTick>
10002e28:	4602      	mov	r2, r0
10002e2a:	68fb      	ldr	r3, [r7, #12]
10002e2c:	1ad3      	subs	r3, r2, r3
10002e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002e32:	d901      	bls.n	10002e38 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10002e34:	2303      	movs	r3, #3
10002e36:	e040      	b.n	10002eba <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002e38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002e46:	d1ed      	bne.n	10002e24 <RCC_AXISSConfig+0x90>
10002e48:	e015      	b.n	10002e76 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002e4a:	f7fd ff01 	bl	10000c50 <HAL_GetTick>
10002e4e:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002e50:	e009      	b.n	10002e66 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002e52:	f7fd fefd 	bl	10000c50 <HAL_GetTick>
10002e56:	4602      	mov	r2, r0
10002e58:	68fb      	ldr	r3, [r7, #12]
10002e5a:	1ad3      	subs	r3, r2, r3
10002e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002e60:	d901      	bls.n	10002e66 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10002e62:	2303      	movs	r3, #3
10002e64:	e029      	b.n	10002eba <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002e66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002e74:	d0ed      	beq.n	10002e52 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10002e76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002e7c:	f023 0207 	bic.w	r2, r3, #7
10002e80:	687b      	ldr	r3, [r7, #4]
10002e82:	685b      	ldr	r3, [r3, #4]
10002e84:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002e88:	4313      	orrs	r3, r2
10002e8a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002e8c:	f7fd fee0 	bl	10000c50 <HAL_GetTick>
10002e90:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002e92:	e009      	b.n	10002ea8 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002e94:	f7fd fedc 	bl	10000c50 <HAL_GetTick>
10002e98:	4602      	mov	r2, r0
10002e9a:	68fb      	ldr	r3, [r7, #12]
10002e9c:	1ad3      	subs	r3, r2, r3
10002e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002ea2:	d901      	bls.n	10002ea8 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10002ea4:	2303      	movs	r3, #3
10002ea6:	e008      	b.n	10002eba <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002ea8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002eae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002eb6:	d1ed      	bne.n	10002e94 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10002eb8:	2300      	movs	r3, #0
}
10002eba:	4618      	mov	r0, r3
10002ebc:	3710      	adds	r7, #16
10002ebe:	46bd      	mov	sp, r7
10002ec0:	bd80      	pop	{r7, pc}
	...

10002ec4 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10002ec4:	b580      	push	{r7, lr}
10002ec6:	b084      	sub	sp, #16
10002ec8:	af00      	add	r7, sp, #0
10002eca:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10002ecc:	687b      	ldr	r3, [r7, #4]
10002ece:	681b      	ldr	r3, [r3, #0]
10002ed0:	2b03      	cmp	r3, #3
10002ed2:	d834      	bhi.n	10002f3e <RCC_MCUConfig+0x7a>
10002ed4:	a201      	add	r2, pc, #4	; (adr r2, 10002edc <RCC_MCUConfig+0x18>)
10002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002eda:	bf00      	nop
10002edc:	10002eed 	.word	0x10002eed
10002ee0:	10002f01 	.word	0x10002f01
10002ee4:	10002f17 	.word	0x10002f17
10002ee8:	10002f2b 	.word	0x10002f2b
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ef0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002ef4:	f003 0301 	and.w	r3, r3, #1
10002ef8:	2b01      	cmp	r3, #1
10002efa:	d022      	beq.n	10002f42 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10002efc:	2301      	movs	r3, #1
10002efe:	e081      	b.n	10003004 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002f00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f04:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002f10:	d019      	beq.n	10002f46 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10002f12:	2301      	movs	r3, #1
10002f14:	e076      	b.n	10003004 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002f16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f1a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002f1e:	f003 0310 	and.w	r3, r3, #16
10002f22:	2b10      	cmp	r3, #16
10002f24:	d011      	beq.n	10002f4a <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10002f26:	2301      	movs	r3, #1
10002f28:	e06c      	b.n	10003004 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002f2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f2e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002f32:	f003 0302 	and.w	r3, r3, #2
10002f36:	2b02      	cmp	r3, #2
10002f38:	d009      	beq.n	10002f4e <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10002f3a:	2301      	movs	r3, #1
10002f3c:	e062      	b.n	10003004 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10002f3e:	bf00      	nop
10002f40:	e006      	b.n	10002f50 <RCC_MCUConfig+0x8c>
      break;
10002f42:	bf00      	nop
10002f44:	e004      	b.n	10002f50 <RCC_MCUConfig+0x8c>
      break;
10002f46:	bf00      	nop
10002f48:	e002      	b.n	10002f50 <RCC_MCUConfig+0x8c>
      break;
10002f4a:	bf00      	nop
10002f4c:	e000      	b.n	10002f50 <RCC_MCUConfig+0x8c>
      break;
10002f4e:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10002f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002f56:	f023 0203 	bic.w	r2, r3, #3
10002f5a:	687b      	ldr	r3, [r7, #4]
10002f5c:	681b      	ldr	r3, [r3, #0]
10002f5e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002f62:	4313      	orrs	r3, r2
10002f64:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002f66:	f7fd fe73 	bl	10000c50 <HAL_GetTick>
10002f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10002f6c:	e009      	b.n	10002f82 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002f6e:	f7fd fe6f 	bl	10000c50 <HAL_GetTick>
10002f72:	4602      	mov	r2, r0
10002f74:	68fb      	ldr	r3, [r7, #12]
10002f76:	1ad3      	subs	r3, r2, r3
10002f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002f7c:	d901      	bls.n	10002f82 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10002f7e:	2303      	movs	r3, #3
10002f80:	e040      	b.n	10003004 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10002f82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002f90:	d1ed      	bne.n	10002f6e <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002f92:	f000 f954 	bl	1000323e <HAL_RCC_GetSystemCoreClockFreq>
10002f96:	4603      	mov	r3, r0
10002f98:	4a1c      	ldr	r2, [pc, #112]	; (1000300c <RCC_MCUConfig+0x148>)
10002f9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002f9c:	4b1c      	ldr	r3, [pc, #112]	; (10003010 <RCC_MCUConfig+0x14c>)
10002f9e:	681b      	ldr	r3, [r3, #0]
10002fa0:	4618      	mov	r0, r3
10002fa2:	f7fd fe0b 	bl	10000bbc <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10002fa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002faa:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002fae:	f023 020f 	bic.w	r2, r3, #15
10002fb2:	687b      	ldr	r3, [r7, #4]
10002fb4:	685b      	ldr	r3, [r3, #4]
10002fb6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002fba:	4313      	orrs	r3, r2
10002fbc:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002fc0:	f7fd fe46 	bl	10000c50 <HAL_GetTick>
10002fc4:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002fc6:	e009      	b.n	10002fdc <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002fc8:	f7fd fe42 	bl	10000c50 <HAL_GetTick>
10002fcc:	4602      	mov	r2, r0
10002fce:	68fb      	ldr	r3, [r7, #12]
10002fd0:	1ad3      	subs	r3, r2, r3
10002fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002fd6:	d901      	bls.n	10002fdc <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10002fd8:	2303      	movs	r3, #3
10002fda:	e013      	b.n	10003004 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002fdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fe0:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002fec:	d1ec      	bne.n	10002fc8 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002fee:	f000 f926 	bl	1000323e <HAL_RCC_GetSystemCoreClockFreq>
10002ff2:	4603      	mov	r3, r0
10002ff4:	4a05      	ldr	r2, [pc, #20]	; (1000300c <RCC_MCUConfig+0x148>)
10002ff6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002ff8:	4b05      	ldr	r3, [pc, #20]	; (10003010 <RCC_MCUConfig+0x14c>)
10002ffa:	681b      	ldr	r3, [r3, #0]
10002ffc:	4618      	mov	r0, r3
10002ffe:	f7fd fddd 	bl	10000bbc <HAL_InitTick>
#endif

  return HAL_OK;
10003002:	2300      	movs	r3, #0
}
10003004:	4618      	mov	r0, r3
10003006:	3710      	adds	r7, #16
10003008:	46bd      	mov	sp, r7
1000300a:	bd80      	pop	{r7, pc}
1000300c:	10020000 	.word	0x10020000
10003010:	10020018 	.word	0x10020018

10003014 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10003014:	b480      	push	{r7}
10003016:	b089      	sub	sp, #36	; 0x24
10003018:	af00      	add	r7, sp, #0
1000301a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
1000301c:	2300      	movs	r3, #0
1000301e:	61bb      	str	r3, [r7, #24]
10003020:	2301      	movs	r3, #1
10003022:	617b      	str	r3, [r7, #20]
10003024:	2300      	movs	r3, #0
10003026:	613b      	str	r3, [r7, #16]
10003028:	2300      	movs	r3, #0
1000302a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
1000302c:	f04f 0300 	mov.w	r3, #0
10003030:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10003032:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003036:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000303a:	f003 0303 	and.w	r3, r3, #3
1000303e:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10003040:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003044:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10003048:	0c1b      	lsrs	r3, r3, #16
1000304a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1000304e:	3301      	adds	r3, #1
10003050:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10003052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003056:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000305a:	0c1b      	lsrs	r3, r3, #16
1000305c:	f003 0301 	and.w	r3, r3, #1
10003060:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10003062:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003066:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000306a:	08db      	lsrs	r3, r3, #3
1000306c:	f3c3 030c 	ubfx	r3, r3, #0, #13
10003070:	693a      	ldr	r2, [r7, #16]
10003072:	fb02 f303 	mul.w	r3, r2, r3
10003076:	ee07 3a90 	vmov	s15, r3
1000307a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000307e:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x1FFF));  //Intermediary value
10003082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003086:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000308a:	f3c3 0308 	ubfx	r3, r3, #0, #9
1000308e:	3301      	adds	r3, #1
10003090:	ee07 3a90 	vmov	s15, r3
10003094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003098:	edd7 6a02 	vldr	s13, [r7, #8]
1000309c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 100031f8 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
100030a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
100030a4:	ee77 7a27 	vadd.f32	s15, s14, s15
100030a8:	edc7 7a07 	vstr	s15, [r7, #28]
100030ac:	69bb      	ldr	r3, [r7, #24]
100030ae:	2b03      	cmp	r3, #3
100030b0:	d85b      	bhi.n	1000316a <HAL_RCC_GetPLL3ClockFreq+0x156>
100030b2:	a201      	add	r2, pc, #4	; (adr r2, 100030b8 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
100030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100030b8:	100030c9 	.word	0x100030c9
100030bc:	10003127 	.word	0x10003127
100030c0:	10003145 	.word	0x10003145
100030c4:	10003163 	.word	0x10003163
  switch (pllsource)
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100030c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030cc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100030d0:	f003 0304 	and.w	r3, r3, #4
100030d4:	2b04      	cmp	r3, #4
100030d6:	d117      	bne.n	10003108 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100030d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030dc:	699b      	ldr	r3, [r3, #24]
100030de:	f003 0303 	and.w	r3, r3, #3
100030e2:	4a46      	ldr	r2, [pc, #280]	; (100031fc <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100030e4:	fa22 f303 	lsr.w	r3, r2, r3
100030e8:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
100030ea:	68fa      	ldr	r2, [r7, #12]
100030ec:	697b      	ldr	r3, [r7, #20]
100030ee:	fbb2 f3f3 	udiv	r3, r2, r3
100030f2:	ee07 3a90 	vmov	s15, r3
100030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
100030fa:	ed97 7a07 	vldr	s14, [r7, #28]
100030fe:	ee67 7a27 	vmul.f32	s15, s14, s15
10003102:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10003106:	e030      	b.n	1000316a <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10003108:	4a3c      	ldr	r2, [pc, #240]	; (100031fc <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000310a:	697b      	ldr	r3, [r7, #20]
1000310c:	fbb2 f3f3 	udiv	r3, r2, r3
10003110:	ee07 3a90 	vmov	s15, r3
10003114:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003118:	ed97 7a07 	vldr	s14, [r7, #28]
1000311c:	ee67 7a27 	vmul.f32	s15, s14, s15
10003120:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10003124:	e021      	b.n	1000316a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10003126:	4a36      	ldr	r2, [pc, #216]	; (10003200 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10003128:	697b      	ldr	r3, [r7, #20]
1000312a:	fbb2 f3f3 	udiv	r3, r2, r3
1000312e:	ee07 3a90 	vmov	s15, r3
10003132:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003136:	ed97 7a07 	vldr	s14, [r7, #28]
1000313a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000313e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10003142:	e012      	b.n	1000316a <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10003144:	4a2f      	ldr	r2, [pc, #188]	; (10003204 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10003146:	697b      	ldr	r3, [r7, #20]
10003148:	fbb2 f3f3 	udiv	r3, r2, r3
1000314c:	ee07 3a90 	vmov	s15, r3
10003150:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003154:	ed97 7a07 	vldr	s14, [r7, #28]
10003158:	ee67 7a27 	vmul.f32	s15, s14, s15
1000315c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10003160:	e003      	b.n	1000316a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10003162:	f04f 0300 	mov.w	r3, #0
10003166:	61fb      	str	r3, [r7, #28]
      break;
10003168:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
1000316a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000316e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10003172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10003176:	3301      	adds	r3, #1
10003178:	ee07 3a90 	vmov	s15, r3
1000317c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003180:	edd7 6a07 	vldr	s13, [r7, #28]
10003184:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000318c:	ee17 2a90 	vmov	r2, s15
10003190:	687b      	ldr	r3, [r7, #4]
10003192:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10003194:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003198:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000319c:	0a1b      	lsrs	r3, r3, #8
1000319e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100031a2:	3301      	adds	r3, #1
100031a4:	ee07 3a90 	vmov	s15, r3
100031a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100031ac:	edd7 6a07 	vldr	s13, [r7, #28]
100031b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
100031b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100031b8:	ee17 2a90 	vmov	r2, s15
100031bc:	687b      	ldr	r3, [r7, #4]
100031be:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
100031c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100031c4:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100031c8:	0c1b      	lsrs	r3, r3, #16
100031ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100031ce:	3301      	adds	r3, #1
100031d0:	ee07 3a90 	vmov	s15, r3
100031d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100031d8:	edd7 6a07 	vldr	s13, [r7, #28]
100031dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
100031e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100031e4:	ee17 2a90 	vmov	r2, s15
100031e8:	687b      	ldr	r3, [r7, #4]
100031ea:	609a      	str	r2, [r3, #8]
}
100031ec:	bf00      	nop
100031ee:	3724      	adds	r7, #36	; 0x24
100031f0:	46bd      	mov	sp, r7
100031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100031f6:	4770      	bx	lr
100031f8:	45fff800 	.word	0x45fff800
100031fc:	03d09000 	.word	0x03d09000
10003200:	016e3600 	.word	0x016e3600
10003204:	003d0900 	.word	0x003d0900

10003208 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10003208:	b580      	push	{r7, lr}
1000320a:	b082      	sub	sp, #8
1000320c:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
1000320e:	2300      	movs	r3, #0
10003210:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10003212:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003216:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
1000321a:	f003 030f 	and.w	r3, r3, #15
1000321e:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10003220:	687b      	ldr	r3, [r7, #4]
10003222:	2b09      	cmp	r3, #9
10003224:	d901      	bls.n	1000322a <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10003226:	2309      	movs	r3, #9
10003228:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
1000322a:	f000 f80f 	bl	1000324c <HAL_RCC_GetMCUSSFreq>
1000322e:	4602      	mov	r2, r0
10003230:	687b      	ldr	r3, [r7, #4]
10003232:	fa22 f303 	lsr.w	r3, r2, r3
}
10003236:	4618      	mov	r0, r3
10003238:	3708      	adds	r7, #8
1000323a:	46bd      	mov	sp, r7
1000323c:	bd80      	pop	{r7, pc}

1000323e <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
1000323e:	b580      	push	{r7, lr}
10003240:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10003242:	f7ff ffe1 	bl	10003208 <HAL_RCC_GetMCUFreq>
10003246:	4603      	mov	r3, r0
#endif
}
10003248:	4618      	mov	r0, r3
1000324a:	bd80      	pop	{r7, pc}

1000324c <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
1000324c:	b580      	push	{r7, lr}
1000324e:	b084      	sub	sp, #16
10003250:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10003252:	2300      	movs	r3, #0
10003254:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10003256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000325a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000325c:	f003 0303 	and.w	r3, r3, #3
10003260:	2b03      	cmp	r3, #3
10003262:	d822      	bhi.n	100032aa <HAL_RCC_GetMCUSSFreq+0x5e>
10003264:	a201      	add	r2, pc, #4	; (adr r2, 1000326c <HAL_RCC_GetMCUSSFreq+0x20>)
10003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000326a:	bf00      	nop
1000326c:	1000328b 	.word	0x1000328b
10003270:	1000329f 	.word	0x1000329f
10003274:	100032a5 	.word	0x100032a5
10003278:	1000327d 	.word	0x1000327d
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000327c:	463b      	mov	r3, r7
1000327e:	4618      	mov	r0, r3
10003280:	f7ff fec8 	bl	10003014 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10003284:	683b      	ldr	r3, [r7, #0]
10003286:	60fb      	str	r3, [r7, #12]
      break;
10003288:	e00f      	b.n	100032aa <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000328a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000328e:	699b      	ldr	r3, [r3, #24]
10003290:	f003 0303 	and.w	r3, r3, #3
10003294:	4a07      	ldr	r2, [pc, #28]	; (100032b4 <HAL_RCC_GetMCUSSFreq+0x68>)
10003296:	fa22 f303 	lsr.w	r3, r2, r3
1000329a:	60fb      	str	r3, [r7, #12]

      break;
1000329c:	e005      	b.n	100032aa <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
1000329e:	4b06      	ldr	r3, [pc, #24]	; (100032b8 <HAL_RCC_GetMCUSSFreq+0x6c>)
100032a0:	60fb      	str	r3, [r7, #12]
      break;
100032a2:	e002      	b.n	100032aa <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
100032a4:	4b05      	ldr	r3, [pc, #20]	; (100032bc <HAL_RCC_GetMCUSSFreq+0x70>)
100032a6:	60fb      	str	r3, [r7, #12]
      break;
100032a8:	bf00      	nop
  }

  return mcussfreq;
100032aa:	68fb      	ldr	r3, [r7, #12]
}
100032ac:	4618      	mov	r0, r3
100032ae:	3710      	adds	r7, #16
100032b0:	46bd      	mov	sp, r7
100032b2:	bd80      	pop	{r7, pc}
100032b4:	03d09000 	.word	0x03d09000
100032b8:	016e3600 	.word	0x016e3600
100032bc:	003d0900 	.word	0x003d0900

100032c0 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
100032c0:	b580      	push	{r7, lr}
100032c2:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
100032c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032c8:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
100032cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
100032d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
100032d4:	d107      	bne.n	100032e6 <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
100032d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
100032de:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
100032e2:	f000 f802 	bl	100032ea <HAL_RCC_WAKEUP_Callback>
  }
}
100032e6:	bf00      	nop
100032e8:	bd80      	pop	{r7, pc}

100032ea <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
100032ea:	b480      	push	{r7}
100032ec:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
100032ee:	bf00      	nop
100032f0:	46bd      	mov	sp, r7
100032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100032f6:	4770      	bx	lr

100032f8 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100032f8:	b580      	push	{r7, lr}
100032fa:	b084      	sub	sp, #16
100032fc:	af00      	add	r7, sp, #0
100032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10003300:	687b      	ldr	r3, [r7, #4]
10003302:	681b      	ldr	r3, [r3, #0]
10003304:	2b00      	cmp	r3, #0
10003306:	f000 8171 	beq.w	100035ec <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
1000330a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003310:	f003 0307 	and.w	r3, r3, #7
10003314:	2b02      	cmp	r3, #2
10003316:	d108      	bne.n	1000332a <RCCEx_PLL2_Config+0x32>
10003318:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000331e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003326:	f000 815f 	beq.w	100035e8 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
1000332a:	687b      	ldr	r3, [r7, #4]
1000332c:	681b      	ldr	r3, [r3, #0]
1000332e:	2b02      	cmp	r3, #2
10003330:	f040 8130 	bne.w	10003594 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10003334:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000333a:	f003 0303 	and.w	r3, r3, #3
1000333e:	2b00      	cmp	r3, #0
10003340:	d008      	beq.n	10003354 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10003342:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003348:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
1000334c:	2b01      	cmp	r3, #1
1000334e:	d001      	beq.n	10003354 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10003350:	2301      	movs	r3, #1
10003352:	e14c      	b.n	100035ee <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003354:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000335c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003364:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10003368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000336c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003370:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003374:	f023 0301 	bic.w	r3, r3, #1
10003378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000337c:	f7fd fc68 	bl	10000c50 <HAL_GetTick>
10003380:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003382:	e008      	b.n	10003396 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003384:	f7fd fc64 	bl	10000c50 <HAL_GetTick>
10003388:	4602      	mov	r2, r0
1000338a:	68fb      	ldr	r3, [r7, #12]
1000338c:	1ad3      	subs	r3, r2, r3
1000338e:	2b64      	cmp	r3, #100	; 0x64
10003390:	d901      	bls.n	10003396 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10003392:	2303      	movs	r3, #3
10003394:	e12b      	b.n	100035ee <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000339e:	f003 0302 	and.w	r3, r3, #2
100033a2:	2b02      	cmp	r3, #2
100033a4:	d0ee      	beq.n	10003384 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
100033a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033aa:	6a1b      	ldr	r3, [r3, #32]
100033ac:	f003 0303 	and.w	r3, r3, #3
100033b0:	2b02      	cmp	r3, #2
100033b2:	d107      	bne.n	100033c4 <RCCEx_PLL2_Config+0xcc>
100033b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033b8:	6a1b      	ldr	r3, [r3, #32]
100033ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100033be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100033c2:	d00e      	beq.n	100033e2 <RCCEx_PLL2_Config+0xea>
100033c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033c8:	6a1b      	ldr	r3, [r3, #32]
100033ca:	f003 0303 	and.w	r3, r3, #3
100033ce:	2b03      	cmp	r3, #3
100033d0:	d112      	bne.n	100033f8 <RCCEx_PLL2_Config+0x100>
100033d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033d6:	6a1b      	ldr	r3, [r3, #32]
100033d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100033dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100033e0:	d10a      	bne.n	100033f8 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100033e2:	687b      	ldr	r3, [r7, #4]
100033e4:	685a      	ldr	r2, [r3, #4]
100033e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100033ec:	f003 0303 	and.w	r3, r3, #3
100033f0:	429a      	cmp	r2, r3
100033f2:	d00c      	beq.n	1000340e <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
100033f4:	2301      	movs	r3, #1
100033f6:	e0fa      	b.n	100035ee <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100033f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100033fe:	f023 0203 	bic.w	r2, r3, #3
10003402:	687b      	ldr	r3, [r7, #4]
10003404:	685b      	ldr	r3, [r3, #4]
10003406:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000340a:	4313      	orrs	r3, r2
1000340c:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
1000340e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003412:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10003416:	4b78      	ldr	r3, [pc, #480]	; (100035f8 <RCCEx_PLL2_Config+0x300>)
10003418:	4013      	ands	r3, r2
1000341a:	687a      	ldr	r2, [r7, #4]
1000341c:	68d2      	ldr	r2, [r2, #12]
1000341e:	1e51      	subs	r1, r2, #1
10003420:	687a      	ldr	r2, [r7, #4]
10003422:	6892      	ldr	r2, [r2, #8]
10003424:	3a01      	subs	r2, #1
10003426:	0412      	lsls	r2, r2, #16
10003428:	430a      	orrs	r2, r1
1000342a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000342e:	4313      	orrs	r3, r2
10003430:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10003434:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1000343c:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10003440:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10003444:	687a      	ldr	r2, [r7, #4]
10003446:	6912      	ldr	r2, [r2, #16]
10003448:	1e51      	subs	r1, r2, #1
1000344a:	687a      	ldr	r2, [r7, #4]
1000344c:	6952      	ldr	r2, [r2, #20]
1000344e:	3a01      	subs	r2, #1
10003450:	0212      	lsls	r2, r2, #8
10003452:	4311      	orrs	r1, r2
10003454:	687a      	ldr	r2, [r7, #4]
10003456:	6992      	ldr	r2, [r2, #24]
10003458:	3a01      	subs	r2, #1
1000345a:	0412      	lsls	r2, r2, #16
1000345c:	430a      	orrs	r2, r1
1000345e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003462:	4313      	orrs	r3, r2
10003464:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10003468:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000346c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10003470:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10003478:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
1000347c:	687b      	ldr	r3, [r7, #4]
1000347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003480:	2b02      	cmp	r3, #2
10003482:	d003      	beq.n	1000348c <RCCEx_PLL2_Config+0x194>
10003484:	687b      	ldr	r3, [r7, #4]
10003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003488:	2b00      	cmp	r3, #0
1000348a:	d10c      	bne.n	100034a6 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
1000348c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10003494:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003498:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000349c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100034a0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
100034a4:	e00f      	b.n	100034c6 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
100034a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100034ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100034b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100034b6:	687a      	ldr	r2, [r7, #4]
100034b8:	6a12      	ldr	r2, [r2, #32]
100034ba:	00d2      	lsls	r2, r2, #3
100034bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100034c0:	4313      	orrs	r3, r2
100034c2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
100034c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100034ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100034d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100034d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100034da:	687b      	ldr	r3, [r7, #4]
100034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100034de:	2b02      	cmp	r3, #2
100034e0:	d124      	bne.n	1000352c <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
100034e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
100034ea:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100034ee:	687b      	ldr	r3, [r7, #4]
100034f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
100034f2:	687b      	ldr	r3, [r7, #4]
100034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100034f6:	4319      	orrs	r1, r3
100034f8:	687b      	ldr	r3, [r7, #4]
100034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100034fc:	4319      	orrs	r1, r3
100034fe:	687b      	ldr	r3, [r7, #4]
10003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003502:	4319      	orrs	r1, r3
10003504:	687b      	ldr	r3, [r7, #4]
10003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003508:	041b      	lsls	r3, r3, #16
1000350a:	430b      	orrs	r3, r1
1000350c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003510:	4313      	orrs	r3, r2
10003512:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10003516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000351a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000351e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003522:	f043 0304 	orr.w	r3, r3, #4
10003526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
1000352a:	e009      	b.n	10003540 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
1000352c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003534:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003538:	f023 0304 	bic.w	r3, r3, #4
1000353c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10003540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003548:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000354c:	f043 0301 	orr.w	r3, r3, #1
10003550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003554:	f7fd fb7c 	bl	10000c50 <HAL_GetTick>
10003558:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000355a:	e008      	b.n	1000356e <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000355c:	f7fd fb78 	bl	10000c50 <HAL_GetTick>
10003560:	4602      	mov	r2, r0
10003562:	68fb      	ldr	r3, [r7, #12]
10003564:	1ad3      	subs	r3, r2, r3
10003566:	2b64      	cmp	r3, #100	; 0x64
10003568:	d901      	bls.n	1000356e <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
1000356a:	2303      	movs	r3, #3
1000356c:	e03f      	b.n	100035ee <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000356e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003576:	f003 0302 	and.w	r3, r3, #2
1000357a:	2b02      	cmp	r3, #2
1000357c:	d1ee      	bne.n	1000355c <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000357e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003586:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000358a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000358e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10003592:	e02b      	b.n	100035ec <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003594:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000359c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100035a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100035a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
100035a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100035b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100035b4:	f023 0301 	bic.w	r3, r3, #1
100035b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100035bc:	f7fd fb48 	bl	10000c50 <HAL_GetTick>
100035c0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100035c2:	e008      	b.n	100035d6 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100035c4:	f7fd fb44 	bl	10000c50 <HAL_GetTick>
100035c8:	4602      	mov	r2, r0
100035ca:	68fb      	ldr	r3, [r7, #12]
100035cc:	1ad3      	subs	r3, r2, r3
100035ce:	2b64      	cmp	r3, #100	; 0x64
100035d0:	d901      	bls.n	100035d6 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
100035d2:	2303      	movs	r3, #3
100035d4:	e00b      	b.n	100035ee <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100035d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100035de:	f003 0302 	and.w	r3, r3, #2
100035e2:	2b02      	cmp	r3, #2
100035e4:	d0ee      	beq.n	100035c4 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100035e6:	e001      	b.n	100035ec <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100035e8:	2301      	movs	r3, #1
100035ea:	e000      	b.n	100035ee <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
100035ec:	2300      	movs	r3, #0

}
100035ee:	4618      	mov	r0, r3
100035f0:	3710      	adds	r7, #16
100035f2:	46bd      	mov	sp, r7
100035f4:	bd80      	pop	{r7, pc}
100035f6:	bf00      	nop
100035f8:	ffc0fe00 	.word	0xffc0fe00

100035fc <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100035fc:	b580      	push	{r7, lr}
100035fe:	b084      	sub	sp, #16
10003600:	af00      	add	r7, sp, #0
10003602:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10003604:	687b      	ldr	r3, [r7, #4]
10003606:	681b      	ldr	r3, [r3, #0]
10003608:	2b00      	cmp	r3, #0
1000360a:	f000 815a 	beq.w	100038c2 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
1000360e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003614:	f003 0303 	and.w	r3, r3, #3
10003618:	2b03      	cmp	r3, #3
1000361a:	d108      	bne.n	1000362e <RCCEx_PLL3_Config+0x32>
1000361c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000362a:	f000 8148 	beq.w	100038be <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
1000362e:	687b      	ldr	r3, [r7, #4]
10003630:	681b      	ldr	r3, [r3, #0]
10003632:	2b02      	cmp	r3, #2
10003634:	f040 8119 	bne.w	1000386a <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003638:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000363c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003640:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003648:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
1000364c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003650:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003654:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003658:	f023 0301 	bic.w	r3, r3, #1
1000365c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003660:	f7fd faf6 	bl	10000c50 <HAL_GetTick>
10003664:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003666:	e008      	b.n	1000367a <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003668:	f7fd faf2 	bl	10000c50 <HAL_GetTick>
1000366c:	4602      	mov	r2, r0
1000366e:	68fb      	ldr	r3, [r7, #12]
10003670:	1ad3      	subs	r3, r2, r3
10003672:	2b64      	cmp	r3, #100	; 0x64
10003674:	d901      	bls.n	1000367a <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10003676:	2303      	movs	r3, #3
10003678:	e124      	b.n	100038c4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000367a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000367e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003682:	f003 0302 	and.w	r3, r3, #2
10003686:	2b02      	cmp	r3, #2
10003688:	d0ee      	beq.n	10003668 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
1000368a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000368e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10003692:	f023 0203 	bic.w	r2, r3, #3
10003696:	687b      	ldr	r3, [r7, #4]
10003698:	685b      	ldr	r3, [r3, #4]
1000369a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000369e:	4313      	orrs	r3, r2
100036a0:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100036a4:	e008      	b.n	100036b8 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100036a6:	f7fd fad3 	bl	10000c50 <HAL_GetTick>
100036aa:	4602      	mov	r2, r0
100036ac:	68fb      	ldr	r3, [r7, #12]
100036ae:	1ad3      	subs	r3, r2, r3
100036b0:	2b64      	cmp	r3, #100	; 0x64
100036b2:	d901      	bls.n	100036b8 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
100036b4:	2303      	movs	r3, #3
100036b6:	e105      	b.n	100038c4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100036b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036bc:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100036c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100036c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100036c8:	d1ed      	bne.n	100036a6 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
100036ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036ce:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100036d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
100036d6:	687b      	ldr	r3, [r7, #4]
100036d8:	69db      	ldr	r3, [r3, #28]
100036da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100036de:	4313      	orrs	r3, r2
100036e0:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
100036e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036e8:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
100036ec:	4b77      	ldr	r3, [pc, #476]	; (100038cc <RCCEx_PLL3_Config+0x2d0>)
100036ee:	4013      	ands	r3, r2
100036f0:	687a      	ldr	r2, [r7, #4]
100036f2:	68d2      	ldr	r2, [r2, #12]
100036f4:	1e51      	subs	r1, r2, #1
100036f6:	687a      	ldr	r2, [r7, #4]
100036f8:	6892      	ldr	r2, [r2, #8]
100036fa:	3a01      	subs	r2, #1
100036fc:	0412      	lsls	r2, r2, #16
100036fe:	430a      	orrs	r2, r1
10003700:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003704:	4313      	orrs	r3, r2
10003706:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
1000370a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000370e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10003712:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10003716:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000371a:	687a      	ldr	r2, [r7, #4]
1000371c:	6912      	ldr	r2, [r2, #16]
1000371e:	1e51      	subs	r1, r2, #1
10003720:	687a      	ldr	r2, [r7, #4]
10003722:	6952      	ldr	r2, [r2, #20]
10003724:	3a01      	subs	r2, #1
10003726:	0212      	lsls	r2, r2, #8
10003728:	4311      	orrs	r1, r2
1000372a:	687a      	ldr	r2, [r7, #4]
1000372c:	6992      	ldr	r2, [r2, #24]
1000372e:	3a01      	subs	r2, #1
10003730:	0412      	lsls	r2, r2, #16
10003732:	430a      	orrs	r2, r1
10003734:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003738:	4313      	orrs	r3, r2
1000373a:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
1000373e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003742:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10003746:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000374a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000374e:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10003752:	687b      	ldr	r3, [r7, #4]
10003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003756:	2b02      	cmp	r3, #2
10003758:	d003      	beq.n	10003762 <RCCEx_PLL3_Config+0x166>
1000375a:	687b      	ldr	r3, [r7, #4]
1000375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000375e:	2b00      	cmp	r3, #0
10003760:	d10c      	bne.n	1000377c <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10003762:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003766:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000376a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003772:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003776:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
1000377a:	e00f      	b.n	1000379c <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
1000377c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003780:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10003784:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003788:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000378c:	687a      	ldr	r2, [r7, #4]
1000378e:	6a12      	ldr	r2, [r2, #32]
10003790:	00d2      	lsls	r2, r2, #3
10003792:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003796:	4313      	orrs	r3, r2
10003798:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
1000379c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037a0:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100037a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100037ac:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100037b0:	687b      	ldr	r3, [r7, #4]
100037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100037b4:	2b02      	cmp	r3, #2
100037b6:	d124      	bne.n	10003802 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
100037b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037bc:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
100037c0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100037c4:	687b      	ldr	r3, [r7, #4]
100037c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
100037c8:	687b      	ldr	r3, [r7, #4]
100037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100037cc:	4319      	orrs	r1, r3
100037ce:	687b      	ldr	r3, [r7, #4]
100037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100037d2:	4319      	orrs	r1, r3
100037d4:	687b      	ldr	r3, [r7, #4]
100037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100037d8:	4319      	orrs	r1, r3
100037da:	687b      	ldr	r3, [r7, #4]
100037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100037de:	041b      	lsls	r3, r3, #16
100037e0:	430b      	orrs	r3, r1
100037e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100037e6:	4313      	orrs	r3, r2
100037e8:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
100037ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037f0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100037f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037f8:	f043 0304 	orr.w	r3, r3, #4
100037fc:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10003800:	e009      	b.n	10003816 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10003802:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003806:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000380a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000380e:	f023 0304 	bic.w	r3, r3, #4
10003812:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10003816:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000381a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000381e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003822:	f043 0301 	orr.w	r3, r3, #1
10003826:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000382a:	f7fd fa11 	bl	10000c50 <HAL_GetTick>
1000382e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003830:	e008      	b.n	10003844 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003832:	f7fd fa0d 	bl	10000c50 <HAL_GetTick>
10003836:	4602      	mov	r2, r0
10003838:	68fb      	ldr	r3, [r7, #12]
1000383a:	1ad3      	subs	r3, r2, r3
1000383c:	2b64      	cmp	r3, #100	; 0x64
1000383e:	d901      	bls.n	10003844 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10003840:	2303      	movs	r3, #3
10003842:	e03f      	b.n	100038c4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003844:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003848:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000384c:	f003 0302 	and.w	r3, r3, #2
10003850:	2b02      	cmp	r3, #2
10003852:	d1ee      	bne.n	10003832 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003854:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003858:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000385c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003860:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10003864:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10003868:	e02b      	b.n	100038c2 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000386a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000386e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003872:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000387a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
1000387e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003882:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000388a:	f023 0301 	bic.w	r3, r3, #1
1000388e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003892:	f7fd f9dd 	bl	10000c50 <HAL_GetTick>
10003896:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003898:	e008      	b.n	100038ac <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000389a:	f7fd f9d9 	bl	10000c50 <HAL_GetTick>
1000389e:	4602      	mov	r2, r0
100038a0:	68fb      	ldr	r3, [r7, #12]
100038a2:	1ad3      	subs	r3, r2, r3
100038a4:	2b64      	cmp	r3, #100	; 0x64
100038a6:	d901      	bls.n	100038ac <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
100038a8:	2303      	movs	r3, #3
100038aa:	e00b      	b.n	100038c4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100038ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038b0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100038b4:	f003 0302 	and.w	r3, r3, #2
100038b8:	2b02      	cmp	r3, #2
100038ba:	d0ee      	beq.n	1000389a <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
100038bc:	e001      	b.n	100038c2 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100038be:	2301      	movs	r3, #1
100038c0:	e000      	b.n	100038c4 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
100038c2:	2300      	movs	r3, #0
}
100038c4:	4618      	mov	r0, r3
100038c6:	3710      	adds	r7, #16
100038c8:	46bd      	mov	sp, r7
100038ca:	bd80      	pop	{r7, pc}
100038cc:	ffc0fe00 	.word	0xffc0fe00

100038d0 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
100038d0:	b580      	push	{r7, lr}
100038d2:	b084      	sub	sp, #16
100038d4:	af00      	add	r7, sp, #0
100038d6:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
100038d8:	687b      	ldr	r3, [r7, #4]
100038da:	681b      	ldr	r3, [r3, #0]
100038dc:	2b00      	cmp	r3, #0
100038de:	f000 8147 	beq.w	10003b70 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100038e2:	687b      	ldr	r3, [r7, #4]
100038e4:	681b      	ldr	r3, [r3, #0]
100038e6:	2b02      	cmp	r3, #2
100038e8:	f040 8119 	bne.w	10003b1e <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100038ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038f0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100038f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100038f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100038fc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10003900:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003904:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003908:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000390c:	f023 0301 	bic.w	r3, r3, #1
10003910:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003914:	f7fd f99c 	bl	10000c50 <HAL_GetTick>
10003918:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000391a:	e008      	b.n	1000392e <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000391c:	f7fd f998 	bl	10000c50 <HAL_GetTick>
10003920:	4602      	mov	r2, r0
10003922:	68fb      	ldr	r3, [r7, #12]
10003924:	1ad3      	subs	r3, r2, r3
10003926:	2b64      	cmp	r3, #100	; 0x64
10003928:	d901      	bls.n	1000392e <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
1000392a:	2303      	movs	r3, #3
1000392c:	e121      	b.n	10003b72 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000392e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003932:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003936:	f003 0302 	and.w	r3, r3, #2
1000393a:	2b02      	cmp	r3, #2
1000393c:	d0ee      	beq.n	1000391c <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
1000393e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003942:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003946:	f023 0203 	bic.w	r2, r3, #3
1000394a:	687b      	ldr	r3, [r7, #4]
1000394c:	685b      	ldr	r3, [r3, #4]
1000394e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003952:	4313      	orrs	r3, r2
10003954:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10003958:	e008      	b.n	1000396c <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000395a:	f7fd f979 	bl	10000c50 <HAL_GetTick>
1000395e:	4602      	mov	r2, r0
10003960:	68fb      	ldr	r3, [r7, #12]
10003962:	1ad3      	subs	r3, r2, r3
10003964:	2b64      	cmp	r3, #100	; 0x64
10003966:	d901      	bls.n	1000396c <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10003968:	2303      	movs	r3, #3
1000396a:	e102      	b.n	10003b72 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
1000396c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003970:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000397c:	d1ed      	bne.n	1000395a <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
1000397e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003982:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10003986:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000398a:	687b      	ldr	r3, [r7, #4]
1000398c:	69db      	ldr	r3, [r3, #28]
1000398e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003992:	4313      	orrs	r3, r2
10003994:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10003998:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000399c:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
100039a0:	4b76      	ldr	r3, [pc, #472]	; (10003b7c <RCCEx_PLL4_Config+0x2ac>)
100039a2:	4013      	ands	r3, r2
100039a4:	687a      	ldr	r2, [r7, #4]
100039a6:	68d2      	ldr	r2, [r2, #12]
100039a8:	1e51      	subs	r1, r2, #1
100039aa:	687a      	ldr	r2, [r7, #4]
100039ac:	6892      	ldr	r2, [r2, #8]
100039ae:	3a01      	subs	r2, #1
100039b0:	0412      	lsls	r2, r2, #16
100039b2:	430a      	orrs	r2, r1
100039b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100039b8:	4313      	orrs	r3, r2
100039ba:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
100039be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039c2:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100039c6:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100039ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100039ce:	687a      	ldr	r2, [r7, #4]
100039d0:	6912      	ldr	r2, [r2, #16]
100039d2:	1e51      	subs	r1, r2, #1
100039d4:	687a      	ldr	r2, [r7, #4]
100039d6:	6952      	ldr	r2, [r2, #20]
100039d8:	3a01      	subs	r2, #1
100039da:	0212      	lsls	r2, r2, #8
100039dc:	4311      	orrs	r1, r2
100039de:	687a      	ldr	r2, [r7, #4]
100039e0:	6992      	ldr	r2, [r2, #24]
100039e2:	3a01      	subs	r2, #1
100039e4:	0412      	lsls	r2, r2, #16
100039e6:	430a      	orrs	r2, r1
100039e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100039ec:	4313      	orrs	r3, r2
100039ee:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
100039f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039f6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100039fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10003a02:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10003a06:	687b      	ldr	r3, [r7, #4]
10003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003a0a:	2b02      	cmp	r3, #2
10003a0c:	d003      	beq.n	10003a16 <RCCEx_PLL4_Config+0x146>
10003a0e:	687b      	ldr	r3, [r7, #4]
10003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003a12:	2b00      	cmp	r3, #0
10003a14:	d10c      	bne.n	10003a30 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10003a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a1a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003a1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003a26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003a2a:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10003a2e:	e00f      	b.n	10003a50 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10003a30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a34:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003a38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003a3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003a40:	687a      	ldr	r2, [r7, #4]
10003a42:	6a12      	ldr	r2, [r2, #32]
10003a44:	00d2      	lsls	r2, r2, #3
10003a46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003a4a:	4313      	orrs	r3, r2
10003a4c:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10003a50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a54:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003a58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10003a60:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003a64:	687b      	ldr	r3, [r7, #4]
10003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003a68:	2b02      	cmp	r3, #2
10003a6a:	d124      	bne.n	10003ab6 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10003a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a70:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10003a74:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10003a78:	687b      	ldr	r3, [r7, #4]
10003a7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
10003a7c:	687b      	ldr	r3, [r7, #4]
10003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10003a80:	4319      	orrs	r1, r3
10003a82:	687b      	ldr	r3, [r7, #4]
10003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10003a86:	4319      	orrs	r1, r3
10003a88:	687b      	ldr	r3, [r7, #4]
10003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003a8c:	4319      	orrs	r1, r3
10003a8e:	687b      	ldr	r3, [r7, #4]
10003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003a92:	041b      	lsls	r3, r3, #16
10003a94:	430b      	orrs	r3, r1
10003a96:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003a9a:	4313      	orrs	r3, r2
10003a9c:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10003aa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003aa4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003aa8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003aac:	f043 0304 	orr.w	r3, r3, #4
10003ab0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10003ab4:	e009      	b.n	10003aca <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10003ab6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003aba:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003abe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ac2:	f023 0304 	bic.w	r3, r3, #4
10003ac6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10003aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ace:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003ad2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ad6:	f043 0301 	orr.w	r3, r3, #1
10003ada:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003ade:	f7fd f8b7 	bl	10000c50 <HAL_GetTick>
10003ae2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003ae4:	e008      	b.n	10003af8 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003ae6:	f7fd f8b3 	bl	10000c50 <HAL_GetTick>
10003aea:	4602      	mov	r2, r0
10003aec:	68fb      	ldr	r3, [r7, #12]
10003aee:	1ad3      	subs	r3, r2, r3
10003af0:	2b64      	cmp	r3, #100	; 0x64
10003af2:	d901      	bls.n	10003af8 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10003af4:	2303      	movs	r3, #3
10003af6:	e03c      	b.n	10003b72 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003af8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003afc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003b00:	f003 0302 	and.w	r3, r3, #2
10003b04:	2b02      	cmp	r3, #2
10003b06:	d1ee      	bne.n	10003ae6 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003b08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b0c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003b10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b14:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10003b18:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10003b1c:	e028      	b.n	10003b70 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003b1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b22:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003b26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003b2e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10003b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b36:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003b3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b3e:	f023 0301 	bic.w	r3, r3, #1
10003b42:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003b46:	f7fd f883 	bl	10000c50 <HAL_GetTick>
10003b4a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003b4c:	e008      	b.n	10003b60 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003b4e:	f7fd f87f 	bl	10000c50 <HAL_GetTick>
10003b52:	4602      	mov	r2, r0
10003b54:	68fb      	ldr	r3, [r7, #12]
10003b56:	1ad3      	subs	r3, r2, r3
10003b58:	2b64      	cmp	r3, #100	; 0x64
10003b5a:	d901      	bls.n	10003b60 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10003b5c:	2303      	movs	r3, #3
10003b5e:	e008      	b.n	10003b72 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003b60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b64:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003b68:	f003 0302 	and.w	r3, r3, #2
10003b6c:	2b02      	cmp	r3, #2
10003b6e:	d0ee      	beq.n	10003b4e <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10003b70:	2300      	movs	r3, #0
}
10003b72:	4618      	mov	r0, r3
10003b74:	3710      	adds	r7, #16
10003b76:	46bd      	mov	sp, r7
10003b78:	bd80      	pop	{r7, pc}
10003b7a:	bf00      	nop
10003b7c:	ffc0fe00 	.word	0xffc0fe00

10003b80 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10003b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10003b84:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
10003b88:	af00      	add	r7, sp, #0
10003b8a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003b8e:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10003b90:	2300      	movs	r3, #0
10003b92:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
10003b96:	2300      	movs	r3, #0
10003b98:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10003b9c:	2300      	movs	r3, #0
10003b9e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10003ba2:	2300      	movs	r3, #0
10003ba4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10003ba8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003bac:	681b      	ldr	r3, [r3, #0]
10003bae:	e9d3 0100 	ldrd	r0, r1, [r3]
10003bb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
10003bb6:	f04f 0300 	mov.w	r3, #0
10003bba:	ea00 0402 	and.w	r4, r0, r2
10003bbe:	ea01 0503 	and.w	r5, r1, r3
10003bc2:	ea54 0305 	orrs.w	r3, r4, r5
10003bc6:	d00f      	beq.n	10003be8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10003bc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bcc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10003bd0:	f023 0103 	bic.w	r1, r3, #3
10003bd4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003bd8:	681b      	ldr	r3, [r3, #0]
10003bda:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
10003bde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003be2:	430b      	orrs	r3, r1
10003be4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10003be8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003bec:	681b      	ldr	r3, [r3, #0]
10003bee:	e9d3 0100 	ldrd	r0, r1, [r3]
10003bf2:	f04f 0210 	mov.w	r2, #16
10003bf6:	f04f 0300 	mov.w	r3, #0
10003bfa:	ea00 0802 	and.w	r8, r0, r2
10003bfe:	ea01 0903 	and.w	r9, r1, r3
10003c02:	ea58 0309 	orrs.w	r3, r8, r9
10003c06:	d032      	beq.n	10003c6e <HAL_RCCEx_PeriphCLKConfig+0xee>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10003c08:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003c0c:	681b      	ldr	r3, [r3, #0]
10003c0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10003c12:	2b01      	cmp	r3, #1
10003c14:	d11b      	bne.n	10003c4e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003c16:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003c1a:	681b      	ldr	r3, [r3, #0]
10003c1c:	3380      	adds	r3, #128	; 0x80
10003c1e:	4618      	mov	r0, r3
10003c20:	f7ff fe56 	bl	100038d0 <RCCEx_PLL4_Config>
10003c24:	4603      	mov	r3, r0
10003c26:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10003c2a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003c2e:	2b00      	cmp	r3, #0
10003c30:	d003      	beq.n	10003c3a <HAL_RCCEx_PeriphCLKConfig+0xba>
      {
        return status;
10003c32:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003c36:	f001 bd47 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c3e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003c42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003c4a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10003c4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c52:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10003c56:	f023 0107 	bic.w	r1, r3, #7
10003c5a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003c5e:	681b      	ldr	r3, [r3, #0]
10003c60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10003c64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c68:	430b      	orrs	r3, r1
10003c6a:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10003c6e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003c72:	681b      	ldr	r3, [r3, #0]
10003c74:	e9d3 0100 	ldrd	r0, r1, [r3]
10003c78:	f04f 0220 	mov.w	r2, #32
10003c7c:	f04f 0300 	mov.w	r3, #0
10003c80:	ea00 0a02 	and.w	sl, r0, r2
10003c84:	ea01 0b03 	and.w	fp, r1, r3
10003c88:	ea5a 030b 	orrs.w	r3, sl, fp
10003c8c:	d032      	beq.n	10003cf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10003c8e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003c92:	681b      	ldr	r3, [r3, #0]
10003c94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10003c98:	2b01      	cmp	r3, #1
10003c9a:	d11b      	bne.n	10003cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003c9c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003ca0:	681b      	ldr	r3, [r3, #0]
10003ca2:	3380      	adds	r3, #128	; 0x80
10003ca4:	4618      	mov	r0, r3
10003ca6:	f7ff fe13 	bl	100038d0 <RCCEx_PLL4_Config>
10003caa:	4603      	mov	r3, r0
10003cac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10003cb0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003cb4:	2b00      	cmp	r3, #0
10003cb6:	d003      	beq.n	10003cc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        return status;
10003cb8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003cbc:	f001 bd04 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cc4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003cc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003cd0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10003cd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cd8:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10003cdc:	f023 0107 	bic.w	r1, r3, #7
10003ce0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003ce4:	681b      	ldr	r3, [r3, #0]
10003ce6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10003cea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003cee:	430b      	orrs	r3, r1
10003cf0:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10003cf4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003cf8:	681b      	ldr	r3, [r3, #0]
10003cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
10003cfe:	f04f 0200 	mov.w	r2, #0
10003d02:	f04f 0320 	mov.w	r3, #32
10003d06:	ea00 0402 	and.w	r4, r0, r2
10003d0a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
10003d0e:	400b      	ands	r3, r1
10003d10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
10003d14:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
10003d18:	4323      	orrs	r3, r4
10003d1a:	d032      	beq.n	10003d82 <HAL_RCCEx_PeriphCLKConfig+0x202>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10003d1c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003d20:	681b      	ldr	r3, [r3, #0]
10003d22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10003d26:	2b01      	cmp	r3, #1
10003d28:	d11b      	bne.n	10003d62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003d2a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003d2e:	681b      	ldr	r3, [r3, #0]
10003d30:	3344      	adds	r3, #68	; 0x44
10003d32:	4618      	mov	r0, r3
10003d34:	f7ff fc62 	bl	100035fc <RCCEx_PLL3_Config>
10003d38:	4603      	mov	r3, r0
10003d3a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10003d3e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003d42:	2b00      	cmp	r3, #0
10003d44:	d003      	beq.n	10003d4e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      {
        return status;
10003d46:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003d4a:	f001 bcbd 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d52:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003d56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d5a:	f043 0320 	orr.w	r3, r3, #32
10003d5e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10003d62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10003d6a:	f023 0107 	bic.w	r1, r3, #7
10003d6e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003d72:	681b      	ldr	r3, [r3, #0]
10003d74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10003d78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d7c:	430b      	orrs	r3, r1
10003d7e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10003d82:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003d86:	681b      	ldr	r3, [r3, #0]
10003d88:	e9d3 0100 	ldrd	r0, r1, [r3]
10003d8c:	f04f 0280 	mov.w	r2, #128	; 0x80
10003d90:	f04f 0300 	mov.w	r3, #0
10003d94:	ea00 0402 	and.w	r4, r0, r2
10003d98:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
10003d9c:	400b      	ands	r3, r1
10003d9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
10003da2:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
10003da6:	4323      	orrs	r3, r4
10003da8:	d074      	beq.n	10003e94 <HAL_RCCEx_PeriphCLKConfig+0x314>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10003daa:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003dae:	681b      	ldr	r3, [r3, #0]
10003db0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10003db4:	2b04      	cmp	r3, #4
10003db6:	d040      	beq.n	10003e3a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
10003db8:	2b04      	cmp	r3, #4
10003dba:	d85b      	bhi.n	10003e74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
10003dbc:	2b00      	cmp	r3, #0
10003dbe:	d002      	beq.n	10003dc6 <HAL_RCCEx_PeriphCLKConfig+0x246>
10003dc0:	2b01      	cmp	r3, #1
10003dc2:	d01d      	beq.n	10003e00 <HAL_RCCEx_PeriphCLKConfig+0x280>
10003dc4:	e056      	b.n	10003e74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003dc6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003dca:	681b      	ldr	r3, [r3, #0]
10003dcc:	3380      	adds	r3, #128	; 0x80
10003dce:	4618      	mov	r0, r3
10003dd0:	f7ff fd7e 	bl	100038d0 <RCCEx_PLL4_Config>
10003dd4:	4603      	mov	r3, r0
10003dd6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003dda:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003dde:	2b00      	cmp	r3, #0
10003de0:	d003      	beq.n	10003dea <HAL_RCCEx_PeriphCLKConfig+0x26a>
        {
          return status;
10003de2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003de6:	f001 bc6f 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003dea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003dee:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003df2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003df6:	f043 0320 	orr.w	r3, r3, #32
10003dfa:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003dfe:	e039      	b.n	10003e74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003e00:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003e04:	681b      	ldr	r3, [r3, #0]
10003e06:	3344      	adds	r3, #68	; 0x44
10003e08:	4618      	mov	r0, r3
10003e0a:	f7ff fbf7 	bl	100035fc <RCCEx_PLL3_Config>
10003e0e:	4603      	mov	r3, r0
10003e10:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003e14:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003e18:	2b00      	cmp	r3, #0
10003e1a:	d003      	beq.n	10003e24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        {
          return status;
10003e1c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003e20:	f001 bc52 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003e24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e28:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003e2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e30:	f043 0320 	orr.w	r3, r3, #32
10003e34:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003e38:	e01c      	b.n	10003e74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003e3a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003e3e:	681b      	ldr	r3, [r3, #0]
10003e40:	3344      	adds	r3, #68	; 0x44
10003e42:	4618      	mov	r0, r3
10003e44:	f7ff fbda 	bl	100035fc <RCCEx_PLL3_Config>
10003e48:	4603      	mov	r3, r0
10003e4a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003e4e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003e52:	2b00      	cmp	r3, #0
10003e54:	d003      	beq.n	10003e5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
        {
          return status;
10003e56:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003e5a:	f001 bc35 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003e5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e62:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003e66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003e6e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003e72:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10003e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e78:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10003e7c:	f023 0107 	bic.w	r1, r3, #7
10003e80:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003e84:	681b      	ldr	r3, [r3, #0]
10003e86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10003e8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e8e:	430b      	orrs	r3, r1
10003e90:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10003e94:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003e98:	681b      	ldr	r3, [r3, #0]
10003e9a:	e9d3 0100 	ldrd	r0, r1, [r3]
10003e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
10003ea2:	f04f 0300 	mov.w	r3, #0
10003ea6:	ea00 0402 	and.w	r4, r0, r2
10003eaa:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
10003eae:	400b      	ands	r3, r1
10003eb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
10003eb4:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
10003eb8:	4323      	orrs	r3, r4
10003eba:	d074      	beq.n	10003fa6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10003ebc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003ec0:	681b      	ldr	r3, [r3, #0]
10003ec2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10003ec6:	2b05      	cmp	r3, #5
10003ec8:	d040      	beq.n	10003f4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
10003eca:	2b05      	cmp	r3, #5
10003ecc:	d85b      	bhi.n	10003f86 <HAL_RCCEx_PeriphCLKConfig+0x406>
10003ece:	2b00      	cmp	r3, #0
10003ed0:	d002      	beq.n	10003ed8 <HAL_RCCEx_PeriphCLKConfig+0x358>
10003ed2:	2b01      	cmp	r3, #1
10003ed4:	d01d      	beq.n	10003f12 <HAL_RCCEx_PeriphCLKConfig+0x392>
10003ed6:	e056      	b.n	10003f86 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003ed8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003edc:	681b      	ldr	r3, [r3, #0]
10003ede:	3380      	adds	r3, #128	; 0x80
10003ee0:	4618      	mov	r0, r3
10003ee2:	f7ff fcf5 	bl	100038d0 <RCCEx_PLL4_Config>
10003ee6:	4603      	mov	r3, r0
10003ee8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003eec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003ef0:	2b00      	cmp	r3, #0
10003ef2:	d003      	beq.n	10003efc <HAL_RCCEx_PeriphCLKConfig+0x37c>
        {
          return status;
10003ef4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003ef8:	f001 bbe6 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f00:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003f04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f08:	f043 0320 	orr.w	r3, r3, #32
10003f0c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003f10:	e039      	b.n	10003f86 <HAL_RCCEx_PeriphCLKConfig+0x406>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003f12:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003f16:	681b      	ldr	r3, [r3, #0]
10003f18:	3344      	adds	r3, #68	; 0x44
10003f1a:	4618      	mov	r0, r3
10003f1c:	f7ff fb6e 	bl	100035fc <RCCEx_PLL3_Config>
10003f20:	4603      	mov	r3, r0
10003f22:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003f26:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f2a:	2b00      	cmp	r3, #0
10003f2c:	d003      	beq.n	10003f36 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          return status;
10003f2e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f32:	f001 bbc9 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f3a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003f3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f42:	f043 0320 	orr.w	r3, r3, #32
10003f46:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003f4a:	e01c      	b.n	10003f86 <HAL_RCCEx_PeriphCLKConfig+0x406>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003f4c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003f50:	681b      	ldr	r3, [r3, #0]
10003f52:	3344      	adds	r3, #68	; 0x44
10003f54:	4618      	mov	r0, r3
10003f56:	f7ff fb51 	bl	100035fc <RCCEx_PLL3_Config>
10003f5a:	4603      	mov	r3, r0
10003f5c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003f60:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f64:	2b00      	cmp	r3, #0
10003f66:	d003      	beq.n	10003f70 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
        {
          return status;
10003f68:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f6c:	f001 bbac 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003f70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f74:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003f78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003f80:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003f84:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10003f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f8a:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10003f8e:	f023 0107 	bic.w	r1, r3, #7
10003f92:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003f96:	681b      	ldr	r3, [r3, #0]
10003f98:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10003f9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fa0:	430b      	orrs	r3, r1
10003fa2:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
10003fa6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003faa:	681b      	ldr	r3, [r3, #0]
10003fac:	e9d3 0100 	ldrd	r0, r1, [r3]
10003fb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
10003fb4:	f04f 0300 	mov.w	r3, #0
10003fb8:	ea00 0402 	and.w	r4, r0, r2
10003fbc:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
10003fc0:	400b      	ands	r3, r1
10003fc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
10003fc6:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
10003fca:	4323      	orrs	r3, r4
10003fcc:	d074      	beq.n	100040b8 <HAL_RCCEx_PeriphCLKConfig+0x538>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10003fce:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003fd2:	681b      	ldr	r3, [r3, #0]
10003fd4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10003fd8:	2b04      	cmp	r3, #4
10003fda:	d040      	beq.n	1000405e <HAL_RCCEx_PeriphCLKConfig+0x4de>
10003fdc:	2b04      	cmp	r3, #4
10003fde:	d85b      	bhi.n	10004098 <HAL_RCCEx_PeriphCLKConfig+0x518>
10003fe0:	2b00      	cmp	r3, #0
10003fe2:	d002      	beq.n	10003fea <HAL_RCCEx_PeriphCLKConfig+0x46a>
10003fe4:	2b01      	cmp	r3, #1
10003fe6:	d01d      	beq.n	10004024 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
10003fe8:	e056      	b.n	10004098 <HAL_RCCEx_PeriphCLKConfig+0x518>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003fea:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10003fee:	681b      	ldr	r3, [r3, #0]
10003ff0:	3380      	adds	r3, #128	; 0x80
10003ff2:	4618      	mov	r0, r3
10003ff4:	f7ff fc6c 	bl	100038d0 <RCCEx_PLL4_Config>
10003ff8:	4603      	mov	r3, r0
10003ffa:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003ffe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004002:	2b00      	cmp	r3, #0
10004004:	d003      	beq.n	1000400e <HAL_RCCEx_PeriphCLKConfig+0x48e>
        {
          return status;
10004006:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000400a:	f001 bb5d 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000400e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004012:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000401a:	f043 0320 	orr.w	r3, r3, #32
1000401e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004022:	e039      	b.n	10004098 <HAL_RCCEx_PeriphCLKConfig+0x518>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004024:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004028:	681b      	ldr	r3, [r3, #0]
1000402a:	3344      	adds	r3, #68	; 0x44
1000402c:	4618      	mov	r0, r3
1000402e:	f7ff fae5 	bl	100035fc <RCCEx_PLL3_Config>
10004032:	4603      	mov	r3, r0
10004034:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004038:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000403c:	2b00      	cmp	r3, #0
1000403e:	d003      	beq.n	10004048 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        {
          return status;
10004040:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004044:	f001 bb40 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004048:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000404c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004050:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004054:	f043 0320 	orr.w	r3, r3, #32
10004058:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000405c:	e01c      	b.n	10004098 <HAL_RCCEx_PeriphCLKConfig+0x518>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000405e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004062:	681b      	ldr	r3, [r3, #0]
10004064:	3344      	adds	r3, #68	; 0x44
10004066:	4618      	mov	r0, r3
10004068:	f7ff fac8 	bl	100035fc <RCCEx_PLL3_Config>
1000406c:	4603      	mov	r3, r0
1000406e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004072:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004076:	2b00      	cmp	r3, #0
10004078:	d003      	beq.n	10004082 <HAL_RCCEx_PeriphCLKConfig+0x502>
        {
          return status;
1000407a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000407e:	f001 bb23 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004086:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000408a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000408e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004092:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004096:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10004098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000409c:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
100040a0:	f023 0107 	bic.w	r1, r3, #7
100040a4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100040a8:	681b      	ldr	r3, [r3, #0]
100040aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100040ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040b2:	430b      	orrs	r3, r1
100040b4:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
100040b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100040bc:	681b      	ldr	r3, [r3, #0]
100040be:	e9d3 0100 	ldrd	r0, r1, [r3]
100040c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
100040c6:	f04f 0300 	mov.w	r3, #0
100040ca:	ea00 0402 	and.w	r4, r0, r2
100040ce:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
100040d2:	400b      	ands	r3, r1
100040d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
100040d8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
100040dc:	4323      	orrs	r3, r4
100040de:	d074      	beq.n	100041ca <HAL_RCCEx_PeriphCLKConfig+0x64a>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
100040e0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100040e4:	681b      	ldr	r3, [r3, #0]
100040e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100040ea:	2b04      	cmp	r3, #4
100040ec:	d040      	beq.n	10004170 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
100040ee:	2b04      	cmp	r3, #4
100040f0:	d85b      	bhi.n	100041aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
100040f2:	2b00      	cmp	r3, #0
100040f4:	d002      	beq.n	100040fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
100040f6:	2b01      	cmp	r3, #1
100040f8:	d01d      	beq.n	10004136 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
100040fa:	e056      	b.n	100041aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100040fc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004100:	681b      	ldr	r3, [r3, #0]
10004102:	3380      	adds	r3, #128	; 0x80
10004104:	4618      	mov	r0, r3
10004106:	f7ff fbe3 	bl	100038d0 <RCCEx_PLL4_Config>
1000410a:	4603      	mov	r3, r0
1000410c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004110:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004114:	2b00      	cmp	r3, #0
10004116:	d003      	beq.n	10004120 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        {
          return status;
10004118:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000411c:	f001 bad4 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004124:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004128:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000412c:	f043 0320 	orr.w	r3, r3, #32
10004130:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004134:	e039      	b.n	100041aa <HAL_RCCEx_PeriphCLKConfig+0x62a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004136:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000413a:	681b      	ldr	r3, [r3, #0]
1000413c:	3344      	adds	r3, #68	; 0x44
1000413e:	4618      	mov	r0, r3
10004140:	f7ff fa5c 	bl	100035fc <RCCEx_PLL3_Config>
10004144:	4603      	mov	r3, r0
10004146:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000414a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000414e:	2b00      	cmp	r3, #0
10004150:	d003      	beq.n	1000415a <HAL_RCCEx_PeriphCLKConfig+0x5da>
        {
          return status;
10004152:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004156:	f001 bab7 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000415a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000415e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004162:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004166:	f043 0320 	orr.w	r3, r3, #32
1000416a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000416e:	e01c      	b.n	100041aa <HAL_RCCEx_PeriphCLKConfig+0x62a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004170:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004174:	681b      	ldr	r3, [r3, #0]
10004176:	3344      	adds	r3, #68	; 0x44
10004178:	4618      	mov	r0, r3
1000417a:	f7ff fa3f 	bl	100035fc <RCCEx_PLL3_Config>
1000417e:	4603      	mov	r3, r0
10004180:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004184:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004188:	2b00      	cmp	r3, #0
1000418a:	d003      	beq.n	10004194 <HAL_RCCEx_PeriphCLKConfig+0x614>
        {
          return status;
1000418c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004190:	f001 ba9a 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004194:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004198:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000419c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100041a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100041a4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100041a8:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
100041aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041ae:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
100041b2:	f023 0107 	bic.w	r1, r3, #7
100041b6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100041ba:	681b      	ldr	r3, [r3, #0]
100041bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100041c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100041c4:	430b      	orrs	r3, r1
100041c6:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
100041ca:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100041ce:	681b      	ldr	r3, [r3, #0]
100041d0:	e9d3 0100 	ldrd	r0, r1, [r3]
100041d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
100041d8:	f04f 0300 	mov.w	r3, #0
100041dc:	ea00 0402 	and.w	r4, r0, r2
100041e0:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
100041e4:	400b      	ands	r3, r1
100041e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
100041ea:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
100041ee:	4323      	orrs	r3, r4
100041f0:	d074      	beq.n	100042dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
100041f2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100041f6:	681b      	ldr	r3, [r3, #0]
100041f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100041fc:	2b04      	cmp	r3, #4
100041fe:	d040      	beq.n	10004282 <HAL_RCCEx_PeriphCLKConfig+0x702>
10004200:	2b04      	cmp	r3, #4
10004202:	d85b      	bhi.n	100042bc <HAL_RCCEx_PeriphCLKConfig+0x73c>
10004204:	2b00      	cmp	r3, #0
10004206:	d002      	beq.n	1000420e <HAL_RCCEx_PeriphCLKConfig+0x68e>
10004208:	2b01      	cmp	r3, #1
1000420a:	d01d      	beq.n	10004248 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
1000420c:	e056      	b.n	100042bc <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000420e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004212:	681b      	ldr	r3, [r3, #0]
10004214:	3380      	adds	r3, #128	; 0x80
10004216:	4618      	mov	r0, r3
10004218:	f7ff fb5a 	bl	100038d0 <RCCEx_PLL4_Config>
1000421c:	4603      	mov	r3, r0
1000421e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004222:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004226:	2b00      	cmp	r3, #0
10004228:	d003      	beq.n	10004232 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
        {
          return status;
1000422a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000422e:	f001 ba4b 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004232:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004236:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000423a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000423e:	f043 0310 	orr.w	r3, r3, #16
10004242:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004246:	e039      	b.n	100042bc <HAL_RCCEx_PeriphCLKConfig+0x73c>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004248:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000424c:	681b      	ldr	r3, [r3, #0]
1000424e:	3344      	adds	r3, #68	; 0x44
10004250:	4618      	mov	r0, r3
10004252:	f7ff f9d3 	bl	100035fc <RCCEx_PLL3_Config>
10004256:	4603      	mov	r3, r0
10004258:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000425c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004260:	2b00      	cmp	r3, #0
10004262:	d003      	beq.n	1000426c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
        {
          return status;
10004264:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004268:	f001 ba2e 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000426c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004270:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004274:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004278:	f043 0320 	orr.w	r3, r3, #32
1000427c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004280:	e01c      	b.n	100042bc <HAL_RCCEx_PeriphCLKConfig+0x73c>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004282:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004286:	681b      	ldr	r3, [r3, #0]
10004288:	3344      	adds	r3, #68	; 0x44
1000428a:	4618      	mov	r0, r3
1000428c:	f7ff f9b6 	bl	100035fc <RCCEx_PLL3_Config>
10004290:	4603      	mov	r3, r0
10004292:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004296:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000429a:	2b00      	cmp	r3, #0
1000429c:	d003      	beq.n	100042a6 <HAL_RCCEx_PeriphCLKConfig+0x726>
        {
          return status;
1000429e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100042a2:	f001 ba11 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100042a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042aa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100042ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100042b6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100042ba:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
100042bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042c0:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
100042c4:	f023 0107 	bic.w	r1, r3, #7
100042c8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100042cc:	681b      	ldr	r3, [r3, #0]
100042ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100042d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042d6:	430b      	orrs	r3, r1
100042d8:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100042dc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100042e0:	681b      	ldr	r3, [r3, #0]
100042e2:	e9d3 0100 	ldrd	r0, r1, [r3]
100042e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
100042ea:	f04f 0300 	mov.w	r3, #0
100042ee:	ea00 0402 	and.w	r4, r0, r2
100042f2:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
100042f6:	400b      	ands	r3, r1
100042f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
100042fc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
10004300:	4323      	orrs	r3, r4
10004302:	d074      	beq.n	100043ee <HAL_RCCEx_PeriphCLKConfig+0x86e>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10004304:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004308:	681b      	ldr	r3, [r3, #0]
1000430a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
1000430e:	2b04      	cmp	r3, #4
10004310:	d040      	beq.n	10004394 <HAL_RCCEx_PeriphCLKConfig+0x814>
10004312:	2b04      	cmp	r3, #4
10004314:	d85b      	bhi.n	100043ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
10004316:	2b00      	cmp	r3, #0
10004318:	d002      	beq.n	10004320 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
1000431a:	2b01      	cmp	r3, #1
1000431c:	d01d      	beq.n	1000435a <HAL_RCCEx_PeriphCLKConfig+0x7da>
1000431e:	e056      	b.n	100043ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004320:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004324:	681b      	ldr	r3, [r3, #0]
10004326:	3380      	adds	r3, #128	; 0x80
10004328:	4618      	mov	r0, r3
1000432a:	f7ff fad1 	bl	100038d0 <RCCEx_PLL4_Config>
1000432e:	4603      	mov	r3, r0
10004330:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004334:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004338:	2b00      	cmp	r3, #0
1000433a:	d003      	beq.n	10004344 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
        {
          return status;
1000433c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004340:	f001 b9c2 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004344:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004348:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000434c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004350:	f043 0310 	orr.w	r3, r3, #16
10004354:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004358:	e039      	b.n	100043ce <HAL_RCCEx_PeriphCLKConfig+0x84e>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000435a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000435e:	681b      	ldr	r3, [r3, #0]
10004360:	3344      	adds	r3, #68	; 0x44
10004362:	4618      	mov	r0, r3
10004364:	f7ff f94a 	bl	100035fc <RCCEx_PLL3_Config>
10004368:	4603      	mov	r3, r0
1000436a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000436e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004372:	2b00      	cmp	r3, #0
10004374:	d003      	beq.n	1000437e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
        {
          return status;
10004376:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000437a:	f001 b9a5 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000437e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004382:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004386:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000438a:	f043 0320 	orr.w	r3, r3, #32
1000438e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004392:	e01c      	b.n	100043ce <HAL_RCCEx_PeriphCLKConfig+0x84e>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004394:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004398:	681b      	ldr	r3, [r3, #0]
1000439a:	3344      	adds	r3, #68	; 0x44
1000439c:	4618      	mov	r0, r3
1000439e:	f7ff f92d 	bl	100035fc <RCCEx_PLL3_Config>
100043a2:	4603      	mov	r3, r0
100043a4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100043a8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100043ac:	2b00      	cmp	r3, #0
100043ae:	d003      	beq.n	100043b8 <HAL_RCCEx_PeriphCLKConfig+0x838>
        {
          return status;
100043b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100043b4:	f001 b988 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100043b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043bc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100043c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100043c8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100043cc:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100043ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043d2:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
100043d6:	f023 0107 	bic.w	r1, r3, #7
100043da:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100043de:	681b      	ldr	r3, [r3, #0]
100043e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
100043e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043e8:	430b      	orrs	r3, r1
100043ea:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
100043ee:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100043f2:	681b      	ldr	r3, [r3, #0]
100043f4:	e9d3 0100 	ldrd	r0, r1, [r3]
100043f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
100043fc:	f04f 0300 	mov.w	r3, #0
10004400:	ea00 0402 	and.w	r4, r0, r2
10004404:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
10004408:	400b      	ands	r3, r1
1000440a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
1000440e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
10004412:	4323      	orrs	r3, r4
10004414:	d032      	beq.n	1000447c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10004416:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000441a:	681b      	ldr	r3, [r3, #0]
1000441c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10004420:	2b01      	cmp	r3, #1
10004422:	d11b      	bne.n	1000445c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004424:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004428:	681b      	ldr	r3, [r3, #0]
1000442a:	3380      	adds	r3, #128	; 0x80
1000442c:	4618      	mov	r0, r3
1000442e:	f7ff fa4f 	bl	100038d0 <RCCEx_PLL4_Config>
10004432:	4603      	mov	r3, r0
10004434:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004438:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000443c:	2b00      	cmp	r3, #0
1000443e:	d003      	beq.n	10004448 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      {
        return status;
10004440:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004444:	f001 b940 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000444c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004450:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004454:	f043 0320 	orr.w	r3, r3, #32
10004458:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
1000445c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004460:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10004464:	f023 0107 	bic.w	r1, r3, #7
10004468:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000446c:	681b      	ldr	r3, [r3, #0]
1000446e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10004472:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004476:	430b      	orrs	r3, r1
10004478:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
1000447c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004480:	681b      	ldr	r3, [r3, #0]
10004482:	e9d3 0100 	ldrd	r0, r1, [r3]
10004486:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
1000448a:	f04f 0300 	mov.w	r3, #0
1000448e:	ea00 0402 	and.w	r4, r0, r2
10004492:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
10004496:	400b      	ands	r3, r1
10004498:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
1000449c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
100044a0:	4323      	orrs	r3, r4
100044a2:	d053      	beq.n	1000454c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
100044a4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100044a8:	681b      	ldr	r3, [r3, #0]
100044aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
100044ae:	2b01      	cmp	r3, #1
100044b0:	d002      	beq.n	100044b8 <HAL_RCCEx_PeriphCLKConfig+0x938>
100044b2:	2b05      	cmp	r3, #5
100044b4:	d01d      	beq.n	100044f2 <HAL_RCCEx_PeriphCLKConfig+0x972>
100044b6:	e039      	b.n	1000452c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100044b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100044bc:	681b      	ldr	r3, [r3, #0]
100044be:	3380      	adds	r3, #128	; 0x80
100044c0:	4618      	mov	r0, r3
100044c2:	f7ff fa05 	bl	100038d0 <RCCEx_PLL4_Config>
100044c6:	4603      	mov	r3, r0
100044c8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100044cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100044d0:	2b00      	cmp	r3, #0
100044d2:	d003      	beq.n	100044dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
        {
          return status;
100044d4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100044d8:	f001 b8f6 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100044dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044e0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100044e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044e8:	f043 0320 	orr.w	r3, r3, #32
100044ec:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100044f0:	e01c      	b.n	1000452c <HAL_RCCEx_PeriphCLKConfig+0x9ac>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100044f2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100044f6:	681b      	ldr	r3, [r3, #0]
100044f8:	3344      	adds	r3, #68	; 0x44
100044fa:	4618      	mov	r0, r3
100044fc:	f7ff f87e 	bl	100035fc <RCCEx_PLL3_Config>
10004500:	4603      	mov	r3, r0
10004502:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004506:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000450a:	2b00      	cmp	r3, #0
1000450c:	d003      	beq.n	10004516 <HAL_RCCEx_PeriphCLKConfig+0x996>
        {
          return status;
1000450e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004512:	f001 b8d9 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000451a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000451e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004522:	f043 0320 	orr.w	r3, r3, #32
10004526:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000452a:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
1000452c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004530:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10004534:	f023 0107 	bic.w	r1, r3, #7
10004538:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000453c:	681b      	ldr	r3, [r3, #0]
1000453e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
10004542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004546:	430b      	orrs	r3, r1
10004548:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
1000454c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004550:	681b      	ldr	r3, [r3, #0]
10004552:	e9d3 0100 	ldrd	r0, r1, [r3]
10004556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
1000455a:	f04f 0300 	mov.w	r3, #0
1000455e:	ea00 0402 	and.w	r4, r0, r2
10004562:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
10004566:	400b      	ands	r3, r1
10004568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
1000456c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
10004570:	4323      	orrs	r3, r4
10004572:	d032      	beq.n	100045da <HAL_RCCEx_PeriphCLKConfig+0xa5a>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10004574:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004578:	681b      	ldr	r3, [r3, #0]
1000457a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
1000457e:	2b01      	cmp	r3, #1
10004580:	d11b      	bne.n	100045ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004582:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004586:	681b      	ldr	r3, [r3, #0]
10004588:	3380      	adds	r3, #128	; 0x80
1000458a:	4618      	mov	r0, r3
1000458c:	f7ff f9a0 	bl	100038d0 <RCCEx_PLL4_Config>
10004590:	4603      	mov	r3, r0
10004592:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004596:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000459a:	2b00      	cmp	r3, #0
1000459c:	d003      	beq.n	100045a6 <HAL_RCCEx_PeriphCLKConfig+0xa26>
      {
        return status;
1000459e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100045a2:	f001 b891 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100045a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045aa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100045ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045b2:	f043 0320 	orr.w	r3, r3, #32
100045b6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
100045ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045be:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
100045c2:	f023 0107 	bic.w	r1, r3, #7
100045c6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100045ca:	681b      	ldr	r3, [r3, #0]
100045cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
100045d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045d4:	430b      	orrs	r3, r1
100045d6:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
100045da:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100045de:	681b      	ldr	r3, [r3, #0]
100045e0:	e9d3 0100 	ldrd	r0, r1, [r3]
100045e4:	f04f 0202 	mov.w	r2, #2
100045e8:	f04f 0300 	mov.w	r3, #0
100045ec:	ea00 0402 	and.w	r4, r0, r2
100045f0:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
100045f4:	400b      	ands	r3, r1
100045f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
100045fa:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
100045fe:	4323      	orrs	r3, r4
10004600:	d032      	beq.n	10004668 <HAL_RCCEx_PeriphCLKConfig+0xae8>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10004602:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004606:	681b      	ldr	r3, [r3, #0]
10004608:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
1000460c:	2b01      	cmp	r3, #1
1000460e:	d11b      	bne.n	10004648 <HAL_RCCEx_PeriphCLKConfig+0xac8>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004610:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004614:	681b      	ldr	r3, [r3, #0]
10004616:	3380      	adds	r3, #128	; 0x80
10004618:	4618      	mov	r0, r3
1000461a:	f7ff f959 	bl	100038d0 <RCCEx_PLL4_Config>
1000461e:	4603      	mov	r3, r0
10004620:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004624:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004628:	2b00      	cmp	r3, #0
1000462a:	d003      	beq.n	10004634 <HAL_RCCEx_PeriphCLKConfig+0xab4>
      {
        return status;
1000462c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004630:	f001 b84a 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004634:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004638:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000463c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004640:	f043 0320 	orr.w	r3, r3, #32
10004644:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10004648:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000464c:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10004650:	f023 0107 	bic.w	r1, r3, #7
10004654:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004658:	681b      	ldr	r3, [r3, #0]
1000465a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
1000465e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004662:	430b      	orrs	r3, r1
10004664:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10004668:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000466c:	681b      	ldr	r3, [r3, #0]
1000466e:	e9d3 0100 	ldrd	r0, r1, [r3]
10004672:	f04f 0204 	mov.w	r2, #4
10004676:	f04f 0300 	mov.w	r3, #0
1000467a:	ea00 0402 	and.w	r4, r0, r2
1000467e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
10004682:	400b      	ands	r3, r1
10004684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
10004688:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
1000468c:	4323      	orrs	r3, r4
1000468e:	d032      	beq.n	100046f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10004690:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004694:	681b      	ldr	r3, [r3, #0]
10004696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
1000469a:	2b01      	cmp	r3, #1
1000469c:	d11b      	bne.n	100046d6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000469e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100046a2:	681b      	ldr	r3, [r3, #0]
100046a4:	3380      	adds	r3, #128	; 0x80
100046a6:	4618      	mov	r0, r3
100046a8:	f7ff f912 	bl	100038d0 <RCCEx_PLL4_Config>
100046ac:	4603      	mov	r3, r0
100046ae:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100046b2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100046b6:	2b00      	cmp	r3, #0
100046b8:	d003      	beq.n	100046c2 <HAL_RCCEx_PeriphCLKConfig+0xb42>
      {
        return status;
100046ba:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100046be:	f001 b803 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100046c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046c6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100046ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100046ce:	f043 0320 	orr.w	r3, r3, #32
100046d2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
100046d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100046de:	f023 0107 	bic.w	r1, r3, #7
100046e2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100046e6:	681b      	ldr	r3, [r3, #0]
100046e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100046ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100046f0:	430b      	orrs	r3, r1
100046f2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
100046f6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100046fa:	681b      	ldr	r3, [r3, #0]
100046fc:	e9d3 0100 	ldrd	r0, r1, [r3]
10004700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
10004704:	f04f 0300 	mov.w	r3, #0
10004708:	ea00 0402 	and.w	r4, r0, r2
1000470c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
10004710:	400b      	ands	r3, r1
10004712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
10004716:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
1000471a:	4323      	orrs	r3, r4
1000471c:	d032      	beq.n	10004784 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
1000471e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004722:	681b      	ldr	r3, [r3, #0]
10004724:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
10004728:	2b01      	cmp	r3, #1
1000472a:	d11b      	bne.n	10004764 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000472c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004730:	681b      	ldr	r3, [r3, #0]
10004732:	3380      	adds	r3, #128	; 0x80
10004734:	4618      	mov	r0, r3
10004736:	f7ff f8cb 	bl	100038d0 <RCCEx_PLL4_Config>
1000473a:	4603      	mov	r3, r0
1000473c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004740:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004744:	2b00      	cmp	r3, #0
10004746:	d003      	beq.n	10004750 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      {
        return status;
10004748:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000474c:	f000 bfbc 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004754:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004758:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000475c:	f043 0320 	orr.w	r3, r3, #32
10004760:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10004764:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004768:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
1000476c:	f023 0107 	bic.w	r1, r3, #7
10004770:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004774:	681b      	ldr	r3, [r3, #0]
10004776:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
1000477a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000477e:	430b      	orrs	r3, r1
10004780:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10004784:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004788:	681b      	ldr	r3, [r3, #0]
1000478a:	e9d3 0100 	ldrd	r0, r1, [r3]
1000478e:	f04f 0201 	mov.w	r2, #1
10004792:	f04f 0300 	mov.w	r3, #0
10004796:	ea00 0402 	and.w	r4, r0, r2
1000479a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
1000479e:	400b      	ands	r3, r1
100047a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
100047a4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
100047a8:	4323      	orrs	r3, r4
100047aa:	d053      	beq.n	10004854 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
100047ac:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100047b0:	681b      	ldr	r3, [r3, #0]
100047b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
100047b6:	2b01      	cmp	r3, #1
100047b8:	d002      	beq.n	100047c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
100047ba:	2b04      	cmp	r3, #4
100047bc:	d01d      	beq.n	100047fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
100047be:	e039      	b.n	10004834 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100047c0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100047c4:	681b      	ldr	r3, [r3, #0]
100047c6:	3344      	adds	r3, #68	; 0x44
100047c8:	4618      	mov	r0, r3
100047ca:	f7fe ff17 	bl	100035fc <RCCEx_PLL3_Config>
100047ce:	4603      	mov	r3, r0
100047d0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100047d4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100047d8:	2b00      	cmp	r3, #0
100047da:	d003      	beq.n	100047e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        {
          return status;
100047dc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100047e0:	f000 bf72 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100047e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047e8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100047ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100047f0:	f043 0320 	orr.w	r3, r3, #32
100047f4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100047f8:	e01c      	b.n	10004834 <HAL_RCCEx_PeriphCLKConfig+0xcb4>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100047fa:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100047fe:	681b      	ldr	r3, [r3, #0]
10004800:	3380      	adds	r3, #128	; 0x80
10004802:	4618      	mov	r0, r3
10004804:	f7ff f864 	bl	100038d0 <RCCEx_PLL4_Config>
10004808:	4603      	mov	r3, r0
1000480a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000480e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004812:	2b00      	cmp	r3, #0
10004814:	d003      	beq.n	1000481e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
        {
          return status;
10004816:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000481a:	f000 bf55 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000481e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004822:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000482a:	f043 0320 	orr.w	r3, r3, #32
1000482e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004832:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10004834:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004838:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1000483c:	f023 0107 	bic.w	r1, r3, #7
10004840:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004844:	681b      	ldr	r3, [r3, #0]
10004846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
1000484a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000484e:	430b      	orrs	r3, r1
10004850:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10004854:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004858:	681b      	ldr	r3, [r3, #0]
1000485a:	e9d3 0100 	ldrd	r0, r1, [r3]
1000485e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
10004862:	f04f 0300 	mov.w	r3, #0
10004866:	ea00 0402 	and.w	r4, r0, r2
1000486a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
1000486e:	400b      	ands	r3, r1
10004870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
10004874:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
10004878:	4323      	orrs	r3, r4
1000487a:	d053      	beq.n	10004924 <HAL_RCCEx_PeriphCLKConfig+0xda4>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
1000487c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004880:	681b      	ldr	r3, [r3, #0]
10004882:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10004886:	2b01      	cmp	r3, #1
10004888:	d002      	beq.n	10004890 <HAL_RCCEx_PeriphCLKConfig+0xd10>
1000488a:	2b02      	cmp	r3, #2
1000488c:	d01d      	beq.n	100048ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
1000488e:	e039      	b.n	10004904 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004890:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004894:	681b      	ldr	r3, [r3, #0]
10004896:	3344      	adds	r3, #68	; 0x44
10004898:	4618      	mov	r0, r3
1000489a:	f7fe feaf 	bl	100035fc <RCCEx_PLL3_Config>
1000489e:	4603      	mov	r3, r0
100048a0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100048a4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100048a8:	2b00      	cmp	r3, #0
100048aa:	d003      	beq.n	100048b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>
        {
          return status;
100048ac:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100048b0:	f000 bf0a 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100048b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048b8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100048bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100048c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100048c4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100048c8:	e01c      	b.n	10004904 <HAL_RCCEx_PeriphCLKConfig+0xd84>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100048ca:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100048ce:	681b      	ldr	r3, [r3, #0]
100048d0:	3380      	adds	r3, #128	; 0x80
100048d2:	4618      	mov	r0, r3
100048d4:	f7fe fffc 	bl	100038d0 <RCCEx_PLL4_Config>
100048d8:	4603      	mov	r3, r0
100048da:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100048de:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100048e2:	2b00      	cmp	r3, #0
100048e4:	d003      	beq.n	100048ee <HAL_RCCEx_PeriphCLKConfig+0xd6e>
        {
          return status;
100048e6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100048ea:	f000 beed 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100048ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048f2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100048f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100048fa:	f043 0310 	orr.w	r3, r3, #16
100048fe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004902:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10004904:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004908:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
1000490c:	f023 0107 	bic.w	r1, r3, #7
10004910:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004914:	681b      	ldr	r3, [r3, #0]
10004916:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1000491a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000491e:	430b      	orrs	r3, r1
10004920:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10004924:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004928:	681b      	ldr	r3, [r3, #0]
1000492a:	e9d3 0100 	ldrd	r0, r1, [r3]
1000492e:	f04f 0200 	mov.w	r2, #0
10004932:	f04f 0301 	mov.w	r3, #1
10004936:	ea00 0402 	and.w	r4, r0, r2
1000493a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
1000493e:	400b      	ands	r3, r1
10004940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
10004944:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
10004948:	4323      	orrs	r3, r4
1000494a:	d053      	beq.n	100049f4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
1000494c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004950:	681b      	ldr	r3, [r3, #0]
10004952:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10004956:	2b01      	cmp	r3, #1
10004958:	d002      	beq.n	10004960 <HAL_RCCEx_PeriphCLKConfig+0xde0>
1000495a:	2b02      	cmp	r3, #2
1000495c:	d01d      	beq.n	1000499a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
1000495e:	e039      	b.n	100049d4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004960:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004964:	681b      	ldr	r3, [r3, #0]
10004966:	3344      	adds	r3, #68	; 0x44
10004968:	4618      	mov	r0, r3
1000496a:	f7fe fe47 	bl	100035fc <RCCEx_PLL3_Config>
1000496e:	4603      	mov	r3, r0
10004970:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004974:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004978:	2b00      	cmp	r3, #0
1000497a:	d003      	beq.n	10004984 <HAL_RCCEx_PeriphCLKConfig+0xe04>
        {
          return status;
1000497c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004980:	f000 bea2 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004984:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004988:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000498c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004994:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004998:	e01c      	b.n	100049d4 <HAL_RCCEx_PeriphCLKConfig+0xe54>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000499a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000499e:	681b      	ldr	r3, [r3, #0]
100049a0:	3380      	adds	r3, #128	; 0x80
100049a2:	4618      	mov	r0, r3
100049a4:	f7fe ff94 	bl	100038d0 <RCCEx_PLL4_Config>
100049a8:	4603      	mov	r3, r0
100049aa:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100049ae:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100049b2:	2b00      	cmp	r3, #0
100049b4:	d003      	beq.n	100049be <HAL_RCCEx_PeriphCLKConfig+0xe3e>
        {
          return status;
100049b6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100049ba:	f000 be85 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100049be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049c2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100049c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049ca:	f043 0310 	orr.w	r3, r3, #16
100049ce:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100049d2:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
100049d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049d8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
100049dc:	f023 0107 	bic.w	r1, r3, #7
100049e0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100049e4:	681b      	ldr	r3, [r3, #0]
100049e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
100049ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049ee:	430b      	orrs	r3, r1
100049f0:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
100049f4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100049f8:	681b      	ldr	r3, [r3, #0]
100049fa:	e9d3 0100 	ldrd	r0, r1, [r3]
100049fe:	f04f 0200 	mov.w	r2, #0
10004a02:	f04f 0302 	mov.w	r3, #2
10004a06:	ea00 0402 	and.w	r4, r0, r2
10004a0a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
10004a0e:	400b      	ands	r3, r1
10004a10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
10004a14:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
10004a18:	4323      	orrs	r3, r4
10004a1a:	d053      	beq.n	10004ac4 <HAL_RCCEx_PeriphCLKConfig+0xf44>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10004a1c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004a20:	681b      	ldr	r3, [r3, #0]
10004a22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10004a26:	2b00      	cmp	r3, #0
10004a28:	d002      	beq.n	10004a30 <HAL_RCCEx_PeriphCLKConfig+0xeb0>
10004a2a:	2b01      	cmp	r3, #1
10004a2c:	d01d      	beq.n	10004a6a <HAL_RCCEx_PeriphCLKConfig+0xeea>
10004a2e:	e039      	b.n	10004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004a30:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004a34:	681b      	ldr	r3, [r3, #0]
10004a36:	3380      	adds	r3, #128	; 0x80
10004a38:	4618      	mov	r0, r3
10004a3a:	f7fe ff49 	bl	100038d0 <RCCEx_PLL4_Config>
10004a3e:	4603      	mov	r3, r0
10004a40:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004a44:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004a48:	2b00      	cmp	r3, #0
10004a4a:	d003      	beq.n	10004a54 <HAL_RCCEx_PeriphCLKConfig+0xed4>
        {
          return status;
10004a4c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004a50:	f000 be3a 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a58:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004a5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004a60:	f043 0310 	orr.w	r3, r3, #16
10004a64:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004a68:	e01c      	b.n	10004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf24>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004a6a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004a6e:	681b      	ldr	r3, [r3, #0]
10004a70:	3344      	adds	r3, #68	; 0x44
10004a72:	4618      	mov	r0, r3
10004a74:	f7fe fdc2 	bl	100035fc <RCCEx_PLL3_Config>
10004a78:	4603      	mov	r3, r0
10004a7a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004a7e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004a82:	2b00      	cmp	r3, #0
10004a84:	d003      	beq.n	10004a8e <HAL_RCCEx_PeriphCLKConfig+0xf0e>
        {
          return status;
10004a86:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004a8a:	f000 be1d 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004a8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a92:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004a96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004a9a:	f043 0320 	orr.w	r3, r3, #32
10004a9e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004aa2:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10004aa4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004aa8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10004aac:	f023 0103 	bic.w	r1, r3, #3
10004ab0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004ab4:	681b      	ldr	r3, [r3, #0]
10004ab6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10004aba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004abe:	430b      	orrs	r3, r1
10004ac0:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10004ac4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004ac8:	681b      	ldr	r3, [r3, #0]
10004aca:	e9d3 0100 	ldrd	r0, r1, [r3]
10004ace:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
10004ad2:	f04f 0300 	mov.w	r3, #0
10004ad6:	ea00 0402 	and.w	r4, r0, r2
10004ada:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
10004ade:	400b      	ands	r3, r1
10004ae0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
10004ae4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
10004ae8:	4323      	orrs	r3, r4
10004aea:	d053      	beq.n	10004b94 <HAL_RCCEx_PeriphCLKConfig+0x1014>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10004aec:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004af0:	681b      	ldr	r3, [r3, #0]
10004af2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10004af6:	2b01      	cmp	r3, #1
10004af8:	d002      	beq.n	10004b00 <HAL_RCCEx_PeriphCLKConfig+0xf80>
10004afa:	2b02      	cmp	r3, #2
10004afc:	d01d      	beq.n	10004b3a <HAL_RCCEx_PeriphCLKConfig+0xfba>
10004afe:	e039      	b.n	10004b74 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004b00:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004b04:	681b      	ldr	r3, [r3, #0]
10004b06:	3344      	adds	r3, #68	; 0x44
10004b08:	4618      	mov	r0, r3
10004b0a:	f7fe fd77 	bl	100035fc <RCCEx_PLL3_Config>
10004b0e:	4603      	mov	r3, r0
10004b10:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004b14:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004b18:	2b00      	cmp	r3, #0
10004b1a:	d003      	beq.n	10004b24 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
        {
          return status;
10004b1c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004b20:	f000 bdd2 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004b24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b28:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004b2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004b34:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004b38:	e01c      	b.n	10004b74 <HAL_RCCEx_PeriphCLKConfig+0xff4>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004b3a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004b3e:	681b      	ldr	r3, [r3, #0]
10004b40:	3380      	adds	r3, #128	; 0x80
10004b42:	4618      	mov	r0, r3
10004b44:	f7fe fec4 	bl	100038d0 <RCCEx_PLL4_Config>
10004b48:	4603      	mov	r3, r0
10004b4a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004b4e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004b52:	2b00      	cmp	r3, #0
10004b54:	d003      	beq.n	10004b5e <HAL_RCCEx_PeriphCLKConfig+0xfde>
        {
          return status;
10004b56:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004b5a:	f000 bdb5 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004b5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b62:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004b66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b6a:	f043 0310 	orr.w	r3, r3, #16
10004b6e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004b72:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10004b74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b78:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10004b7c:	f023 0103 	bic.w	r1, r3, #3
10004b80:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004b84:	681b      	ldr	r3, [r3, #0]
10004b86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10004b8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b8e:	430b      	orrs	r3, r1
10004b90:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10004b94:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004b98:	681b      	ldr	r3, [r3, #0]
10004b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
10004b9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10004ba2:	f04f 0300 	mov.w	r3, #0
10004ba6:	ea00 0402 	and.w	r4, r0, r2
10004baa:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
10004bae:	400b      	ands	r3, r1
10004bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
10004bb4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
10004bb8:	4323      	orrs	r3, r4
10004bba:	d053      	beq.n	10004c64 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10004bbc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004bc0:	681b      	ldr	r3, [r3, #0]
10004bc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10004bc6:	2b01      	cmp	r3, #1
10004bc8:	d002      	beq.n	10004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
10004bca:	2b02      	cmp	r3, #2
10004bcc:	d01d      	beq.n	10004c0a <HAL_RCCEx_PeriphCLKConfig+0x108a>
10004bce:	e039      	b.n	10004c44 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004bd0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004bd4:	681b      	ldr	r3, [r3, #0]
10004bd6:	3344      	adds	r3, #68	; 0x44
10004bd8:	4618      	mov	r0, r3
10004bda:	f7fe fd0f 	bl	100035fc <RCCEx_PLL3_Config>
10004bde:	4603      	mov	r3, r0
10004be0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004be4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004be8:	2b00      	cmp	r3, #0
10004bea:	d003      	beq.n	10004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
        {
          return status;
10004bec:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004bf0:	f000 bd6a 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004bf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bf8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004bfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004c04:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004c08:	e01c      	b.n	10004c44 <HAL_RCCEx_PeriphCLKConfig+0x10c4>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004c0a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004c0e:	681b      	ldr	r3, [r3, #0]
10004c10:	3380      	adds	r3, #128	; 0x80
10004c12:	4618      	mov	r0, r3
10004c14:	f7fe fe5c 	bl	100038d0 <RCCEx_PLL4_Config>
10004c18:	4603      	mov	r3, r0
10004c1a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004c1e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004c22:	2b00      	cmp	r3, #0
10004c24:	d003      	beq.n	10004c2e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
        {
          return status;
10004c26:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004c2a:	f000 bd4d 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004c2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c32:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004c36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004c3a:	f043 0310 	orr.w	r3, r3, #16
10004c3e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004c42:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10004c44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c48:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10004c4c:	f023 0103 	bic.w	r1, r3, #3
10004c50:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004c54:	681b      	ldr	r3, [r3, #0]
10004c56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10004c5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004c5e:	430b      	orrs	r3, r1
10004c60:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10004c64:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004c68:	681b      	ldr	r3, [r3, #0]
10004c6a:	e9d3 0100 	ldrd	r0, r1, [r3]
10004c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
10004c72:	f04f 0300 	mov.w	r3, #0
10004c76:	ea00 0402 	and.w	r4, r0, r2
10004c7a:	67bc      	str	r4, [r7, #120]	; 0x78
10004c7c:	400b      	ands	r3, r1
10004c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
10004c80:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
10004c84:	4323      	orrs	r3, r4
10004c86:	d074      	beq.n	10004d72 <HAL_RCCEx_PeriphCLKConfig+0x11f2>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10004c88:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004c8c:	681b      	ldr	r3, [r3, #0]
10004c8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10004c92:	2b03      	cmp	r3, #3
10004c94:	d040      	beq.n	10004d18 <HAL_RCCEx_PeriphCLKConfig+0x1198>
10004c96:	2b03      	cmp	r3, #3
10004c98:	d85b      	bhi.n	10004d52 <HAL_RCCEx_PeriphCLKConfig+0x11d2>
10004c9a:	2b01      	cmp	r3, #1
10004c9c:	d002      	beq.n	10004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1124>
10004c9e:	2b02      	cmp	r3, #2
10004ca0:	d01d      	beq.n	10004cde <HAL_RCCEx_PeriphCLKConfig+0x115e>
10004ca2:	e056      	b.n	10004d52 <HAL_RCCEx_PeriphCLKConfig+0x11d2>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004ca4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004ca8:	681b      	ldr	r3, [r3, #0]
10004caa:	3344      	adds	r3, #68	; 0x44
10004cac:	4618      	mov	r0, r3
10004cae:	f7fe fca5 	bl	100035fc <RCCEx_PLL3_Config>
10004cb2:	4603      	mov	r3, r0
10004cb4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004cb8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004cbc:	2b00      	cmp	r3, #0
10004cbe:	d003      	beq.n	10004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
        {
          return status;
10004cc0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004cc4:	f000 bd00 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004cc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ccc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004cd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004cd4:	f043 0320 	orr.w	r3, r3, #32
10004cd8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004cdc:	e039      	b.n	10004d52 <HAL_RCCEx_PeriphCLKConfig+0x11d2>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004cde:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004ce2:	681b      	ldr	r3, [r3, #0]
10004ce4:	3380      	adds	r3, #128	; 0x80
10004ce6:	4618      	mov	r0, r3
10004ce8:	f7fe fdf2 	bl	100038d0 <RCCEx_PLL4_Config>
10004cec:	4603      	mov	r3, r0
10004cee:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004cf2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004cf6:	2b00      	cmp	r3, #0
10004cf8:	d003      	beq.n	10004d02 <HAL_RCCEx_PeriphCLKConfig+0x1182>
        {
          return status;
10004cfa:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004cfe:	f000 bce3 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004d02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d06:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004d0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d0e:	f043 0320 	orr.w	r3, r3, #32
10004d12:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004d16:	e01c      	b.n	10004d52 <HAL_RCCEx_PeriphCLKConfig+0x11d2>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004d18:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004d1c:	681b      	ldr	r3, [r3, #0]
10004d1e:	3380      	adds	r3, #128	; 0x80
10004d20:	4618      	mov	r0, r3
10004d22:	f7fe fdd5 	bl	100038d0 <RCCEx_PLL4_Config>
10004d26:	4603      	mov	r3, r0
10004d28:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004d2c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004d30:	2b00      	cmp	r3, #0
10004d32:	d003      	beq.n	10004d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>
        {
          return status;
10004d34:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004d38:	f000 bcc6 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004d3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d40:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004d44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004d4c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004d50:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10004d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d56:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10004d5a:	f023 0103 	bic.w	r1, r3, #3
10004d5e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004d62:	681b      	ldr	r3, [r3, #0]
10004d64:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10004d68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d6c:	430b      	orrs	r3, r1
10004d6e:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10004d72:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004d76:	681b      	ldr	r3, [r3, #0]
10004d78:	e9d3 0100 	ldrd	r0, r1, [r3]
10004d7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
10004d80:	f04f 0300 	mov.w	r3, #0
10004d84:	ea00 0402 	and.w	r4, r0, r2
10004d88:	673c      	str	r4, [r7, #112]	; 0x70
10004d8a:	400b      	ands	r3, r1
10004d8c:	677b      	str	r3, [r7, #116]	; 0x74
10004d8e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
10004d92:	4323      	orrs	r3, r4
10004d94:	d053      	beq.n	10004e3e <HAL_RCCEx_PeriphCLKConfig+0x12be>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10004d96:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004d9a:	681b      	ldr	r3, [r3, #0]
10004d9c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10004da0:	2b00      	cmp	r3, #0
10004da2:	d002      	beq.n	10004daa <HAL_RCCEx_PeriphCLKConfig+0x122a>
10004da4:	2b01      	cmp	r3, #1
10004da6:	d01d      	beq.n	10004de4 <HAL_RCCEx_PeriphCLKConfig+0x1264>
10004da8:	e039      	b.n	10004e1e <HAL_RCCEx_PeriphCLKConfig+0x129e>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004daa:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004dae:	681b      	ldr	r3, [r3, #0]
10004db0:	3380      	adds	r3, #128	; 0x80
10004db2:	4618      	mov	r0, r3
10004db4:	f7fe fd8c 	bl	100038d0 <RCCEx_PLL4_Config>
10004db8:	4603      	mov	r3, r0
10004dba:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004dbe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004dc2:	2b00      	cmp	r3, #0
10004dc4:	d003      	beq.n	10004dce <HAL_RCCEx_PeriphCLKConfig+0x124e>
        {
          return status;
10004dc6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004dca:	f000 bc7d 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004dce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dd2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004dd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004dda:	f043 0310 	orr.w	r3, r3, #16
10004dde:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004de2:	e01c      	b.n	10004e1e <HAL_RCCEx_PeriphCLKConfig+0x129e>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004de4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004de8:	681b      	ldr	r3, [r3, #0]
10004dea:	3344      	adds	r3, #68	; 0x44
10004dec:	4618      	mov	r0, r3
10004dee:	f7fe fc05 	bl	100035fc <RCCEx_PLL3_Config>
10004df2:	4603      	mov	r3, r0
10004df4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004df8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004dfc:	2b00      	cmp	r3, #0
10004dfe:	d003      	beq.n	10004e08 <HAL_RCCEx_PeriphCLKConfig+0x1288>
        {
          return status;
10004e00:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004e04:	f000 bc60 	b.w	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004e08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e0c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004e10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004e14:	f043 0320 	orr.w	r3, r3, #32
10004e18:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004e1c:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10004e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e22:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10004e26:	f023 0103 	bic.w	r1, r3, #3
10004e2a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004e2e:	681b      	ldr	r3, [r3, #0]
10004e30:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10004e34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004e38:	430b      	orrs	r3, r1
10004e3a:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10004e3e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004e42:	681b      	ldr	r3, [r3, #0]
10004e44:	e9d3 0100 	ldrd	r0, r1, [r3]
10004e48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10004e4c:	f04f 0300 	mov.w	r3, #0
10004e50:	ea00 0402 	and.w	r4, r0, r2
10004e54:	66bc      	str	r4, [r7, #104]	; 0x68
10004e56:	400b      	ands	r3, r1
10004e58:	66fb      	str	r3, [r7, #108]	; 0x6c
10004e5a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
10004e5e:	4323      	orrs	r3, r4
10004e60:	d00f      	beq.n	10004e82 <HAL_RCCEx_PeriphCLKConfig+0x1302>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10004e62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e66:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10004e6a:	f023 0103 	bic.w	r1, r3, #3
10004e6e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004e72:	681b      	ldr	r3, [r3, #0]
10004e74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
10004e78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004e7c:	430b      	orrs	r3, r1
10004e7e:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10004e82:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004e86:	681b      	ldr	r3, [r3, #0]
10004e88:	e9d3 0100 	ldrd	r0, r1, [r3]
10004e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
10004e90:	f04f 0300 	mov.w	r3, #0
10004e94:	ea00 0402 	and.w	r4, r0, r2
10004e98:	663c      	str	r4, [r7, #96]	; 0x60
10004e9a:	400b      	ands	r3, r1
10004e9c:	667b      	str	r3, [r7, #100]	; 0x64
10004e9e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
10004ea2:	4323      	orrs	r3, r4
10004ea4:	d031      	beq.n	10004f0a <HAL_RCCEx_PeriphCLKConfig+0x138a>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10004ea6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004eaa:	681b      	ldr	r3, [r3, #0]
10004eac:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10004eb0:	2b01      	cmp	r3, #1
10004eb2:	d11a      	bne.n	10004eea <HAL_RCCEx_PeriphCLKConfig+0x136a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004eb4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004eb8:	681b      	ldr	r3, [r3, #0]
10004eba:	3380      	adds	r3, #128	; 0x80
10004ebc:	4618      	mov	r0, r3
10004ebe:	f7fe fd07 	bl	100038d0 <RCCEx_PLL4_Config>
10004ec2:	4603      	mov	r3, r0
10004ec4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004ec8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004ecc:	2b00      	cmp	r3, #0
10004ece:	d002      	beq.n	10004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1356>
      {
        return status;
10004ed0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004ed4:	e3f8      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004ed6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eda:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004ede:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004ee6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10004eea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eee:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10004ef2:	f023 0103 	bic.w	r1, r3, #3
10004ef6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004efa:	681b      	ldr	r3, [r3, #0]
10004efc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10004f00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004f04:	430b      	orrs	r3, r1
10004f06:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10004f0a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004f0e:	681b      	ldr	r3, [r3, #0]
10004f10:	e9d3 0100 	ldrd	r0, r1, [r3]
10004f14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
10004f18:	f04f 0300 	mov.w	r3, #0
10004f1c:	ea00 0402 	and.w	r4, r0, r2
10004f20:	65bc      	str	r4, [r7, #88]	; 0x58
10004f22:	400b      	ands	r3, r1
10004f24:	65fb      	str	r3, [r7, #92]	; 0x5c
10004f26:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
10004f2a:	4323      	orrs	r3, r4
10004f2c:	d031      	beq.n	10004f92 <HAL_RCCEx_PeriphCLKConfig+0x1412>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10004f2e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004f32:	681b      	ldr	r3, [r3, #0]
10004f34:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10004f38:	2b00      	cmp	r3, #0
10004f3a:	d11a      	bne.n	10004f72 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004f3c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004f40:	681b      	ldr	r3, [r3, #0]
10004f42:	3380      	adds	r3, #128	; 0x80
10004f44:	4618      	mov	r0, r3
10004f46:	f7fe fcc3 	bl	100038d0 <RCCEx_PLL4_Config>
10004f4a:	4603      	mov	r3, r0
10004f4c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004f50:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004f54:	2b00      	cmp	r3, #0
10004f56:	d002      	beq.n	10004f5e <HAL_RCCEx_PeriphCLKConfig+0x13de>
      {
        return status;
10004f58:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004f5c:	e3b4      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004f5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f62:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004f66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004f6e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10004f72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f76:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10004f7a:	f023 0110 	bic.w	r1, r3, #16
10004f7e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004f82:	681b      	ldr	r3, [r3, #0]
10004f84:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10004f88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004f8c:	430b      	orrs	r3, r1
10004f8e:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10004f92:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004f96:	681b      	ldr	r3, [r3, #0]
10004f98:	e9d3 0100 	ldrd	r0, r1, [r3]
10004f9c:	f04f 0200 	mov.w	r2, #0
10004fa0:	f04f 0304 	mov.w	r3, #4
10004fa4:	ea00 0402 	and.w	r4, r0, r2
10004fa8:	653c      	str	r4, [r7, #80]	; 0x50
10004faa:	400b      	ands	r3, r1
10004fac:	657b      	str	r3, [r7, #84]	; 0x54
10004fae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
10004fb2:	4323      	orrs	r3, r4
10004fb4:	d031      	beq.n	1000501a <HAL_RCCEx_PeriphCLKConfig+0x149a>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10004fb6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004fba:	681b      	ldr	r3, [r3, #0]
10004fbc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10004fc0:	2b01      	cmp	r3, #1
10004fc2:	d11a      	bne.n	10004ffa <HAL_RCCEx_PeriphCLKConfig+0x147a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004fc4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10004fc8:	681b      	ldr	r3, [r3, #0]
10004fca:	3380      	adds	r3, #128	; 0x80
10004fcc:	4618      	mov	r0, r3
10004fce:	f7fe fc7f 	bl	100038d0 <RCCEx_PLL4_Config>
10004fd2:	4603      	mov	r3, r0
10004fd4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004fd8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004fdc:	2b00      	cmp	r3, #0
10004fde:	d002      	beq.n	10004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
      {
        return status;
10004fe0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004fe4:	e370      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004fe6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fea:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004fee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004ff6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10004ffa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ffe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10005002:	f023 0103 	bic.w	r1, r3, #3
10005006:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000500a:	681b      	ldr	r3, [r3, #0]
1000500c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10005010:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005014:	430b      	orrs	r3, r1
10005016:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
1000501a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000501e:	681b      	ldr	r3, [r3, #0]
10005020:	e9d3 0100 	ldrd	r0, r1, [r3]
10005024:	f04f 0200 	mov.w	r2, #0
10005028:	f04f 0308 	mov.w	r3, #8
1000502c:	ea00 0402 	and.w	r4, r0, r2
10005030:	64bc      	str	r4, [r7, #72]	; 0x48
10005032:	400b      	ands	r3, r1
10005034:	64fb      	str	r3, [r7, #76]	; 0x4c
10005036:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
1000503a:	4323      	orrs	r3, r4
1000503c:	d031      	beq.n	100050a2 <HAL_RCCEx_PeriphCLKConfig+0x1522>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
1000503e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005042:	681b      	ldr	r3, [r3, #0]
10005044:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10005048:	2b01      	cmp	r3, #1
1000504a:	d11a      	bne.n	10005082 <HAL_RCCEx_PeriphCLKConfig+0x1502>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000504c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005050:	681b      	ldr	r3, [r3, #0]
10005052:	3380      	adds	r3, #128	; 0x80
10005054:	4618      	mov	r0, r3
10005056:	f7fe fc3b 	bl	100038d0 <RCCEx_PLL4_Config>
1000505a:	4603      	mov	r3, r0
1000505c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005060:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005064:	2b00      	cmp	r3, #0
10005066:	d002      	beq.n	1000506e <HAL_RCCEx_PeriphCLKConfig+0x14ee>
      {
        return status;
10005068:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000506c:	e32c      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000506e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005072:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005076:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000507a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000507e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
10005082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005086:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
1000508a:	f023 0103 	bic.w	r1, r3, #3
1000508e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005092:	681b      	ldr	r3, [r3, #0]
10005094:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10005098:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000509c:	430b      	orrs	r3, r1
1000509e:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
100050a2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100050a6:	681b      	ldr	r3, [r3, #0]
100050a8:	e9d3 0100 	ldrd	r0, r1, [r3]
100050ac:	f04f 0200 	mov.w	r2, #0
100050b0:	f04f 0310 	mov.w	r3, #16
100050b4:	ea00 0402 	and.w	r4, r0, r2
100050b8:	643c      	str	r4, [r7, #64]	; 0x40
100050ba:	400b      	ands	r3, r1
100050bc:	647b      	str	r3, [r7, #68]	; 0x44
100050be:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
100050c2:	4323      	orrs	r3, r4
100050c4:	d00f      	beq.n	100050e6 <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
100050c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100050ce:	f023 0103 	bic.w	r1, r3, #3
100050d2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100050d6:	681b      	ldr	r3, [r3, #0]
100050d8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
100050dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100050e0:	430b      	orrs	r3, r1
100050e2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
100050e6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100050ea:	681b      	ldr	r3, [r3, #0]
100050ec:	e9d3 0100 	ldrd	r0, r1, [r3]
100050f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
100050f4:	f04f 0300 	mov.w	r3, #0
100050f8:	ea00 0402 	and.w	r4, r0, r2
100050fc:	63bc      	str	r4, [r7, #56]	; 0x38
100050fe:	400b      	ands	r3, r1
10005100:	63fb      	str	r3, [r7, #60]	; 0x3c
10005102:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
10005106:	4323      	orrs	r3, r4
10005108:	d031      	beq.n	1000516e <HAL_RCCEx_PeriphCLKConfig+0x15ee>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
1000510a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000510e:	681b      	ldr	r3, [r3, #0]
10005110:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10005114:	2b01      	cmp	r3, #1
10005116:	d11a      	bne.n	1000514e <HAL_RCCEx_PeriphCLKConfig+0x15ce>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005118:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000511c:	681b      	ldr	r3, [r3, #0]
1000511e:	3380      	adds	r3, #128	; 0x80
10005120:	4618      	mov	r0, r3
10005122:	f7fe fbd5 	bl	100038d0 <RCCEx_PLL4_Config>
10005126:	4603      	mov	r3, r0
10005128:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000512c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005130:	2b00      	cmp	r3, #0
10005132:	d002      	beq.n	1000513a <HAL_RCCEx_PeriphCLKConfig+0x15ba>
      {
        return status;
10005134:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005138:	e2c6      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000513a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000513e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005142:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005146:	f043 0310 	orr.w	r3, r3, #16
1000514a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
1000514e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005152:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10005156:	f023 0101 	bic.w	r1, r3, #1
1000515a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000515e:	681b      	ldr	r3, [r3, #0]
10005160:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10005164:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005168:	430b      	orrs	r3, r1
1000516a:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
1000516e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005172:	681b      	ldr	r3, [r3, #0]
10005174:	e9d3 0100 	ldrd	r0, r1, [r3]
10005178:	f04f 0208 	mov.w	r2, #8
1000517c:	f04f 0300 	mov.w	r3, #0
10005180:	ea00 0402 	and.w	r4, r0, r2
10005184:	633c      	str	r4, [r7, #48]	; 0x30
10005186:	400b      	ands	r3, r1
10005188:	637b      	str	r3, [r7, #52]	; 0x34
1000518a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
1000518e:	4323      	orrs	r3, r4
10005190:	d051      	beq.n	10005236 <HAL_RCCEx_PeriphCLKConfig+0x16b6>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10005192:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005196:	681b      	ldr	r3, [r3, #0]
10005198:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000519c:	2b00      	cmp	r3, #0
1000519e:	d002      	beq.n	100051a6 <HAL_RCCEx_PeriphCLKConfig+0x1626>
100051a0:	2b02      	cmp	r3, #2
100051a2:	d01c      	beq.n	100051de <HAL_RCCEx_PeriphCLKConfig+0x165e>
100051a4:	e037      	b.n	10005216 <HAL_RCCEx_PeriphCLKConfig+0x1696>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100051a6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100051aa:	681b      	ldr	r3, [r3, #0]
100051ac:	3380      	adds	r3, #128	; 0x80
100051ae:	4618      	mov	r0, r3
100051b0:	f7fe fb8e 	bl	100038d0 <RCCEx_PLL4_Config>
100051b4:	4603      	mov	r3, r0
100051b6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100051ba:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100051be:	2b00      	cmp	r3, #0
100051c0:	d002      	beq.n	100051c8 <HAL_RCCEx_PeriphCLKConfig+0x1648>
        {
          return status;
100051c2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100051c6:	e27f      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100051c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051cc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100051d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100051d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100051d8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100051dc:	e01b      	b.n	10005216 <HAL_RCCEx_PeriphCLKConfig+0x1696>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100051de:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100051e2:	681b      	ldr	r3, [r3, #0]
100051e4:	3344      	adds	r3, #68	; 0x44
100051e6:	4618      	mov	r0, r3
100051e8:	f7fe fa08 	bl	100035fc <RCCEx_PLL3_Config>
100051ec:	4603      	mov	r3, r0
100051ee:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100051f2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100051f6:	2b00      	cmp	r3, #0
100051f8:	d002      	beq.n	10005200 <HAL_RCCEx_PeriphCLKConfig+0x1680>
        {
          return status;
100051fa:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100051fe:	e263      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005204:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005208:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000520c:	f043 0320 	orr.w	r3, r3, #32
10005210:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005214:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
10005216:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000521a:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
1000521e:	f023 0103 	bic.w	r1, r3, #3
10005222:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005226:	681b      	ldr	r3, [r3, #0]
10005228:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000522c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005230:	430b      	orrs	r3, r1
10005232:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10005236:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000523a:	681b      	ldr	r3, [r3, #0]
1000523c:	e9d3 0100 	ldrd	r0, r1, [r3]
10005240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
10005244:	f04f 0300 	mov.w	r3, #0
10005248:	ea00 0402 	and.w	r4, r0, r2
1000524c:	62bc      	str	r4, [r7, #40]	; 0x28
1000524e:	400b      	ands	r3, r1
10005250:	62fb      	str	r3, [r7, #44]	; 0x2c
10005252:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
10005256:	4323      	orrs	r3, r4
10005258:	d050      	beq.n	100052fc <HAL_RCCEx_PeriphCLKConfig+0x177c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
1000525a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000525e:	681b      	ldr	r3, [r3, #0]
10005260:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10005264:	2b01      	cmp	r3, #1
10005266:	d01d      	beq.n	100052a4 <HAL_RCCEx_PeriphCLKConfig+0x1724>
10005268:	2b02      	cmp	r3, #2
1000526a:	d137      	bne.n	100052dc <HAL_RCCEx_PeriphCLKConfig+0x175c>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000526c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005270:	681b      	ldr	r3, [r3, #0]
10005272:	3344      	adds	r3, #68	; 0x44
10005274:	4618      	mov	r0, r3
10005276:	f7fe f9c1 	bl	100035fc <RCCEx_PLL3_Config>
1000527a:	4603      	mov	r3, r0
1000527c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005280:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005284:	2b00      	cmp	r3, #0
10005286:	d002      	beq.n	1000528e <HAL_RCCEx_PeriphCLKConfig+0x170e>
        {
          return status;
10005288:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000528c:	e21c      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000528e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005292:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005296:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000529a:	f043 0320 	orr.w	r3, r3, #32
1000529e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100052a2:	e01b      	b.n	100052dc <HAL_RCCEx_PeriphCLKConfig+0x175c>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100052a4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100052a8:	681b      	ldr	r3, [r3, #0]
100052aa:	3380      	adds	r3, #128	; 0x80
100052ac:	4618      	mov	r0, r3
100052ae:	f7fe fb0f 	bl	100038d0 <RCCEx_PLL4_Config>
100052b2:	4603      	mov	r3, r0
100052b4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100052b8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100052bc:	2b00      	cmp	r3, #0
100052be:	d002      	beq.n	100052c6 <HAL_RCCEx_PeriphCLKConfig+0x1746>
        {
          return status;
100052c0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100052c4:	e200      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100052c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052ca:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100052ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100052d2:	f043 0310 	orr.w	r3, r3, #16
100052d6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100052da:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
100052dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052e0:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
100052e4:	f023 0207 	bic.w	r2, r3, #7
100052e8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100052ec:	681b      	ldr	r3, [r3, #0]
100052ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100052f2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100052f6:	4313      	orrs	r3, r2
100052f8:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
100052fc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005300:	681b      	ldr	r3, [r3, #0]
10005302:	e9d3 2300 	ldrd	r2, r3, [r3]
10005306:	f44f 3080 	mov.w	r0, #65536	; 0x10000
1000530a:	f04f 0100 	mov.w	r1, #0
1000530e:	ea02 0400 	and.w	r4, r2, r0
10005312:	623c      	str	r4, [r7, #32]
10005314:	400b      	ands	r3, r1
10005316:	627b      	str	r3, [r7, #36]	; 0x24
10005318:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
1000531c:	4323      	orrs	r3, r4
1000531e:	d031      	beq.n	10005384 <HAL_RCCEx_PeriphCLKConfig+0x1804>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10005320:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005324:	681b      	ldr	r3, [r3, #0]
10005326:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
1000532a:	2b01      	cmp	r3, #1
1000532c:	d11a      	bne.n	10005364 <HAL_RCCEx_PeriphCLKConfig+0x17e4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000532e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005332:	681b      	ldr	r3, [r3, #0]
10005334:	3380      	adds	r3, #128	; 0x80
10005336:	4618      	mov	r0, r3
10005338:	f7fe faca 	bl	100038d0 <RCCEx_PLL4_Config>
1000533c:	4603      	mov	r3, r0
1000533e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005342:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005346:	2b00      	cmp	r3, #0
10005348:	d002      	beq.n	10005350 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
      {
        return status;
1000534a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000534e:	e1bb      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005350:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005354:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005358:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000535c:	f043 0320 	orr.w	r3, r3, #32
10005360:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10005364:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005368:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
1000536c:	f023 0207 	bic.w	r2, r3, #7
10005370:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005374:	681b      	ldr	r3, [r3, #0]
10005376:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
1000537a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000537e:	4313      	orrs	r3, r2
10005380:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10005384:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005388:	681b      	ldr	r3, [r3, #0]
1000538a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000538e:	f04f 0040 	mov.w	r0, #64	; 0x40
10005392:	f04f 0100 	mov.w	r1, #0
10005396:	ea02 0400 	and.w	r4, r2, r0
1000539a:	61bc      	str	r4, [r7, #24]
1000539c:	400b      	ands	r3, r1
1000539e:	61fb      	str	r3, [r7, #28]
100053a0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
100053a4:	4323      	orrs	r3, r4
100053a6:	d050      	beq.n	1000544a <HAL_RCCEx_PeriphCLKConfig+0x18ca>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100053a8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100053ac:	681b      	ldr	r3, [r3, #0]
100053ae:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
100053b2:	2b01      	cmp	r3, #1
100053b4:	d01d      	beq.n	100053f2 <HAL_RCCEx_PeriphCLKConfig+0x1872>
100053b6:	2b02      	cmp	r3, #2
100053b8:	d137      	bne.n	1000542a <HAL_RCCEx_PeriphCLKConfig+0x18aa>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100053ba:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100053be:	681b      	ldr	r3, [r3, #0]
100053c0:	3344      	adds	r3, #68	; 0x44
100053c2:	4618      	mov	r0, r3
100053c4:	f7fe f91a 	bl	100035fc <RCCEx_PLL3_Config>
100053c8:	4603      	mov	r3, r0
100053ca:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100053ce:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100053d2:	2b00      	cmp	r3, #0
100053d4:	d002      	beq.n	100053dc <HAL_RCCEx_PeriphCLKConfig+0x185c>
        {
          return status;
100053d6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100053da:	e175      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100053dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053e0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100053e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053e8:	f043 0320 	orr.w	r3, r3, #32
100053ec:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100053f0:	e01b      	b.n	1000542a <HAL_RCCEx_PeriphCLKConfig+0x18aa>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100053f2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100053f6:	681b      	ldr	r3, [r3, #0]
100053f8:	3380      	adds	r3, #128	; 0x80
100053fa:	4618      	mov	r0, r3
100053fc:	f7fe fa68 	bl	100038d0 <RCCEx_PLL4_Config>
10005400:	4603      	mov	r3, r0
10005402:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005406:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000540a:	2b00      	cmp	r3, #0
1000540c:	d002      	beq.n	10005414 <HAL_RCCEx_PeriphCLKConfig+0x1894>
        {
          return status;
1000540e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005412:	e159      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005414:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005418:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000541c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005420:	f043 0310 	orr.w	r3, r3, #16
10005424:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005428:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
1000542a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000542e:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10005432:	f023 0207 	bic.w	r2, r3, #7
10005436:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000543a:	681b      	ldr	r3, [r3, #0]
1000543c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10005440:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005444:	4313      	orrs	r3, r2
10005446:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
1000544a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000544e:	681b      	ldr	r3, [r3, #0]
10005450:	e9d3 2300 	ldrd	r2, r3, [r3]
10005454:	f44f 5080 	mov.w	r0, #4096	; 0x1000
10005458:	f04f 0100 	mov.w	r1, #0
1000545c:	ea02 0400 	and.w	r4, r2, r0
10005460:	613c      	str	r4, [r7, #16]
10005462:	400b      	ands	r3, r1
10005464:	617b      	str	r3, [r7, #20]
10005466:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
1000546a:	4323      	orrs	r3, r4
1000546c:	f000 80b5 	beq.w	100055da <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10005470:	4b98      	ldr	r3, [pc, #608]	; (100056d4 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
10005472:	681b      	ldr	r3, [r3, #0]
10005474:	4a97      	ldr	r2, [pc, #604]	; (100056d4 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
10005476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000547a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000547c:	f7fb fbe8 	bl	10000c50 <HAL_GetTick>
10005480:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10005484:	e00a      	b.n	1000549c <HAL_RCCEx_PeriphCLKConfig+0x191c>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10005486:	f7fb fbe3 	bl	10000c50 <HAL_GetTick>
1000548a:	4602      	mov	r2, r0
1000548c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10005490:	1ad3      	subs	r3, r2, r3
10005492:	2b64      	cmp	r3, #100	; 0x64
10005494:	d902      	bls.n	1000549c <HAL_RCCEx_PeriphCLKConfig+0x191c>
      {
        ret = HAL_TIMEOUT;
10005496:	2303      	movs	r3, #3
10005498:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000549c:	4b8d      	ldr	r3, [pc, #564]	; (100056d4 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
1000549e:	681b      	ldr	r3, [r3, #0]
100054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
100054a4:	2b00      	cmp	r3, #0
100054a6:	d0ee      	beq.n	10005486 <HAL_RCCEx_PeriphCLKConfig+0x1906>
      }
    }

    if (ret == HAL_OK)
100054a8:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100054ac:	2b00      	cmp	r3, #0
100054ae:	f040 8091 	bne.w	100055d4 <HAL_RCCEx_PeriphCLKConfig+0x1a54>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
100054b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054b6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100054ba:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100054be:	681b      	ldr	r3, [r3, #0]
100054c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100054c4:	4053      	eors	r3, r2
100054c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
100054ca:	2b00      	cmp	r3, #0
100054cc:	d077      	beq.n	100055be <HAL_RCCEx_PeriphCLKConfig+0x1a3e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
100054ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100054d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
100054da:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
100054de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100054e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
100054ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
100054f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100054fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10005502:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10005506:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000550a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000550e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
10005512:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10005516:	f003 0330 	and.w	r3, r3, #48	; 0x30
1000551a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000551e:	4313      	orrs	r3, r2
10005520:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10005524:	f507 7390 	add.w	r3, r7, #288	; 0x120
10005528:	2204      	movs	r2, #4
1000552a:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
1000552c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10005530:	f003 020b 	and.w	r2, r3, #11
10005534:	f507 7390 	add.w	r3, r7, #288	; 0x120
10005538:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
1000553a:	f507 7390 	add.w	r3, r7, #288	; 0x120
1000553e:	2200      	movs	r2, #0
10005540:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10005542:	f507 7390 	add.w	r3, r7, #288	; 0x120
10005546:	2200      	movs	r2, #0
10005548:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000554a:	f507 7390 	add.w	r3, r7, #288	; 0x120
1000554e:	2200      	movs	r2, #0
10005550:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10005554:	f507 7390 	add.w	r3, r7, #288	; 0x120
10005558:	2200      	movs	r2, #0
1000555a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
1000555e:	f507 7390 	add.w	r3, r7, #288	; 0x120
10005562:	4618      	mov	r0, r3
10005564:	f7fc fcf2 	bl	10001f4c <HAL_RCC_OscConfig>
10005568:	4603      	mov	r3, r0
1000556a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        if (ret != HAL_OK)
1000556e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10005572:	2b00      	cmp	r3, #0
10005574:	d002      	beq.n	1000557c <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return ret;
10005576:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
1000557a:	e0a5      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
1000557c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005580:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10005584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
10005588:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000558c:	681b      	ldr	r3, [r3, #0]
1000558e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
10005592:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005596:	4313      	orrs	r3, r2
10005598:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
1000559c:	4b4e      	ldr	r3, [pc, #312]	; (100056d8 <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
1000559e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
100055a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055a6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100055aa:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
100055ae:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
100055b2:	400b      	ands	r3, r1
100055b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100055b8:	4313      	orrs	r3, r2
100055ba:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
100055be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100055c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100055ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100055ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100055d2:	e002      	b.n	100055da <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
100055d4:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100055d8:	e076      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
100055da:	f507 738e 	add.w	r3, r7, #284	; 0x11c
100055de:	681b      	ldr	r3, [r3, #0]
100055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
100055e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
100055e8:	f04f 0100 	mov.w	r1, #0
100055ec:	ea02 0400 	and.w	r4, r2, r0
100055f0:	60bc      	str	r4, [r7, #8]
100055f2:	400b      	ands	r3, r1
100055f4:	60fb      	str	r3, [r7, #12]
100055f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
100055fa:	4323      	orrs	r3, r4
100055fc:	d028      	beq.n	10005650 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
100055fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005602:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10005606:	f023 0201 	bic.w	r2, r3, #1
1000560a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
1000560e:	681b      	ldr	r3, [r3, #0]
10005610:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
10005614:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005618:	4313      	orrs	r3, r2
1000561a:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000561e:	f7fb fb17 	bl	10000c50 <HAL_GetTick>
10005622:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10005626:	e00a      	b.n	1000563e <HAL_RCCEx_PeriphCLKConfig+0x1abe>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005628:	f7fb fb12 	bl	10000c50 <HAL_GetTick>
1000562c:	4602      	mov	r2, r0
1000562e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10005632:	1ad3      	subs	r3, r2, r3
10005634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10005638:	d901      	bls.n	1000563e <HAL_RCCEx_PeriphCLKConfig+0x1abe>
      {
        return HAL_TIMEOUT;
1000563a:	2303      	movs	r3, #3
1000563c:	e044      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000563e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005642:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10005646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000564a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000564e:	d1eb      	bne.n	10005628 <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10005650:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005654:	681b      	ldr	r3, [r3, #0]
10005656:	e9d3 2300 	ldrd	r2, r3, [r3]
1000565a:	f44f 6000 	mov.w	r0, #2048	; 0x800
1000565e:	f04f 0100 	mov.w	r1, #0
10005662:	ea02 0400 	and.w	r4, r2, r0
10005666:	603c      	str	r4, [r7, #0]
10005668:	400b      	ands	r3, r1
1000566a:	607b      	str	r3, [r7, #4]
1000566c:	e9d7 3400 	ldrd	r3, r4, [r7]
10005670:	4323      	orrs	r3, r4
10005672:	d028      	beq.n	100056c6 <HAL_RCCEx_PeriphCLKConfig+0x1b46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10005674:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005678:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
1000567c:	f023 0201 	bic.w	r2, r3, #1
10005680:	f507 738e 	add.w	r3, r7, #284	; 0x11c
10005684:	681b      	ldr	r3, [r3, #0]
10005686:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
1000568a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000568e:	4313      	orrs	r3, r2
10005690:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005694:	f7fb fadc 	bl	10000c50 <HAL_GetTick>
10005698:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
1000569c:	e00a      	b.n	100056b4 <HAL_RCCEx_PeriphCLKConfig+0x1b34>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000569e:	f7fb fad7 	bl	10000c50 <HAL_GetTick>
100056a2:	4602      	mov	r2, r0
100056a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100056a8:	1ad3      	subs	r3, r2, r3
100056aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100056ae:	d901      	bls.n	100056b4 <HAL_RCCEx_PeriphCLKConfig+0x1b34>
      {
        return HAL_TIMEOUT;
100056b0:	2303      	movs	r3, #3
100056b2:	e009      	b.n	100056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100056b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056b8:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
100056bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100056c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100056c4:	d1eb      	bne.n	1000569e <HAL_RCCEx_PeriphCLKConfig+0x1b1e>
      }
    }
  }

  return HAL_OK;
100056c6:	2300      	movs	r3, #0
}
100056c8:	4618      	mov	r0, r3
100056ca:	f507 7712 	add.w	r7, r7, #584	; 0x248
100056ce:	46bd      	mov	sp, r7
100056d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
100056d4:	50001000 	.word	0x50001000
100056d8:	7fecfdc0 	.word	0x7fecfdc0

100056dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
100056dc:	b580      	push	{r7, lr}
100056de:	b082      	sub	sp, #8
100056e0:	af00      	add	r7, sp, #0
100056e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
100056e4:	687b      	ldr	r3, [r7, #4]
100056e6:	2b00      	cmp	r3, #0
100056e8:	d101      	bne.n	100056ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
100056ea:	2301      	movs	r3, #1
100056ec:	e01d      	b.n	1000572a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
100056ee:	687b      	ldr	r3, [r7, #4]
100056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
100056f4:	b2db      	uxtb	r3, r3
100056f6:	2b00      	cmp	r3, #0
100056f8:	d106      	bne.n	10005708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
100056fa:	687b      	ldr	r3, [r7, #4]
100056fc:	2200      	movs	r2, #0
100056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
10005702:	6878      	ldr	r0, [r7, #4]
10005704:	f7fb f846 	bl	10000794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
10005708:	687b      	ldr	r3, [r7, #4]
1000570a:	2202      	movs	r2, #2
1000570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
10005710:	687b      	ldr	r3, [r7, #4]
10005712:	681a      	ldr	r2, [r3, #0]
10005714:	687b      	ldr	r3, [r7, #4]
10005716:	3304      	adds	r3, #4
10005718:	4619      	mov	r1, r3
1000571a:	4610      	mov	r0, r2
1000571c:	f000 fa72 	bl	10005c04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
10005720:	687b      	ldr	r3, [r7, #4]
10005722:	2201      	movs	r2, #1
10005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
10005728:	2300      	movs	r3, #0
}
1000572a:	4618      	mov	r0, r3
1000572c:	3708      	adds	r7, #8
1000572e:	46bd      	mov	sp, r7
10005730:	bd80      	pop	{r7, pc}

10005732 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
10005732:	b580      	push	{r7, lr}
10005734:	b082      	sub	sp, #8
10005736:	af00      	add	r7, sp, #0
10005738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
1000573a:	687b      	ldr	r3, [r7, #4]
1000573c:	2b00      	cmp	r3, #0
1000573e:	d101      	bne.n	10005744 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
10005740:	2301      	movs	r3, #1
10005742:	e01d      	b.n	10005780 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
10005744:	687b      	ldr	r3, [r7, #4]
10005746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
1000574a:	b2db      	uxtb	r3, r3
1000574c:	2b00      	cmp	r3, #0
1000574e:	d106      	bne.n	1000575e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
10005750:	687b      	ldr	r3, [r7, #4]
10005752:	2200      	movs	r2, #0
10005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
10005758:	6878      	ldr	r0, [r7, #4]
1000575a:	f000 f815 	bl	10005788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1000575e:	687b      	ldr	r3, [r7, #4]
10005760:	2202      	movs	r2, #2
10005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
10005766:	687b      	ldr	r3, [r7, #4]
10005768:	681a      	ldr	r2, [r3, #0]
1000576a:	687b      	ldr	r3, [r7, #4]
1000576c:	3304      	adds	r3, #4
1000576e:	4619      	mov	r1, r3
10005770:	4610      	mov	r0, r2
10005772:	f000 fa47 	bl	10005c04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
10005776:	687b      	ldr	r3, [r7, #4]
10005778:	2201      	movs	r2, #1
1000577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
1000577e:	2300      	movs	r3, #0
}
10005780:	4618      	mov	r0, r3
10005782:	3708      	adds	r7, #8
10005784:	46bd      	mov	sp, r7
10005786:	bd80      	pop	{r7, pc}

10005788 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
10005788:	b480      	push	{r7}
1000578a:	b083      	sub	sp, #12
1000578c:	af00      	add	r7, sp, #0
1000578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
10005790:	bf00      	nop
10005792:	370c      	adds	r7, #12
10005794:	46bd      	mov	sp, r7
10005796:	f85d 7b04 	ldr.w	r7, [sp], #4
1000579a:	4770      	bx	lr

1000579c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
1000579c:	b580      	push	{r7, lr}
1000579e:	b084      	sub	sp, #16
100057a0:	af00      	add	r7, sp, #0
100057a2:	6078      	str	r0, [r7, #4]
100057a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
100057a6:	687b      	ldr	r3, [r7, #4]
100057a8:	681b      	ldr	r3, [r3, #0]
100057aa:	2201      	movs	r2, #1
100057ac:	6839      	ldr	r1, [r7, #0]
100057ae:	4618      	mov	r0, r3
100057b0:	f000 fe26 	bl	10006400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
100057b4:	687b      	ldr	r3, [r7, #4]
100057b6:	681b      	ldr	r3, [r3, #0]
100057b8:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
100057bc:	d013      	beq.n	100057e6 <HAL_TIM_PWM_Start+0x4a>
100057be:	687b      	ldr	r3, [r7, #4]
100057c0:	681b      	ldr	r3, [r3, #0]
100057c2:	4a1c      	ldr	r2, [pc, #112]	; (10005834 <HAL_TIM_PWM_Start+0x98>)
100057c4:	4293      	cmp	r3, r2
100057c6:	d00e      	beq.n	100057e6 <HAL_TIM_PWM_Start+0x4a>
100057c8:	687b      	ldr	r3, [r7, #4]
100057ca:	681b      	ldr	r3, [r3, #0]
100057cc:	4a1a      	ldr	r2, [pc, #104]	; (10005838 <HAL_TIM_PWM_Start+0x9c>)
100057ce:	4293      	cmp	r3, r2
100057d0:	d009      	beq.n	100057e6 <HAL_TIM_PWM_Start+0x4a>
100057d2:	687b      	ldr	r3, [r7, #4]
100057d4:	681b      	ldr	r3, [r3, #0]
100057d6:	4a19      	ldr	r2, [pc, #100]	; (1000583c <HAL_TIM_PWM_Start+0xa0>)
100057d8:	4293      	cmp	r3, r2
100057da:	d004      	beq.n	100057e6 <HAL_TIM_PWM_Start+0x4a>
100057dc:	687b      	ldr	r3, [r7, #4]
100057de:	681b      	ldr	r3, [r3, #0]
100057e0:	4a17      	ldr	r2, [pc, #92]	; (10005840 <HAL_TIM_PWM_Start+0xa4>)
100057e2:	4293      	cmp	r3, r2
100057e4:	d101      	bne.n	100057ea <HAL_TIM_PWM_Start+0x4e>
100057e6:	2301      	movs	r3, #1
100057e8:	e000      	b.n	100057ec <HAL_TIM_PWM_Start+0x50>
100057ea:	2300      	movs	r3, #0
100057ec:	2b00      	cmp	r3, #0
100057ee:	d007      	beq.n	10005800 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
100057f0:	687b      	ldr	r3, [r7, #4]
100057f2:	681b      	ldr	r3, [r3, #0]
100057f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
100057f6:	687b      	ldr	r3, [r7, #4]
100057f8:	681b      	ldr	r3, [r3, #0]
100057fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
100057fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
10005800:	687b      	ldr	r3, [r7, #4]
10005802:	681b      	ldr	r3, [r3, #0]
10005804:	689a      	ldr	r2, [r3, #8]
10005806:	4b0f      	ldr	r3, [pc, #60]	; (10005844 <HAL_TIM_PWM_Start+0xa8>)
10005808:	4013      	ands	r3, r2
1000580a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1000580c:	68fb      	ldr	r3, [r7, #12]
1000580e:	2b06      	cmp	r3, #6
10005810:	d00b      	beq.n	1000582a <HAL_TIM_PWM_Start+0x8e>
10005812:	68fb      	ldr	r3, [r7, #12]
10005814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10005818:	d007      	beq.n	1000582a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
1000581a:	687b      	ldr	r3, [r7, #4]
1000581c:	681b      	ldr	r3, [r3, #0]
1000581e:	681a      	ldr	r2, [r3, #0]
10005820:	687b      	ldr	r3, [r7, #4]
10005822:	681b      	ldr	r3, [r3, #0]
10005824:	f042 0201 	orr.w	r2, r2, #1
10005828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
1000582a:	2300      	movs	r3, #0
}
1000582c:	4618      	mov	r0, r3
1000582e:	3710      	adds	r7, #16
10005830:	46bd      	mov	sp, r7
10005832:	bd80      	pop	{r7, pc}
10005834:	44001000 	.word	0x44001000
10005838:	44006000 	.word	0x44006000
1000583c:	44007000 	.word	0x44007000
10005840:	44008000 	.word	0x44008000
10005844:	00010007 	.word	0x00010007

10005848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
10005848:	b580      	push	{r7, lr}
1000584a:	b084      	sub	sp, #16
1000584c:	af00      	add	r7, sp, #0
1000584e:	60f8      	str	r0, [r7, #12]
10005850:	60b9      	str	r1, [r7, #8]
10005852:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
10005854:	68fb      	ldr	r3, [r7, #12]
10005856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
1000585a:	2b01      	cmp	r3, #1
1000585c:	d101      	bne.n	10005862 <HAL_TIM_PWM_ConfigChannel+0x1a>
1000585e:	2302      	movs	r3, #2
10005860:	e105      	b.n	10005a6e <HAL_TIM_PWM_ConfigChannel+0x226>
10005862:	68fb      	ldr	r3, [r7, #12]
10005864:	2201      	movs	r2, #1
10005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
1000586a:	68fb      	ldr	r3, [r7, #12]
1000586c:	2202      	movs	r2, #2
1000586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
10005872:	687b      	ldr	r3, [r7, #4]
10005874:	2b14      	cmp	r3, #20
10005876:	f200 80f0 	bhi.w	10005a5a <HAL_TIM_PWM_ConfigChannel+0x212>
1000587a:	a201      	add	r2, pc, #4	; (adr r2, 10005880 <HAL_TIM_PWM_ConfigChannel+0x38>)
1000587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005880:	100058d5 	.word	0x100058d5
10005884:	10005a5b 	.word	0x10005a5b
10005888:	10005a5b 	.word	0x10005a5b
1000588c:	10005a5b 	.word	0x10005a5b
10005890:	10005915 	.word	0x10005915
10005894:	10005a5b 	.word	0x10005a5b
10005898:	10005a5b 	.word	0x10005a5b
1000589c:	10005a5b 	.word	0x10005a5b
100058a0:	10005957 	.word	0x10005957
100058a4:	10005a5b 	.word	0x10005a5b
100058a8:	10005a5b 	.word	0x10005a5b
100058ac:	10005a5b 	.word	0x10005a5b
100058b0:	10005997 	.word	0x10005997
100058b4:	10005a5b 	.word	0x10005a5b
100058b8:	10005a5b 	.word	0x10005a5b
100058bc:	10005a5b 	.word	0x10005a5b
100058c0:	100059d9 	.word	0x100059d9
100058c4:	10005a5b 	.word	0x10005a5b
100058c8:	10005a5b 	.word	0x10005a5b
100058cc:	10005a5b 	.word	0x10005a5b
100058d0:	10005a19 	.word	0x10005a19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
100058d4:	68fb      	ldr	r3, [r7, #12]
100058d6:	681b      	ldr	r3, [r3, #0]
100058d8:	68b9      	ldr	r1, [r7, #8]
100058da:	4618      	mov	r0, r3
100058dc:	f000 fa2a 	bl	10005d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
100058e0:	68fb      	ldr	r3, [r7, #12]
100058e2:	681b      	ldr	r3, [r3, #0]
100058e4:	699a      	ldr	r2, [r3, #24]
100058e6:	68fb      	ldr	r3, [r7, #12]
100058e8:	681b      	ldr	r3, [r3, #0]
100058ea:	f042 0208 	orr.w	r2, r2, #8
100058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
100058f0:	68fb      	ldr	r3, [r7, #12]
100058f2:	681b      	ldr	r3, [r3, #0]
100058f4:	699a      	ldr	r2, [r3, #24]
100058f6:	68fb      	ldr	r3, [r7, #12]
100058f8:	681b      	ldr	r3, [r3, #0]
100058fa:	f022 0204 	bic.w	r2, r2, #4
100058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
10005900:	68fb      	ldr	r3, [r7, #12]
10005902:	681b      	ldr	r3, [r3, #0]
10005904:	6999      	ldr	r1, [r3, #24]
10005906:	68bb      	ldr	r3, [r7, #8]
10005908:	691a      	ldr	r2, [r3, #16]
1000590a:	68fb      	ldr	r3, [r7, #12]
1000590c:	681b      	ldr	r3, [r3, #0]
1000590e:	430a      	orrs	r2, r1
10005910:	619a      	str	r2, [r3, #24]
      break;
10005912:	e0a3      	b.n	10005a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
10005914:	68fb      	ldr	r3, [r7, #12]
10005916:	681b      	ldr	r3, [r3, #0]
10005918:	68b9      	ldr	r1, [r7, #8]
1000591a:	4618      	mov	r0, r3
1000591c:	f000 fa98 	bl	10005e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
10005920:	68fb      	ldr	r3, [r7, #12]
10005922:	681b      	ldr	r3, [r3, #0]
10005924:	699a      	ldr	r2, [r3, #24]
10005926:	68fb      	ldr	r3, [r7, #12]
10005928:	681b      	ldr	r3, [r3, #0]
1000592a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
1000592e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
10005930:	68fb      	ldr	r3, [r7, #12]
10005932:	681b      	ldr	r3, [r3, #0]
10005934:	699a      	ldr	r2, [r3, #24]
10005936:	68fb      	ldr	r3, [r7, #12]
10005938:	681b      	ldr	r3, [r3, #0]
1000593a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
1000593e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
10005940:	68fb      	ldr	r3, [r7, #12]
10005942:	681b      	ldr	r3, [r3, #0]
10005944:	6999      	ldr	r1, [r3, #24]
10005946:	68bb      	ldr	r3, [r7, #8]
10005948:	691b      	ldr	r3, [r3, #16]
1000594a:	021a      	lsls	r2, r3, #8
1000594c:	68fb      	ldr	r3, [r7, #12]
1000594e:	681b      	ldr	r3, [r3, #0]
10005950:	430a      	orrs	r2, r1
10005952:	619a      	str	r2, [r3, #24]
      break;
10005954:	e082      	b.n	10005a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
10005956:	68fb      	ldr	r3, [r7, #12]
10005958:	681b      	ldr	r3, [r3, #0]
1000595a:	68b9      	ldr	r1, [r7, #8]
1000595c:	4618      	mov	r0, r3
1000595e:	f000 faff 	bl	10005f60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
10005962:	68fb      	ldr	r3, [r7, #12]
10005964:	681b      	ldr	r3, [r3, #0]
10005966:	69da      	ldr	r2, [r3, #28]
10005968:	68fb      	ldr	r3, [r7, #12]
1000596a:	681b      	ldr	r3, [r3, #0]
1000596c:	f042 0208 	orr.w	r2, r2, #8
10005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
10005972:	68fb      	ldr	r3, [r7, #12]
10005974:	681b      	ldr	r3, [r3, #0]
10005976:	69da      	ldr	r2, [r3, #28]
10005978:	68fb      	ldr	r3, [r7, #12]
1000597a:	681b      	ldr	r3, [r3, #0]
1000597c:	f022 0204 	bic.w	r2, r2, #4
10005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
10005982:	68fb      	ldr	r3, [r7, #12]
10005984:	681b      	ldr	r3, [r3, #0]
10005986:	69d9      	ldr	r1, [r3, #28]
10005988:	68bb      	ldr	r3, [r7, #8]
1000598a:	691a      	ldr	r2, [r3, #16]
1000598c:	68fb      	ldr	r3, [r7, #12]
1000598e:	681b      	ldr	r3, [r3, #0]
10005990:	430a      	orrs	r2, r1
10005992:	61da      	str	r2, [r3, #28]
      break;
10005994:	e062      	b.n	10005a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
10005996:	68fb      	ldr	r3, [r7, #12]
10005998:	681b      	ldr	r3, [r3, #0]
1000599a:	68b9      	ldr	r1, [r7, #8]
1000599c:	4618      	mov	r0, r3
1000599e:	f000 fb65 	bl	1000606c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
100059a2:	68fb      	ldr	r3, [r7, #12]
100059a4:	681b      	ldr	r3, [r3, #0]
100059a6:	69da      	ldr	r2, [r3, #28]
100059a8:	68fb      	ldr	r3, [r7, #12]
100059aa:	681b      	ldr	r3, [r3, #0]
100059ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
100059b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
100059b2:	68fb      	ldr	r3, [r7, #12]
100059b4:	681b      	ldr	r3, [r3, #0]
100059b6:	69da      	ldr	r2, [r3, #28]
100059b8:	68fb      	ldr	r3, [r7, #12]
100059ba:	681b      	ldr	r3, [r3, #0]
100059bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
100059c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
100059c2:	68fb      	ldr	r3, [r7, #12]
100059c4:	681b      	ldr	r3, [r3, #0]
100059c6:	69d9      	ldr	r1, [r3, #28]
100059c8:	68bb      	ldr	r3, [r7, #8]
100059ca:	691b      	ldr	r3, [r3, #16]
100059cc:	021a      	lsls	r2, r3, #8
100059ce:	68fb      	ldr	r3, [r7, #12]
100059d0:	681b      	ldr	r3, [r3, #0]
100059d2:	430a      	orrs	r2, r1
100059d4:	61da      	str	r2, [r3, #28]
      break;
100059d6:	e041      	b.n	10005a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
100059d8:	68fb      	ldr	r3, [r7, #12]
100059da:	681b      	ldr	r3, [r3, #0]
100059dc:	68b9      	ldr	r1, [r7, #8]
100059de:	4618      	mov	r0, r3
100059e0:	f000 fbac 	bl	1000613c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
100059e4:	68fb      	ldr	r3, [r7, #12]
100059e6:	681b      	ldr	r3, [r3, #0]
100059e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
100059ea:	68fb      	ldr	r3, [r7, #12]
100059ec:	681b      	ldr	r3, [r3, #0]
100059ee:	f042 0208 	orr.w	r2, r2, #8
100059f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
100059f4:	68fb      	ldr	r3, [r7, #12]
100059f6:	681b      	ldr	r3, [r3, #0]
100059f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
100059fa:	68fb      	ldr	r3, [r7, #12]
100059fc:	681b      	ldr	r3, [r3, #0]
100059fe:	f022 0204 	bic.w	r2, r2, #4
10005a02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
10005a04:	68fb      	ldr	r3, [r7, #12]
10005a06:	681b      	ldr	r3, [r3, #0]
10005a08:	6d59      	ldr	r1, [r3, #84]	; 0x54
10005a0a:	68bb      	ldr	r3, [r7, #8]
10005a0c:	691a      	ldr	r2, [r3, #16]
10005a0e:	68fb      	ldr	r3, [r7, #12]
10005a10:	681b      	ldr	r3, [r3, #0]
10005a12:	430a      	orrs	r2, r1
10005a14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
10005a16:	e021      	b.n	10005a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
10005a18:	68fb      	ldr	r3, [r7, #12]
10005a1a:	681b      	ldr	r3, [r3, #0]
10005a1c:	68b9      	ldr	r1, [r7, #8]
10005a1e:	4618      	mov	r0, r3
10005a20:	f000 fbee 	bl	10006200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
10005a24:	68fb      	ldr	r3, [r7, #12]
10005a26:	681b      	ldr	r3, [r3, #0]
10005a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10005a2a:	68fb      	ldr	r3, [r7, #12]
10005a2c:	681b      	ldr	r3, [r3, #0]
10005a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
10005a32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
10005a34:	68fb      	ldr	r3, [r7, #12]
10005a36:	681b      	ldr	r3, [r3, #0]
10005a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10005a3a:	68fb      	ldr	r3, [r7, #12]
10005a3c:	681b      	ldr	r3, [r3, #0]
10005a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
10005a42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
10005a44:	68fb      	ldr	r3, [r7, #12]
10005a46:	681b      	ldr	r3, [r3, #0]
10005a48:	6d59      	ldr	r1, [r3, #84]	; 0x54
10005a4a:	68bb      	ldr	r3, [r7, #8]
10005a4c:	691b      	ldr	r3, [r3, #16]
10005a4e:	021a      	lsls	r2, r3, #8
10005a50:	68fb      	ldr	r3, [r7, #12]
10005a52:	681b      	ldr	r3, [r3, #0]
10005a54:	430a      	orrs	r2, r1
10005a56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
10005a58:	e000      	b.n	10005a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
10005a5a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
10005a5c:	68fb      	ldr	r3, [r7, #12]
10005a5e:	2201      	movs	r2, #1
10005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
10005a64:	68fb      	ldr	r3, [r7, #12]
10005a66:	2200      	movs	r2, #0
10005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
10005a6c:	2300      	movs	r3, #0
}
10005a6e:	4618      	mov	r0, r3
10005a70:	3710      	adds	r7, #16
10005a72:	46bd      	mov	sp, r7
10005a74:	bd80      	pop	{r7, pc}
10005a76:	bf00      	nop

10005a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
10005a78:	b580      	push	{r7, lr}
10005a7a:	b084      	sub	sp, #16
10005a7c:	af00      	add	r7, sp, #0
10005a7e:	6078      	str	r0, [r7, #4]
10005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
10005a82:	687b      	ldr	r3, [r7, #4]
10005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
10005a88:	2b01      	cmp	r3, #1
10005a8a:	d101      	bne.n	10005a90 <HAL_TIM_ConfigClockSource+0x18>
10005a8c:	2302      	movs	r3, #2
10005a8e:	e0b5      	b.n	10005bfc <HAL_TIM_ConfigClockSource+0x184>
10005a90:	687b      	ldr	r3, [r7, #4]
10005a92:	2201      	movs	r2, #1
10005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
10005a98:	687b      	ldr	r3, [r7, #4]
10005a9a:	2202      	movs	r2, #2
10005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
10005aa0:	687b      	ldr	r3, [r7, #4]
10005aa2:	681b      	ldr	r3, [r3, #0]
10005aa4:	689b      	ldr	r3, [r3, #8]
10005aa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
10005aa8:	68fb      	ldr	r3, [r7, #12]
10005aaa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
10005aae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
10005ab2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
10005ab4:	68fb      	ldr	r3, [r7, #12]
10005ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005aba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
10005abc:	687b      	ldr	r3, [r7, #4]
10005abe:	681b      	ldr	r3, [r3, #0]
10005ac0:	68fa      	ldr	r2, [r7, #12]
10005ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
10005ac4:	683b      	ldr	r3, [r7, #0]
10005ac6:	681b      	ldr	r3, [r3, #0]
10005ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
10005acc:	d03e      	beq.n	10005b4c <HAL_TIM_ConfigClockSource+0xd4>
10005ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
10005ad2:	f200 8087 	bhi.w	10005be4 <HAL_TIM_ConfigClockSource+0x16c>
10005ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10005ada:	f000 8085 	beq.w	10005be8 <HAL_TIM_ConfigClockSource+0x170>
10005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10005ae2:	d87f      	bhi.n	10005be4 <HAL_TIM_ConfigClockSource+0x16c>
10005ae4:	2b70      	cmp	r3, #112	; 0x70
10005ae6:	d01a      	beq.n	10005b1e <HAL_TIM_ConfigClockSource+0xa6>
10005ae8:	2b70      	cmp	r3, #112	; 0x70
10005aea:	d87b      	bhi.n	10005be4 <HAL_TIM_ConfigClockSource+0x16c>
10005aec:	2b60      	cmp	r3, #96	; 0x60
10005aee:	d050      	beq.n	10005b92 <HAL_TIM_ConfigClockSource+0x11a>
10005af0:	2b60      	cmp	r3, #96	; 0x60
10005af2:	d877      	bhi.n	10005be4 <HAL_TIM_ConfigClockSource+0x16c>
10005af4:	2b50      	cmp	r3, #80	; 0x50
10005af6:	d03c      	beq.n	10005b72 <HAL_TIM_ConfigClockSource+0xfa>
10005af8:	2b50      	cmp	r3, #80	; 0x50
10005afa:	d873      	bhi.n	10005be4 <HAL_TIM_ConfigClockSource+0x16c>
10005afc:	2b40      	cmp	r3, #64	; 0x40
10005afe:	d058      	beq.n	10005bb2 <HAL_TIM_ConfigClockSource+0x13a>
10005b00:	2b40      	cmp	r3, #64	; 0x40
10005b02:	d86f      	bhi.n	10005be4 <HAL_TIM_ConfigClockSource+0x16c>
10005b04:	2b30      	cmp	r3, #48	; 0x30
10005b06:	d064      	beq.n	10005bd2 <HAL_TIM_ConfigClockSource+0x15a>
10005b08:	2b30      	cmp	r3, #48	; 0x30
10005b0a:	d86b      	bhi.n	10005be4 <HAL_TIM_ConfigClockSource+0x16c>
10005b0c:	2b20      	cmp	r3, #32
10005b0e:	d060      	beq.n	10005bd2 <HAL_TIM_ConfigClockSource+0x15a>
10005b10:	2b20      	cmp	r3, #32
10005b12:	d867      	bhi.n	10005be4 <HAL_TIM_ConfigClockSource+0x16c>
10005b14:	2b00      	cmp	r3, #0
10005b16:	d05c      	beq.n	10005bd2 <HAL_TIM_ConfigClockSource+0x15a>
10005b18:	2b10      	cmp	r3, #16
10005b1a:	d05a      	beq.n	10005bd2 <HAL_TIM_ConfigClockSource+0x15a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
10005b1c:	e062      	b.n	10005be4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
10005b1e:	687b      	ldr	r3, [r7, #4]
10005b20:	6818      	ldr	r0, [r3, #0]
10005b22:	683b      	ldr	r3, [r7, #0]
10005b24:	6899      	ldr	r1, [r3, #8]
10005b26:	683b      	ldr	r3, [r7, #0]
10005b28:	685a      	ldr	r2, [r3, #4]
10005b2a:	683b      	ldr	r3, [r7, #0]
10005b2c:	68db      	ldr	r3, [r3, #12]
10005b2e:	f000 fc47 	bl	100063c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
10005b32:	687b      	ldr	r3, [r7, #4]
10005b34:	681b      	ldr	r3, [r3, #0]
10005b36:	689b      	ldr	r3, [r3, #8]
10005b38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
10005b3a:	68fb      	ldr	r3, [r7, #12]
10005b3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
10005b40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
10005b42:	687b      	ldr	r3, [r7, #4]
10005b44:	681b      	ldr	r3, [r3, #0]
10005b46:	68fa      	ldr	r2, [r7, #12]
10005b48:	609a      	str	r2, [r3, #8]
      break;
10005b4a:	e04e      	b.n	10005bea <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
10005b4c:	687b      	ldr	r3, [r7, #4]
10005b4e:	6818      	ldr	r0, [r3, #0]
10005b50:	683b      	ldr	r3, [r7, #0]
10005b52:	6899      	ldr	r1, [r3, #8]
10005b54:	683b      	ldr	r3, [r7, #0]
10005b56:	685a      	ldr	r2, [r3, #4]
10005b58:	683b      	ldr	r3, [r7, #0]
10005b5a:	68db      	ldr	r3, [r3, #12]
10005b5c:	f000 fc30 	bl	100063c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
10005b60:	687b      	ldr	r3, [r7, #4]
10005b62:	681b      	ldr	r3, [r3, #0]
10005b64:	689a      	ldr	r2, [r3, #8]
10005b66:	687b      	ldr	r3, [r7, #4]
10005b68:	681b      	ldr	r3, [r3, #0]
10005b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
10005b6e:	609a      	str	r2, [r3, #8]
      break;
10005b70:	e03b      	b.n	10005bea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
10005b72:	687b      	ldr	r3, [r7, #4]
10005b74:	6818      	ldr	r0, [r3, #0]
10005b76:	683b      	ldr	r3, [r7, #0]
10005b78:	6859      	ldr	r1, [r3, #4]
10005b7a:	683b      	ldr	r3, [r7, #0]
10005b7c:	68db      	ldr	r3, [r3, #12]
10005b7e:	461a      	mov	r2, r3
10005b80:	f000 fba2 	bl	100062c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
10005b84:	687b      	ldr	r3, [r7, #4]
10005b86:	681b      	ldr	r3, [r3, #0]
10005b88:	2150      	movs	r1, #80	; 0x50
10005b8a:	4618      	mov	r0, r3
10005b8c:	f000 fbfb 	bl	10006386 <TIM_ITRx_SetConfig>
      break;
10005b90:	e02b      	b.n	10005bea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
10005b92:	687b      	ldr	r3, [r7, #4]
10005b94:	6818      	ldr	r0, [r3, #0]
10005b96:	683b      	ldr	r3, [r7, #0]
10005b98:	6859      	ldr	r1, [r3, #4]
10005b9a:	683b      	ldr	r3, [r7, #0]
10005b9c:	68db      	ldr	r3, [r3, #12]
10005b9e:	461a      	mov	r2, r3
10005ba0:	f000 fbc1 	bl	10006326 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
10005ba4:	687b      	ldr	r3, [r7, #4]
10005ba6:	681b      	ldr	r3, [r3, #0]
10005ba8:	2160      	movs	r1, #96	; 0x60
10005baa:	4618      	mov	r0, r3
10005bac:	f000 fbeb 	bl	10006386 <TIM_ITRx_SetConfig>
      break;
10005bb0:	e01b      	b.n	10005bea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
10005bb2:	687b      	ldr	r3, [r7, #4]
10005bb4:	6818      	ldr	r0, [r3, #0]
10005bb6:	683b      	ldr	r3, [r7, #0]
10005bb8:	6859      	ldr	r1, [r3, #4]
10005bba:	683b      	ldr	r3, [r7, #0]
10005bbc:	68db      	ldr	r3, [r3, #12]
10005bbe:	461a      	mov	r2, r3
10005bc0:	f000 fb82 	bl	100062c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
10005bc4:	687b      	ldr	r3, [r7, #4]
10005bc6:	681b      	ldr	r3, [r3, #0]
10005bc8:	2140      	movs	r1, #64	; 0x40
10005bca:	4618      	mov	r0, r3
10005bcc:	f000 fbdb 	bl	10006386 <TIM_ITRx_SetConfig>
      break;
10005bd0:	e00b      	b.n	10005bea <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
10005bd2:	687b      	ldr	r3, [r7, #4]
10005bd4:	681a      	ldr	r2, [r3, #0]
10005bd6:	683b      	ldr	r3, [r7, #0]
10005bd8:	681b      	ldr	r3, [r3, #0]
10005bda:	4619      	mov	r1, r3
10005bdc:	4610      	mov	r0, r2
10005bde:	f000 fbd2 	bl	10006386 <TIM_ITRx_SetConfig>
      break;
10005be2:	e002      	b.n	10005bea <HAL_TIM_ConfigClockSource+0x172>
      break;
10005be4:	bf00      	nop
10005be6:	e000      	b.n	10005bea <HAL_TIM_ConfigClockSource+0x172>
      break;
10005be8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
10005bea:	687b      	ldr	r3, [r7, #4]
10005bec:	2201      	movs	r2, #1
10005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
10005bf2:	687b      	ldr	r3, [r7, #4]
10005bf4:	2200      	movs	r2, #0
10005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
10005bfa:	2300      	movs	r3, #0
}
10005bfc:	4618      	mov	r0, r3
10005bfe:	3710      	adds	r7, #16
10005c00:	46bd      	mov	sp, r7
10005c02:	bd80      	pop	{r7, pc}

10005c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
10005c04:	b480      	push	{r7}
10005c06:	b085      	sub	sp, #20
10005c08:	af00      	add	r7, sp, #0
10005c0a:	6078      	str	r0, [r7, #4]
10005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
10005c0e:	687b      	ldr	r3, [r7, #4]
10005c10:	681b      	ldr	r3, [r3, #0]
10005c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
10005c14:	687b      	ldr	r3, [r7, #4]
10005c16:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005c1a:	d013      	beq.n	10005c44 <TIM_Base_SetConfig+0x40>
10005c1c:	687b      	ldr	r3, [r7, #4]
10005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10005c22:	d00f      	beq.n	10005c44 <TIM_Base_SetConfig+0x40>
10005c24:	687b      	ldr	r3, [r7, #4]
10005c26:	4a3c      	ldr	r2, [pc, #240]	; (10005d18 <TIM_Base_SetConfig+0x114>)
10005c28:	4293      	cmp	r3, r2
10005c2a:	d00b      	beq.n	10005c44 <TIM_Base_SetConfig+0x40>
10005c2c:	687b      	ldr	r3, [r7, #4]
10005c2e:	4a3b      	ldr	r2, [pc, #236]	; (10005d1c <TIM_Base_SetConfig+0x118>)
10005c30:	4293      	cmp	r3, r2
10005c32:	d007      	beq.n	10005c44 <TIM_Base_SetConfig+0x40>
10005c34:	687b      	ldr	r3, [r7, #4]
10005c36:	4a3a      	ldr	r2, [pc, #232]	; (10005d20 <TIM_Base_SetConfig+0x11c>)
10005c38:	4293      	cmp	r3, r2
10005c3a:	d003      	beq.n	10005c44 <TIM_Base_SetConfig+0x40>
10005c3c:	687b      	ldr	r3, [r7, #4]
10005c3e:	4a39      	ldr	r2, [pc, #228]	; (10005d24 <TIM_Base_SetConfig+0x120>)
10005c40:	4293      	cmp	r3, r2
10005c42:	d108      	bne.n	10005c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
10005c44:	68fb      	ldr	r3, [r7, #12]
10005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
10005c4c:	683b      	ldr	r3, [r7, #0]
10005c4e:	685b      	ldr	r3, [r3, #4]
10005c50:	68fa      	ldr	r2, [r7, #12]
10005c52:	4313      	orrs	r3, r2
10005c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
10005c56:	687b      	ldr	r3, [r7, #4]
10005c58:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005c5c:	d01f      	beq.n	10005c9e <TIM_Base_SetConfig+0x9a>
10005c5e:	687b      	ldr	r3, [r7, #4]
10005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10005c64:	d01b      	beq.n	10005c9e <TIM_Base_SetConfig+0x9a>
10005c66:	687b      	ldr	r3, [r7, #4]
10005c68:	4a2b      	ldr	r2, [pc, #172]	; (10005d18 <TIM_Base_SetConfig+0x114>)
10005c6a:	4293      	cmp	r3, r2
10005c6c:	d017      	beq.n	10005c9e <TIM_Base_SetConfig+0x9a>
10005c6e:	687b      	ldr	r3, [r7, #4]
10005c70:	4a2a      	ldr	r2, [pc, #168]	; (10005d1c <TIM_Base_SetConfig+0x118>)
10005c72:	4293      	cmp	r3, r2
10005c74:	d013      	beq.n	10005c9e <TIM_Base_SetConfig+0x9a>
10005c76:	687b      	ldr	r3, [r7, #4]
10005c78:	4a29      	ldr	r2, [pc, #164]	; (10005d20 <TIM_Base_SetConfig+0x11c>)
10005c7a:	4293      	cmp	r3, r2
10005c7c:	d00f      	beq.n	10005c9e <TIM_Base_SetConfig+0x9a>
10005c7e:	687b      	ldr	r3, [r7, #4]
10005c80:	4a28      	ldr	r2, [pc, #160]	; (10005d24 <TIM_Base_SetConfig+0x120>)
10005c82:	4293      	cmp	r3, r2
10005c84:	d00b      	beq.n	10005c9e <TIM_Base_SetConfig+0x9a>
10005c86:	687b      	ldr	r3, [r7, #4]
10005c88:	4a27      	ldr	r2, [pc, #156]	; (10005d28 <TIM_Base_SetConfig+0x124>)
10005c8a:	4293      	cmp	r3, r2
10005c8c:	d007      	beq.n	10005c9e <TIM_Base_SetConfig+0x9a>
10005c8e:	687b      	ldr	r3, [r7, #4]
10005c90:	4a26      	ldr	r2, [pc, #152]	; (10005d2c <TIM_Base_SetConfig+0x128>)
10005c92:	4293      	cmp	r3, r2
10005c94:	d003      	beq.n	10005c9e <TIM_Base_SetConfig+0x9a>
10005c96:	687b      	ldr	r3, [r7, #4]
10005c98:	4a25      	ldr	r2, [pc, #148]	; (10005d30 <TIM_Base_SetConfig+0x12c>)
10005c9a:	4293      	cmp	r3, r2
10005c9c:	d108      	bne.n	10005cb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
10005c9e:	68fb      	ldr	r3, [r7, #12]
10005ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10005ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
10005ca6:	683b      	ldr	r3, [r7, #0]
10005ca8:	68db      	ldr	r3, [r3, #12]
10005caa:	68fa      	ldr	r2, [r7, #12]
10005cac:	4313      	orrs	r3, r2
10005cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
10005cb0:	68fb      	ldr	r3, [r7, #12]
10005cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
10005cb6:	683b      	ldr	r3, [r7, #0]
10005cb8:	695b      	ldr	r3, [r3, #20]
10005cba:	4313      	orrs	r3, r2
10005cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
10005cbe:	687b      	ldr	r3, [r7, #4]
10005cc0:	68fa      	ldr	r2, [r7, #12]
10005cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
10005cc4:	683b      	ldr	r3, [r7, #0]
10005cc6:	689a      	ldr	r2, [r3, #8]
10005cc8:	687b      	ldr	r3, [r7, #4]
10005cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
10005ccc:	683b      	ldr	r3, [r7, #0]
10005cce:	681a      	ldr	r2, [r3, #0]
10005cd0:	687b      	ldr	r3, [r7, #4]
10005cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
10005cd4:	687b      	ldr	r3, [r7, #4]
10005cd6:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005cda:	d00f      	beq.n	10005cfc <TIM_Base_SetConfig+0xf8>
10005cdc:	687b      	ldr	r3, [r7, #4]
10005cde:	4a11      	ldr	r2, [pc, #68]	; (10005d24 <TIM_Base_SetConfig+0x120>)
10005ce0:	4293      	cmp	r3, r2
10005ce2:	d00b      	beq.n	10005cfc <TIM_Base_SetConfig+0xf8>
10005ce4:	687b      	ldr	r3, [r7, #4]
10005ce6:	4a10      	ldr	r2, [pc, #64]	; (10005d28 <TIM_Base_SetConfig+0x124>)
10005ce8:	4293      	cmp	r3, r2
10005cea:	d007      	beq.n	10005cfc <TIM_Base_SetConfig+0xf8>
10005cec:	687b      	ldr	r3, [r7, #4]
10005cee:	4a0f      	ldr	r2, [pc, #60]	; (10005d2c <TIM_Base_SetConfig+0x128>)
10005cf0:	4293      	cmp	r3, r2
10005cf2:	d003      	beq.n	10005cfc <TIM_Base_SetConfig+0xf8>
10005cf4:	687b      	ldr	r3, [r7, #4]
10005cf6:	4a0e      	ldr	r2, [pc, #56]	; (10005d30 <TIM_Base_SetConfig+0x12c>)
10005cf8:	4293      	cmp	r3, r2
10005cfa:	d103      	bne.n	10005d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
10005cfc:	683b      	ldr	r3, [r7, #0]
10005cfe:	691a      	ldr	r2, [r3, #16]
10005d00:	687b      	ldr	r3, [r7, #4]
10005d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
10005d04:	687b      	ldr	r3, [r7, #4]
10005d06:	2201      	movs	r2, #1
10005d08:	615a      	str	r2, [r3, #20]
}
10005d0a:	bf00      	nop
10005d0c:	3714      	adds	r7, #20
10005d0e:	46bd      	mov	sp, r7
10005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
10005d14:	4770      	bx	lr
10005d16:	bf00      	nop
10005d18:	40001000 	.word	0x40001000
10005d1c:	40002000 	.word	0x40002000
10005d20:	40003000 	.word	0x40003000
10005d24:	44001000 	.word	0x44001000
10005d28:	44006000 	.word	0x44006000
10005d2c:	44007000 	.word	0x44007000
10005d30:	44008000 	.word	0x44008000

10005d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
10005d34:	b480      	push	{r7}
10005d36:	b087      	sub	sp, #28
10005d38:	af00      	add	r7, sp, #0
10005d3a:	6078      	str	r0, [r7, #4]
10005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
10005d3e:	687b      	ldr	r3, [r7, #4]
10005d40:	6a1b      	ldr	r3, [r3, #32]
10005d42:	f023 0201 	bic.w	r2, r3, #1
10005d46:	687b      	ldr	r3, [r7, #4]
10005d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10005d4a:	687b      	ldr	r3, [r7, #4]
10005d4c:	6a1b      	ldr	r3, [r3, #32]
10005d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10005d50:	687b      	ldr	r3, [r7, #4]
10005d52:	685b      	ldr	r3, [r3, #4]
10005d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
10005d56:	687b      	ldr	r3, [r7, #4]
10005d58:	699b      	ldr	r3, [r3, #24]
10005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
10005d5c:	68fb      	ldr	r3, [r7, #12]
10005d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
10005d68:	68fb      	ldr	r3, [r7, #12]
10005d6a:	f023 0303 	bic.w	r3, r3, #3
10005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
10005d70:	683b      	ldr	r3, [r7, #0]
10005d72:	681b      	ldr	r3, [r3, #0]
10005d74:	68fa      	ldr	r2, [r7, #12]
10005d76:	4313      	orrs	r3, r2
10005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
10005d7a:	697b      	ldr	r3, [r7, #20]
10005d7c:	f023 0302 	bic.w	r3, r3, #2
10005d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
10005d82:	683b      	ldr	r3, [r7, #0]
10005d84:	689b      	ldr	r3, [r3, #8]
10005d86:	697a      	ldr	r2, [r7, #20]
10005d88:	4313      	orrs	r3, r2
10005d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
10005d8c:	687b      	ldr	r3, [r7, #4]
10005d8e:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005d92:	d00f      	beq.n	10005db4 <TIM_OC1_SetConfig+0x80>
10005d94:	687b      	ldr	r3, [r7, #4]
10005d96:	4a2a      	ldr	r2, [pc, #168]	; (10005e40 <TIM_OC1_SetConfig+0x10c>)
10005d98:	4293      	cmp	r3, r2
10005d9a:	d00b      	beq.n	10005db4 <TIM_OC1_SetConfig+0x80>
10005d9c:	687b      	ldr	r3, [r7, #4]
10005d9e:	4a29      	ldr	r2, [pc, #164]	; (10005e44 <TIM_OC1_SetConfig+0x110>)
10005da0:	4293      	cmp	r3, r2
10005da2:	d007      	beq.n	10005db4 <TIM_OC1_SetConfig+0x80>
10005da4:	687b      	ldr	r3, [r7, #4]
10005da6:	4a28      	ldr	r2, [pc, #160]	; (10005e48 <TIM_OC1_SetConfig+0x114>)
10005da8:	4293      	cmp	r3, r2
10005daa:	d003      	beq.n	10005db4 <TIM_OC1_SetConfig+0x80>
10005dac:	687b      	ldr	r3, [r7, #4]
10005dae:	4a27      	ldr	r2, [pc, #156]	; (10005e4c <TIM_OC1_SetConfig+0x118>)
10005db0:	4293      	cmp	r3, r2
10005db2:	d10c      	bne.n	10005dce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
10005db4:	697b      	ldr	r3, [r7, #20]
10005db6:	f023 0308 	bic.w	r3, r3, #8
10005dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
10005dbc:	683b      	ldr	r3, [r7, #0]
10005dbe:	68db      	ldr	r3, [r3, #12]
10005dc0:	697a      	ldr	r2, [r7, #20]
10005dc2:	4313      	orrs	r3, r2
10005dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
10005dc6:	697b      	ldr	r3, [r7, #20]
10005dc8:	f023 0304 	bic.w	r3, r3, #4
10005dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10005dce:	687b      	ldr	r3, [r7, #4]
10005dd0:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005dd4:	d00f      	beq.n	10005df6 <TIM_OC1_SetConfig+0xc2>
10005dd6:	687b      	ldr	r3, [r7, #4]
10005dd8:	4a19      	ldr	r2, [pc, #100]	; (10005e40 <TIM_OC1_SetConfig+0x10c>)
10005dda:	4293      	cmp	r3, r2
10005ddc:	d00b      	beq.n	10005df6 <TIM_OC1_SetConfig+0xc2>
10005dde:	687b      	ldr	r3, [r7, #4]
10005de0:	4a18      	ldr	r2, [pc, #96]	; (10005e44 <TIM_OC1_SetConfig+0x110>)
10005de2:	4293      	cmp	r3, r2
10005de4:	d007      	beq.n	10005df6 <TIM_OC1_SetConfig+0xc2>
10005de6:	687b      	ldr	r3, [r7, #4]
10005de8:	4a17      	ldr	r2, [pc, #92]	; (10005e48 <TIM_OC1_SetConfig+0x114>)
10005dea:	4293      	cmp	r3, r2
10005dec:	d003      	beq.n	10005df6 <TIM_OC1_SetConfig+0xc2>
10005dee:	687b      	ldr	r3, [r7, #4]
10005df0:	4a16      	ldr	r2, [pc, #88]	; (10005e4c <TIM_OC1_SetConfig+0x118>)
10005df2:	4293      	cmp	r3, r2
10005df4:	d111      	bne.n	10005e1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
10005df6:	693b      	ldr	r3, [r7, #16]
10005df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
10005dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
10005dfe:	693b      	ldr	r3, [r7, #16]
10005e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
10005e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
10005e06:	683b      	ldr	r3, [r7, #0]
10005e08:	695b      	ldr	r3, [r3, #20]
10005e0a:	693a      	ldr	r2, [r7, #16]
10005e0c:	4313      	orrs	r3, r2
10005e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
10005e10:	683b      	ldr	r3, [r7, #0]
10005e12:	699b      	ldr	r3, [r3, #24]
10005e14:	693a      	ldr	r2, [r7, #16]
10005e16:	4313      	orrs	r3, r2
10005e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10005e1a:	687b      	ldr	r3, [r7, #4]
10005e1c:	693a      	ldr	r2, [r7, #16]
10005e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
10005e20:	687b      	ldr	r3, [r7, #4]
10005e22:	68fa      	ldr	r2, [r7, #12]
10005e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
10005e26:	683b      	ldr	r3, [r7, #0]
10005e28:	685a      	ldr	r2, [r3, #4]
10005e2a:	687b      	ldr	r3, [r7, #4]
10005e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
10005e2e:	687b      	ldr	r3, [r7, #4]
10005e30:	697a      	ldr	r2, [r7, #20]
10005e32:	621a      	str	r2, [r3, #32]
}
10005e34:	bf00      	nop
10005e36:	371c      	adds	r7, #28
10005e38:	46bd      	mov	sp, r7
10005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
10005e3e:	4770      	bx	lr
10005e40:	44001000 	.word	0x44001000
10005e44:	44006000 	.word	0x44006000
10005e48:	44007000 	.word	0x44007000
10005e4c:	44008000 	.word	0x44008000

10005e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
10005e50:	b480      	push	{r7}
10005e52:	b087      	sub	sp, #28
10005e54:	af00      	add	r7, sp, #0
10005e56:	6078      	str	r0, [r7, #4]
10005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
10005e5a:	687b      	ldr	r3, [r7, #4]
10005e5c:	6a1b      	ldr	r3, [r3, #32]
10005e5e:	f023 0210 	bic.w	r2, r3, #16
10005e62:	687b      	ldr	r3, [r7, #4]
10005e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10005e66:	687b      	ldr	r3, [r7, #4]
10005e68:	6a1b      	ldr	r3, [r3, #32]
10005e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10005e6c:	687b      	ldr	r3, [r7, #4]
10005e6e:	685b      	ldr	r3, [r3, #4]
10005e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
10005e72:	687b      	ldr	r3, [r7, #4]
10005e74:	699b      	ldr	r3, [r3, #24]
10005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
10005e78:	68fb      	ldr	r3, [r7, #12]
10005e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
10005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
10005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
10005e84:	68fb      	ldr	r3, [r7, #12]
10005e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10005e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
10005e8c:	683b      	ldr	r3, [r7, #0]
10005e8e:	681b      	ldr	r3, [r3, #0]
10005e90:	021b      	lsls	r3, r3, #8
10005e92:	68fa      	ldr	r2, [r7, #12]
10005e94:	4313      	orrs	r3, r2
10005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
10005e98:	697b      	ldr	r3, [r7, #20]
10005e9a:	f023 0320 	bic.w	r3, r3, #32
10005e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
10005ea0:	683b      	ldr	r3, [r7, #0]
10005ea2:	689b      	ldr	r3, [r3, #8]
10005ea4:	011b      	lsls	r3, r3, #4
10005ea6:	697a      	ldr	r2, [r7, #20]
10005ea8:	4313      	orrs	r3, r2
10005eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
10005eac:	687b      	ldr	r3, [r7, #4]
10005eae:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005eb2:	d003      	beq.n	10005ebc <TIM_OC2_SetConfig+0x6c>
10005eb4:	687b      	ldr	r3, [r7, #4]
10005eb6:	4a26      	ldr	r2, [pc, #152]	; (10005f50 <TIM_OC2_SetConfig+0x100>)
10005eb8:	4293      	cmp	r3, r2
10005eba:	d10d      	bne.n	10005ed8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
10005ebc:	697b      	ldr	r3, [r7, #20]
10005ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
10005ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
10005ec4:	683b      	ldr	r3, [r7, #0]
10005ec6:	68db      	ldr	r3, [r3, #12]
10005ec8:	011b      	lsls	r3, r3, #4
10005eca:	697a      	ldr	r2, [r7, #20]
10005ecc:	4313      	orrs	r3, r2
10005ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
10005ed0:	697b      	ldr	r3, [r7, #20]
10005ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
10005ed6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10005ed8:	687b      	ldr	r3, [r7, #4]
10005eda:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005ede:	d00f      	beq.n	10005f00 <TIM_OC2_SetConfig+0xb0>
10005ee0:	687b      	ldr	r3, [r7, #4]
10005ee2:	4a1b      	ldr	r2, [pc, #108]	; (10005f50 <TIM_OC2_SetConfig+0x100>)
10005ee4:	4293      	cmp	r3, r2
10005ee6:	d00b      	beq.n	10005f00 <TIM_OC2_SetConfig+0xb0>
10005ee8:	687b      	ldr	r3, [r7, #4]
10005eea:	4a1a      	ldr	r2, [pc, #104]	; (10005f54 <TIM_OC2_SetConfig+0x104>)
10005eec:	4293      	cmp	r3, r2
10005eee:	d007      	beq.n	10005f00 <TIM_OC2_SetConfig+0xb0>
10005ef0:	687b      	ldr	r3, [r7, #4]
10005ef2:	4a19      	ldr	r2, [pc, #100]	; (10005f58 <TIM_OC2_SetConfig+0x108>)
10005ef4:	4293      	cmp	r3, r2
10005ef6:	d003      	beq.n	10005f00 <TIM_OC2_SetConfig+0xb0>
10005ef8:	687b      	ldr	r3, [r7, #4]
10005efa:	4a18      	ldr	r2, [pc, #96]	; (10005f5c <TIM_OC2_SetConfig+0x10c>)
10005efc:	4293      	cmp	r3, r2
10005efe:	d113      	bne.n	10005f28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
10005f00:	693b      	ldr	r3, [r7, #16]
10005f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
10005f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
10005f08:	693b      	ldr	r3, [r7, #16]
10005f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
10005f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
10005f10:	683b      	ldr	r3, [r7, #0]
10005f12:	695b      	ldr	r3, [r3, #20]
10005f14:	009b      	lsls	r3, r3, #2
10005f16:	693a      	ldr	r2, [r7, #16]
10005f18:	4313      	orrs	r3, r2
10005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
10005f1c:	683b      	ldr	r3, [r7, #0]
10005f1e:	699b      	ldr	r3, [r3, #24]
10005f20:	009b      	lsls	r3, r3, #2
10005f22:	693a      	ldr	r2, [r7, #16]
10005f24:	4313      	orrs	r3, r2
10005f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10005f28:	687b      	ldr	r3, [r7, #4]
10005f2a:	693a      	ldr	r2, [r7, #16]
10005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
10005f2e:	687b      	ldr	r3, [r7, #4]
10005f30:	68fa      	ldr	r2, [r7, #12]
10005f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
10005f34:	683b      	ldr	r3, [r7, #0]
10005f36:	685a      	ldr	r2, [r3, #4]
10005f38:	687b      	ldr	r3, [r7, #4]
10005f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
10005f3c:	687b      	ldr	r3, [r7, #4]
10005f3e:	697a      	ldr	r2, [r7, #20]
10005f40:	621a      	str	r2, [r3, #32]
}
10005f42:	bf00      	nop
10005f44:	371c      	adds	r7, #28
10005f46:	46bd      	mov	sp, r7
10005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
10005f4c:	4770      	bx	lr
10005f4e:	bf00      	nop
10005f50:	44001000 	.word	0x44001000
10005f54:	44006000 	.word	0x44006000
10005f58:	44007000 	.word	0x44007000
10005f5c:	44008000 	.word	0x44008000

10005f60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
10005f60:	b480      	push	{r7}
10005f62:	b087      	sub	sp, #28
10005f64:	af00      	add	r7, sp, #0
10005f66:	6078      	str	r0, [r7, #4]
10005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
10005f6a:	687b      	ldr	r3, [r7, #4]
10005f6c:	6a1b      	ldr	r3, [r3, #32]
10005f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
10005f72:	687b      	ldr	r3, [r7, #4]
10005f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10005f76:	687b      	ldr	r3, [r7, #4]
10005f78:	6a1b      	ldr	r3, [r3, #32]
10005f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10005f7c:	687b      	ldr	r3, [r7, #4]
10005f7e:	685b      	ldr	r3, [r3, #4]
10005f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
10005f82:	687b      	ldr	r3, [r7, #4]
10005f84:	69db      	ldr	r3, [r3, #28]
10005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
10005f88:	68fb      	ldr	r3, [r7, #12]
10005f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
10005f94:	68fb      	ldr	r3, [r7, #12]
10005f96:	f023 0303 	bic.w	r3, r3, #3
10005f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
10005f9c:	683b      	ldr	r3, [r7, #0]
10005f9e:	681b      	ldr	r3, [r3, #0]
10005fa0:	68fa      	ldr	r2, [r7, #12]
10005fa2:	4313      	orrs	r3, r2
10005fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
10005fa6:	697b      	ldr	r3, [r7, #20]
10005fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
10005fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
10005fae:	683b      	ldr	r3, [r7, #0]
10005fb0:	689b      	ldr	r3, [r3, #8]
10005fb2:	021b      	lsls	r3, r3, #8
10005fb4:	697a      	ldr	r2, [r7, #20]
10005fb6:	4313      	orrs	r3, r2
10005fb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
10005fba:	687b      	ldr	r3, [r7, #4]
10005fbc:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005fc0:	d003      	beq.n	10005fca <TIM_OC3_SetConfig+0x6a>
10005fc2:	687b      	ldr	r3, [r7, #4]
10005fc4:	4a25      	ldr	r2, [pc, #148]	; (1000605c <TIM_OC3_SetConfig+0xfc>)
10005fc6:	4293      	cmp	r3, r2
10005fc8:	d10d      	bne.n	10005fe6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
10005fca:	697b      	ldr	r3, [r7, #20]
10005fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
10005fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
10005fd2:	683b      	ldr	r3, [r7, #0]
10005fd4:	68db      	ldr	r3, [r3, #12]
10005fd6:	021b      	lsls	r3, r3, #8
10005fd8:	697a      	ldr	r2, [r7, #20]
10005fda:	4313      	orrs	r3, r2
10005fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
10005fde:	697b      	ldr	r3, [r7, #20]
10005fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
10005fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10005fe6:	687b      	ldr	r3, [r7, #4]
10005fe8:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005fec:	d00f      	beq.n	1000600e <TIM_OC3_SetConfig+0xae>
10005fee:	687b      	ldr	r3, [r7, #4]
10005ff0:	4a1a      	ldr	r2, [pc, #104]	; (1000605c <TIM_OC3_SetConfig+0xfc>)
10005ff2:	4293      	cmp	r3, r2
10005ff4:	d00b      	beq.n	1000600e <TIM_OC3_SetConfig+0xae>
10005ff6:	687b      	ldr	r3, [r7, #4]
10005ff8:	4a19      	ldr	r2, [pc, #100]	; (10006060 <TIM_OC3_SetConfig+0x100>)
10005ffa:	4293      	cmp	r3, r2
10005ffc:	d007      	beq.n	1000600e <TIM_OC3_SetConfig+0xae>
10005ffe:	687b      	ldr	r3, [r7, #4]
10006000:	4a18      	ldr	r2, [pc, #96]	; (10006064 <TIM_OC3_SetConfig+0x104>)
10006002:	4293      	cmp	r3, r2
10006004:	d003      	beq.n	1000600e <TIM_OC3_SetConfig+0xae>
10006006:	687b      	ldr	r3, [r7, #4]
10006008:	4a17      	ldr	r2, [pc, #92]	; (10006068 <TIM_OC3_SetConfig+0x108>)
1000600a:	4293      	cmp	r3, r2
1000600c:	d113      	bne.n	10006036 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
1000600e:	693b      	ldr	r3, [r7, #16]
10006010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
10006014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
10006016:	693b      	ldr	r3, [r7, #16]
10006018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
1000601c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
1000601e:	683b      	ldr	r3, [r7, #0]
10006020:	695b      	ldr	r3, [r3, #20]
10006022:	011b      	lsls	r3, r3, #4
10006024:	693a      	ldr	r2, [r7, #16]
10006026:	4313      	orrs	r3, r2
10006028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
1000602a:	683b      	ldr	r3, [r7, #0]
1000602c:	699b      	ldr	r3, [r3, #24]
1000602e:	011b      	lsls	r3, r3, #4
10006030:	693a      	ldr	r2, [r7, #16]
10006032:	4313      	orrs	r3, r2
10006034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10006036:	687b      	ldr	r3, [r7, #4]
10006038:	693a      	ldr	r2, [r7, #16]
1000603a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
1000603c:	687b      	ldr	r3, [r7, #4]
1000603e:	68fa      	ldr	r2, [r7, #12]
10006040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
10006042:	683b      	ldr	r3, [r7, #0]
10006044:	685a      	ldr	r2, [r3, #4]
10006046:	687b      	ldr	r3, [r7, #4]
10006048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
1000604a:	687b      	ldr	r3, [r7, #4]
1000604c:	697a      	ldr	r2, [r7, #20]
1000604e:	621a      	str	r2, [r3, #32]
}
10006050:	bf00      	nop
10006052:	371c      	adds	r7, #28
10006054:	46bd      	mov	sp, r7
10006056:	f85d 7b04 	ldr.w	r7, [sp], #4
1000605a:	4770      	bx	lr
1000605c:	44001000 	.word	0x44001000
10006060:	44006000 	.word	0x44006000
10006064:	44007000 	.word	0x44007000
10006068:	44008000 	.word	0x44008000

1000606c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
1000606c:	b480      	push	{r7}
1000606e:	b087      	sub	sp, #28
10006070:	af00      	add	r7, sp, #0
10006072:	6078      	str	r0, [r7, #4]
10006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
10006076:	687b      	ldr	r3, [r7, #4]
10006078:	6a1b      	ldr	r3, [r3, #32]
1000607a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
1000607e:	687b      	ldr	r3, [r7, #4]
10006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10006082:	687b      	ldr	r3, [r7, #4]
10006084:	6a1b      	ldr	r3, [r3, #32]
10006086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10006088:	687b      	ldr	r3, [r7, #4]
1000608a:	685b      	ldr	r3, [r3, #4]
1000608c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
1000608e:	687b      	ldr	r3, [r7, #4]
10006090:	69db      	ldr	r3, [r3, #28]
10006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
10006094:	68fb      	ldr	r3, [r7, #12]
10006096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
1000609a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
1000609e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
100060a0:	68fb      	ldr	r3, [r7, #12]
100060a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
100060a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
100060a8:	683b      	ldr	r3, [r7, #0]
100060aa:	681b      	ldr	r3, [r3, #0]
100060ac:	021b      	lsls	r3, r3, #8
100060ae:	68fa      	ldr	r2, [r7, #12]
100060b0:	4313      	orrs	r3, r2
100060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
100060b4:	693b      	ldr	r3, [r7, #16]
100060b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
100060ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
100060bc:	683b      	ldr	r3, [r7, #0]
100060be:	689b      	ldr	r3, [r3, #8]
100060c0:	031b      	lsls	r3, r3, #12
100060c2:	693a      	ldr	r2, [r7, #16]
100060c4:	4313      	orrs	r3, r2
100060c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
100060c8:	687b      	ldr	r3, [r7, #4]
100060ca:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
100060ce:	d00f      	beq.n	100060f0 <TIM_OC4_SetConfig+0x84>
100060d0:	687b      	ldr	r3, [r7, #4]
100060d2:	4a16      	ldr	r2, [pc, #88]	; (1000612c <TIM_OC4_SetConfig+0xc0>)
100060d4:	4293      	cmp	r3, r2
100060d6:	d00b      	beq.n	100060f0 <TIM_OC4_SetConfig+0x84>
100060d8:	687b      	ldr	r3, [r7, #4]
100060da:	4a15      	ldr	r2, [pc, #84]	; (10006130 <TIM_OC4_SetConfig+0xc4>)
100060dc:	4293      	cmp	r3, r2
100060de:	d007      	beq.n	100060f0 <TIM_OC4_SetConfig+0x84>
100060e0:	687b      	ldr	r3, [r7, #4]
100060e2:	4a14      	ldr	r2, [pc, #80]	; (10006134 <TIM_OC4_SetConfig+0xc8>)
100060e4:	4293      	cmp	r3, r2
100060e6:	d003      	beq.n	100060f0 <TIM_OC4_SetConfig+0x84>
100060e8:	687b      	ldr	r3, [r7, #4]
100060ea:	4a13      	ldr	r2, [pc, #76]	; (10006138 <TIM_OC4_SetConfig+0xcc>)
100060ec:	4293      	cmp	r3, r2
100060ee:	d109      	bne.n	10006104 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
100060f0:	697b      	ldr	r3, [r7, #20]
100060f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
100060f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
100060f8:	683b      	ldr	r3, [r7, #0]
100060fa:	695b      	ldr	r3, [r3, #20]
100060fc:	019b      	lsls	r3, r3, #6
100060fe:	697a      	ldr	r2, [r7, #20]
10006100:	4313      	orrs	r3, r2
10006102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10006104:	687b      	ldr	r3, [r7, #4]
10006106:	697a      	ldr	r2, [r7, #20]
10006108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
1000610a:	687b      	ldr	r3, [r7, #4]
1000610c:	68fa      	ldr	r2, [r7, #12]
1000610e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
10006110:	683b      	ldr	r3, [r7, #0]
10006112:	685a      	ldr	r2, [r3, #4]
10006114:	687b      	ldr	r3, [r7, #4]
10006116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
10006118:	687b      	ldr	r3, [r7, #4]
1000611a:	693a      	ldr	r2, [r7, #16]
1000611c:	621a      	str	r2, [r3, #32]
}
1000611e:	bf00      	nop
10006120:	371c      	adds	r7, #28
10006122:	46bd      	mov	sp, r7
10006124:	f85d 7b04 	ldr.w	r7, [sp], #4
10006128:	4770      	bx	lr
1000612a:	bf00      	nop
1000612c:	44001000 	.word	0x44001000
10006130:	44006000 	.word	0x44006000
10006134:	44007000 	.word	0x44007000
10006138:	44008000 	.word	0x44008000

1000613c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
1000613c:	b480      	push	{r7}
1000613e:	b087      	sub	sp, #28
10006140:	af00      	add	r7, sp, #0
10006142:	6078      	str	r0, [r7, #4]
10006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
10006146:	687b      	ldr	r3, [r7, #4]
10006148:	6a1b      	ldr	r3, [r3, #32]
1000614a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
1000614e:	687b      	ldr	r3, [r7, #4]
10006150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10006152:	687b      	ldr	r3, [r7, #4]
10006154:	6a1b      	ldr	r3, [r3, #32]
10006156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10006158:	687b      	ldr	r3, [r7, #4]
1000615a:	685b      	ldr	r3, [r3, #4]
1000615c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
1000615e:	687b      	ldr	r3, [r7, #4]
10006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
10006164:	68fb      	ldr	r3, [r7, #12]
10006166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000616e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
10006170:	683b      	ldr	r3, [r7, #0]
10006172:	681b      	ldr	r3, [r3, #0]
10006174:	68fa      	ldr	r2, [r7, #12]
10006176:	4313      	orrs	r3, r2
10006178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
1000617a:	693b      	ldr	r3, [r7, #16]
1000617c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
10006180:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
10006182:	683b      	ldr	r3, [r7, #0]
10006184:	689b      	ldr	r3, [r3, #8]
10006186:	041b      	lsls	r3, r3, #16
10006188:	693a      	ldr	r2, [r7, #16]
1000618a:	4313      	orrs	r3, r2
1000618c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
1000618e:	687b      	ldr	r3, [r7, #4]
10006190:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10006194:	d00f      	beq.n	100061b6 <TIM_OC5_SetConfig+0x7a>
10006196:	687b      	ldr	r3, [r7, #4]
10006198:	4a15      	ldr	r2, [pc, #84]	; (100061f0 <TIM_OC5_SetConfig+0xb4>)
1000619a:	4293      	cmp	r3, r2
1000619c:	d00b      	beq.n	100061b6 <TIM_OC5_SetConfig+0x7a>
1000619e:	687b      	ldr	r3, [r7, #4]
100061a0:	4a14      	ldr	r2, [pc, #80]	; (100061f4 <TIM_OC5_SetConfig+0xb8>)
100061a2:	4293      	cmp	r3, r2
100061a4:	d007      	beq.n	100061b6 <TIM_OC5_SetConfig+0x7a>
100061a6:	687b      	ldr	r3, [r7, #4]
100061a8:	4a13      	ldr	r2, [pc, #76]	; (100061f8 <TIM_OC5_SetConfig+0xbc>)
100061aa:	4293      	cmp	r3, r2
100061ac:	d003      	beq.n	100061b6 <TIM_OC5_SetConfig+0x7a>
100061ae:	687b      	ldr	r3, [r7, #4]
100061b0:	4a12      	ldr	r2, [pc, #72]	; (100061fc <TIM_OC5_SetConfig+0xc0>)
100061b2:	4293      	cmp	r3, r2
100061b4:	d109      	bne.n	100061ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
100061b6:	697b      	ldr	r3, [r7, #20]
100061b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100061bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
100061be:	683b      	ldr	r3, [r7, #0]
100061c0:	695b      	ldr	r3, [r3, #20]
100061c2:	021b      	lsls	r3, r3, #8
100061c4:	697a      	ldr	r2, [r7, #20]
100061c6:	4313      	orrs	r3, r2
100061c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
100061ca:	687b      	ldr	r3, [r7, #4]
100061cc:	697a      	ldr	r2, [r7, #20]
100061ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
100061d0:	687b      	ldr	r3, [r7, #4]
100061d2:	68fa      	ldr	r2, [r7, #12]
100061d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
100061d6:	683b      	ldr	r3, [r7, #0]
100061d8:	685a      	ldr	r2, [r3, #4]
100061da:	687b      	ldr	r3, [r7, #4]
100061dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
100061de:	687b      	ldr	r3, [r7, #4]
100061e0:	693a      	ldr	r2, [r7, #16]
100061e2:	621a      	str	r2, [r3, #32]
}
100061e4:	bf00      	nop
100061e6:	371c      	adds	r7, #28
100061e8:	46bd      	mov	sp, r7
100061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
100061ee:	4770      	bx	lr
100061f0:	44001000 	.word	0x44001000
100061f4:	44006000 	.word	0x44006000
100061f8:	44007000 	.word	0x44007000
100061fc:	44008000 	.word	0x44008000

10006200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
10006200:	b480      	push	{r7}
10006202:	b087      	sub	sp, #28
10006204:	af00      	add	r7, sp, #0
10006206:	6078      	str	r0, [r7, #4]
10006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
1000620a:	687b      	ldr	r3, [r7, #4]
1000620c:	6a1b      	ldr	r3, [r3, #32]
1000620e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
10006212:	687b      	ldr	r3, [r7, #4]
10006214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10006216:	687b      	ldr	r3, [r7, #4]
10006218:	6a1b      	ldr	r3, [r3, #32]
1000621a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
1000621c:	687b      	ldr	r3, [r7, #4]
1000621e:	685b      	ldr	r3, [r3, #4]
10006220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
10006222:	687b      	ldr	r3, [r7, #4]
10006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
10006228:	68fb      	ldr	r3, [r7, #12]
1000622a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
1000622e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
10006232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
10006234:	683b      	ldr	r3, [r7, #0]
10006236:	681b      	ldr	r3, [r3, #0]
10006238:	021b      	lsls	r3, r3, #8
1000623a:	68fa      	ldr	r2, [r7, #12]
1000623c:	4313      	orrs	r3, r2
1000623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
10006240:	693b      	ldr	r3, [r7, #16]
10006242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
10006246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
10006248:	683b      	ldr	r3, [r7, #0]
1000624a:	689b      	ldr	r3, [r3, #8]
1000624c:	051b      	lsls	r3, r3, #20
1000624e:	693a      	ldr	r2, [r7, #16]
10006250:	4313      	orrs	r3, r2
10006252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10006254:	687b      	ldr	r3, [r7, #4]
10006256:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
1000625a:	d00f      	beq.n	1000627c <TIM_OC6_SetConfig+0x7c>
1000625c:	687b      	ldr	r3, [r7, #4]
1000625e:	4a16      	ldr	r2, [pc, #88]	; (100062b8 <TIM_OC6_SetConfig+0xb8>)
10006260:	4293      	cmp	r3, r2
10006262:	d00b      	beq.n	1000627c <TIM_OC6_SetConfig+0x7c>
10006264:	687b      	ldr	r3, [r7, #4]
10006266:	4a15      	ldr	r2, [pc, #84]	; (100062bc <TIM_OC6_SetConfig+0xbc>)
10006268:	4293      	cmp	r3, r2
1000626a:	d007      	beq.n	1000627c <TIM_OC6_SetConfig+0x7c>
1000626c:	687b      	ldr	r3, [r7, #4]
1000626e:	4a14      	ldr	r2, [pc, #80]	; (100062c0 <TIM_OC6_SetConfig+0xc0>)
10006270:	4293      	cmp	r3, r2
10006272:	d003      	beq.n	1000627c <TIM_OC6_SetConfig+0x7c>
10006274:	687b      	ldr	r3, [r7, #4]
10006276:	4a13      	ldr	r2, [pc, #76]	; (100062c4 <TIM_OC6_SetConfig+0xc4>)
10006278:	4293      	cmp	r3, r2
1000627a:	d109      	bne.n	10006290 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
1000627c:	697b      	ldr	r3, [r7, #20]
1000627e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
10006282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
10006284:	683b      	ldr	r3, [r7, #0]
10006286:	695b      	ldr	r3, [r3, #20]
10006288:	029b      	lsls	r3, r3, #10
1000628a:	697a      	ldr	r2, [r7, #20]
1000628c:	4313      	orrs	r3, r2
1000628e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10006290:	687b      	ldr	r3, [r7, #4]
10006292:	697a      	ldr	r2, [r7, #20]
10006294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
10006296:	687b      	ldr	r3, [r7, #4]
10006298:	68fa      	ldr	r2, [r7, #12]
1000629a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
1000629c:	683b      	ldr	r3, [r7, #0]
1000629e:	685a      	ldr	r2, [r3, #4]
100062a0:	687b      	ldr	r3, [r7, #4]
100062a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
100062a4:	687b      	ldr	r3, [r7, #4]
100062a6:	693a      	ldr	r2, [r7, #16]
100062a8:	621a      	str	r2, [r3, #32]
}
100062aa:	bf00      	nop
100062ac:	371c      	adds	r7, #28
100062ae:	46bd      	mov	sp, r7
100062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100062b4:	4770      	bx	lr
100062b6:	bf00      	nop
100062b8:	44001000 	.word	0x44001000
100062bc:	44006000 	.word	0x44006000
100062c0:	44007000 	.word	0x44007000
100062c4:	44008000 	.word	0x44008000

100062c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
100062c8:	b480      	push	{r7}
100062ca:	b087      	sub	sp, #28
100062cc:	af00      	add	r7, sp, #0
100062ce:	60f8      	str	r0, [r7, #12]
100062d0:	60b9      	str	r1, [r7, #8]
100062d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
100062d4:	68fb      	ldr	r3, [r7, #12]
100062d6:	6a1b      	ldr	r3, [r3, #32]
100062d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
100062da:	68fb      	ldr	r3, [r7, #12]
100062dc:	6a1b      	ldr	r3, [r3, #32]
100062de:	f023 0201 	bic.w	r2, r3, #1
100062e2:	68fb      	ldr	r3, [r7, #12]
100062e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
100062e6:	68fb      	ldr	r3, [r7, #12]
100062e8:	699b      	ldr	r3, [r3, #24]
100062ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
100062ec:	693b      	ldr	r3, [r7, #16]
100062ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
100062f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
100062f4:	687b      	ldr	r3, [r7, #4]
100062f6:	011b      	lsls	r3, r3, #4
100062f8:	693a      	ldr	r2, [r7, #16]
100062fa:	4313      	orrs	r3, r2
100062fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
100062fe:	697b      	ldr	r3, [r7, #20]
10006300:	f023 030a 	bic.w	r3, r3, #10
10006304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
10006306:	697a      	ldr	r2, [r7, #20]
10006308:	68bb      	ldr	r3, [r7, #8]
1000630a:	4313      	orrs	r3, r2
1000630c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
1000630e:	68fb      	ldr	r3, [r7, #12]
10006310:	693a      	ldr	r2, [r7, #16]
10006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
10006314:	68fb      	ldr	r3, [r7, #12]
10006316:	697a      	ldr	r2, [r7, #20]
10006318:	621a      	str	r2, [r3, #32]
}
1000631a:	bf00      	nop
1000631c:	371c      	adds	r7, #28
1000631e:	46bd      	mov	sp, r7
10006320:	f85d 7b04 	ldr.w	r7, [sp], #4
10006324:	4770      	bx	lr

10006326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
10006326:	b480      	push	{r7}
10006328:	b087      	sub	sp, #28
1000632a:	af00      	add	r7, sp, #0
1000632c:	60f8      	str	r0, [r7, #12]
1000632e:	60b9      	str	r1, [r7, #8]
10006330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
10006332:	68fb      	ldr	r3, [r7, #12]
10006334:	6a1b      	ldr	r3, [r3, #32]
10006336:	f023 0210 	bic.w	r2, r3, #16
1000633a:	68fb      	ldr	r3, [r7, #12]
1000633c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1000633e:	68fb      	ldr	r3, [r7, #12]
10006340:	699b      	ldr	r3, [r3, #24]
10006342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
10006344:	68fb      	ldr	r3, [r7, #12]
10006346:	6a1b      	ldr	r3, [r3, #32]
10006348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
1000634a:	697b      	ldr	r3, [r7, #20]
1000634c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
10006350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
10006352:	687b      	ldr	r3, [r7, #4]
10006354:	031b      	lsls	r3, r3, #12
10006356:	697a      	ldr	r2, [r7, #20]
10006358:	4313      	orrs	r3, r2
1000635a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
1000635c:	693b      	ldr	r3, [r7, #16]
1000635e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
10006362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
10006364:	68bb      	ldr	r3, [r7, #8]
10006366:	011b      	lsls	r3, r3, #4
10006368:	693a      	ldr	r2, [r7, #16]
1000636a:	4313      	orrs	r3, r2
1000636c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
1000636e:	68fb      	ldr	r3, [r7, #12]
10006370:	697a      	ldr	r2, [r7, #20]
10006372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
10006374:	68fb      	ldr	r3, [r7, #12]
10006376:	693a      	ldr	r2, [r7, #16]
10006378:	621a      	str	r2, [r3, #32]
}
1000637a:	bf00      	nop
1000637c:	371c      	adds	r7, #28
1000637e:	46bd      	mov	sp, r7
10006380:	f85d 7b04 	ldr.w	r7, [sp], #4
10006384:	4770      	bx	lr

10006386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
10006386:	b480      	push	{r7}
10006388:	b085      	sub	sp, #20
1000638a:	af00      	add	r7, sp, #0
1000638c:	6078      	str	r0, [r7, #4]
1000638e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
10006390:	687b      	ldr	r3, [r7, #4]
10006392:	689b      	ldr	r3, [r3, #8]
10006394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
10006396:	68fb      	ldr	r3, [r7, #12]
10006398:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
1000639c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100063a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
100063a2:	683a      	ldr	r2, [r7, #0]
100063a4:	68fb      	ldr	r3, [r7, #12]
100063a6:	4313      	orrs	r3, r2
100063a8:	f043 0307 	orr.w	r3, r3, #7
100063ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
100063ae:	687b      	ldr	r3, [r7, #4]
100063b0:	68fa      	ldr	r2, [r7, #12]
100063b2:	609a      	str	r2, [r3, #8]
}
100063b4:	bf00      	nop
100063b6:	3714      	adds	r7, #20
100063b8:	46bd      	mov	sp, r7
100063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100063be:	4770      	bx	lr

100063c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
100063c0:	b480      	push	{r7}
100063c2:	b087      	sub	sp, #28
100063c4:	af00      	add	r7, sp, #0
100063c6:	60f8      	str	r0, [r7, #12]
100063c8:	60b9      	str	r1, [r7, #8]
100063ca:	607a      	str	r2, [r7, #4]
100063cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
100063ce:	68fb      	ldr	r3, [r7, #12]
100063d0:	689b      	ldr	r3, [r3, #8]
100063d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
100063d4:	697b      	ldr	r3, [r7, #20]
100063d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100063da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
100063dc:	683b      	ldr	r3, [r7, #0]
100063de:	021a      	lsls	r2, r3, #8
100063e0:	687b      	ldr	r3, [r7, #4]
100063e2:	431a      	orrs	r2, r3
100063e4:	68bb      	ldr	r3, [r7, #8]
100063e6:	4313      	orrs	r3, r2
100063e8:	697a      	ldr	r2, [r7, #20]
100063ea:	4313      	orrs	r3, r2
100063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
100063ee:	68fb      	ldr	r3, [r7, #12]
100063f0:	697a      	ldr	r2, [r7, #20]
100063f2:	609a      	str	r2, [r3, #8]
}
100063f4:	bf00      	nop
100063f6:	371c      	adds	r7, #28
100063f8:	46bd      	mov	sp, r7
100063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100063fe:	4770      	bx	lr

10006400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
10006400:	b480      	push	{r7}
10006402:	b087      	sub	sp, #28
10006404:	af00      	add	r7, sp, #0
10006406:	60f8      	str	r0, [r7, #12]
10006408:	60b9      	str	r1, [r7, #8]
1000640a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
1000640c:	68bb      	ldr	r3, [r7, #8]
1000640e:	f003 031f 	and.w	r3, r3, #31
10006412:	2201      	movs	r2, #1
10006414:	fa02 f303 	lsl.w	r3, r2, r3
10006418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
1000641a:	68fb      	ldr	r3, [r7, #12]
1000641c:	6a1a      	ldr	r2, [r3, #32]
1000641e:	697b      	ldr	r3, [r7, #20]
10006420:	43db      	mvns	r3, r3
10006422:	401a      	ands	r2, r3
10006424:	68fb      	ldr	r3, [r7, #12]
10006426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
10006428:	68fb      	ldr	r3, [r7, #12]
1000642a:	6a1a      	ldr	r2, [r3, #32]
1000642c:	68bb      	ldr	r3, [r7, #8]
1000642e:	f003 031f 	and.w	r3, r3, #31
10006432:	6879      	ldr	r1, [r7, #4]
10006434:	fa01 f303 	lsl.w	r3, r1, r3
10006438:	431a      	orrs	r2, r3
1000643a:	68fb      	ldr	r3, [r7, #12]
1000643c:	621a      	str	r2, [r3, #32]
}
1000643e:	bf00      	nop
10006440:	371c      	adds	r7, #28
10006442:	46bd      	mov	sp, r7
10006444:	f85d 7b04 	ldr.w	r7, [sp], #4
10006448:	4770      	bx	lr
	...

1000644c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
1000644c:	b480      	push	{r7}
1000644e:	b085      	sub	sp, #20
10006450:	af00      	add	r7, sp, #0
10006452:	6078      	str	r0, [r7, #4]
10006454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
10006456:	687b      	ldr	r3, [r7, #4]
10006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
1000645c:	2b01      	cmp	r3, #1
1000645e:	d101      	bne.n	10006464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
10006460:	2302      	movs	r3, #2
10006462:	e045      	b.n	100064f0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
10006464:	687b      	ldr	r3, [r7, #4]
10006466:	2201      	movs	r2, #1
10006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
1000646c:	687b      	ldr	r3, [r7, #4]
1000646e:	2202      	movs	r2, #2
10006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
10006474:	687b      	ldr	r3, [r7, #4]
10006476:	681b      	ldr	r3, [r3, #0]
10006478:	685b      	ldr	r3, [r3, #4]
1000647a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
1000647c:	687b      	ldr	r3, [r7, #4]
1000647e:	681b      	ldr	r3, [r3, #0]
10006480:	689b      	ldr	r3, [r3, #8]
10006482:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
10006484:	687b      	ldr	r3, [r7, #4]
10006486:	681b      	ldr	r3, [r3, #0]
10006488:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
1000648c:	d004      	beq.n	10006498 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
1000648e:	687b      	ldr	r3, [r7, #4]
10006490:	681b      	ldr	r3, [r3, #0]
10006492:	4a1a      	ldr	r2, [pc, #104]	; (100064fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
10006494:	4293      	cmp	r3, r2
10006496:	d108      	bne.n	100064aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
10006498:	68fb      	ldr	r3, [r7, #12]
1000649a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
1000649e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
100064a0:	683b      	ldr	r3, [r7, #0]
100064a2:	685b      	ldr	r3, [r3, #4]
100064a4:	68fa      	ldr	r2, [r7, #12]
100064a6:	4313      	orrs	r3, r2
100064a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
100064aa:	68fb      	ldr	r3, [r7, #12]
100064ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100064b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
100064b2:	683b      	ldr	r3, [r7, #0]
100064b4:	681b      	ldr	r3, [r3, #0]
100064b6:	68fa      	ldr	r2, [r7, #12]
100064b8:	4313      	orrs	r3, r2
100064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
100064bc:	68bb      	ldr	r3, [r7, #8]
100064be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
100064c2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
100064c4:	683b      	ldr	r3, [r7, #0]
100064c6:	689b      	ldr	r3, [r3, #8]
100064c8:	68ba      	ldr	r2, [r7, #8]
100064ca:	4313      	orrs	r3, r2
100064cc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
100064ce:	687b      	ldr	r3, [r7, #4]
100064d0:	681b      	ldr	r3, [r3, #0]
100064d2:	68fa      	ldr	r2, [r7, #12]
100064d4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
100064d6:	687b      	ldr	r3, [r7, #4]
100064d8:	681b      	ldr	r3, [r3, #0]
100064da:	68ba      	ldr	r2, [r7, #8]
100064dc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
100064de:	687b      	ldr	r3, [r7, #4]
100064e0:	2201      	movs	r2, #1
100064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
100064e6:	687b      	ldr	r3, [r7, #4]
100064e8:	2200      	movs	r2, #0
100064ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
100064ee:	2300      	movs	r3, #0
}
100064f0:	4618      	mov	r0, r3
100064f2:	3714      	adds	r7, #20
100064f4:	46bd      	mov	sp, r7
100064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100064fa:	4770      	bx	lr
100064fc:	44001000 	.word	0x44001000

10006500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
10006500:	b480      	push	{r7}
10006502:	b085      	sub	sp, #20
10006504:	af00      	add	r7, sp, #0
10006506:	6078      	str	r0, [r7, #4]
10006508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
1000650a:	2300      	movs	r3, #0
1000650c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
1000650e:	687b      	ldr	r3, [r7, #4]
10006510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
10006514:	2b01      	cmp	r3, #1
10006516:	d101      	bne.n	1000651c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
10006518:	2302      	movs	r3, #2
1000651a:	e087      	b.n	1000662c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
1000651c:	687b      	ldr	r3, [r7, #4]
1000651e:	2201      	movs	r2, #1
10006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
10006524:	68fb      	ldr	r3, [r7, #12]
10006526:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
1000652a:	683b      	ldr	r3, [r7, #0]
1000652c:	68db      	ldr	r3, [r3, #12]
1000652e:	4313      	orrs	r3, r2
10006530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
10006532:	68fb      	ldr	r3, [r7, #12]
10006534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
10006538:	683b      	ldr	r3, [r7, #0]
1000653a:	689b      	ldr	r3, [r3, #8]
1000653c:	4313      	orrs	r3, r2
1000653e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
10006540:	68fb      	ldr	r3, [r7, #12]
10006542:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
10006546:	683b      	ldr	r3, [r7, #0]
10006548:	685b      	ldr	r3, [r3, #4]
1000654a:	4313      	orrs	r3, r2
1000654c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
1000654e:	68fb      	ldr	r3, [r7, #12]
10006550:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
10006554:	683b      	ldr	r3, [r7, #0]
10006556:	681b      	ldr	r3, [r3, #0]
10006558:	4313      	orrs	r3, r2
1000655a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
1000655c:	68fb      	ldr	r3, [r7, #12]
1000655e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
10006562:	683b      	ldr	r3, [r7, #0]
10006564:	691b      	ldr	r3, [r3, #16]
10006566:	4313      	orrs	r3, r2
10006568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
1000656a:	68fb      	ldr	r3, [r7, #12]
1000656c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
10006570:	683b      	ldr	r3, [r7, #0]
10006572:	695b      	ldr	r3, [r3, #20]
10006574:	4313      	orrs	r3, r2
10006576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
10006578:	68fb      	ldr	r3, [r7, #12]
1000657a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
1000657e:	683b      	ldr	r3, [r7, #0]
10006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10006582:	4313      	orrs	r3, r2
10006584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
10006586:	68fb      	ldr	r3, [r7, #12]
10006588:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
1000658c:	683b      	ldr	r3, [r7, #0]
1000658e:	699b      	ldr	r3, [r3, #24]
10006590:	041b      	lsls	r3, r3, #16
10006592:	4313      	orrs	r3, r2
10006594:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
10006596:	687b      	ldr	r3, [r7, #4]
10006598:	681b      	ldr	r3, [r3, #0]
1000659a:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
1000659e:	d004      	beq.n	100065aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
100065a0:	687b      	ldr	r3, [r7, #4]
100065a2:	681b      	ldr	r3, [r3, #0]
100065a4:	4a24      	ldr	r2, [pc, #144]	; (10006638 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
100065a6:	4293      	cmp	r3, r2
100065a8:	d106      	bne.n	100065b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
100065aa:	68fb      	ldr	r3, [r7, #12]
100065ac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
100065b0:	683b      	ldr	r3, [r7, #0]
100065b2:	69db      	ldr	r3, [r3, #28]
100065b4:	4313      	orrs	r3, r2
100065b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
100065b8:	687b      	ldr	r3, [r7, #4]
100065ba:	681b      	ldr	r3, [r3, #0]
100065bc:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
100065c0:	d004      	beq.n	100065cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
100065c2:	687b      	ldr	r3, [r7, #4]
100065c4:	681b      	ldr	r3, [r3, #0]
100065c6:	4a1c      	ldr	r2, [pc, #112]	; (10006638 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
100065c8:	4293      	cmp	r3, r2
100065ca:	d126      	bne.n	1000661a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
100065cc:	68fb      	ldr	r3, [r7, #12]
100065ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
100065d2:	683b      	ldr	r3, [r7, #0]
100065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100065d6:	051b      	lsls	r3, r3, #20
100065d8:	4313      	orrs	r3, r2
100065da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
100065dc:	68fb      	ldr	r3, [r7, #12]
100065de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
100065e2:	683b      	ldr	r3, [r7, #0]
100065e4:	6a1b      	ldr	r3, [r3, #32]
100065e6:	4313      	orrs	r3, r2
100065e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
100065ea:	68fb      	ldr	r3, [r7, #12]
100065ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
100065f0:	683b      	ldr	r3, [r7, #0]
100065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100065f4:	4313      	orrs	r3, r2
100065f6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
100065f8:	687b      	ldr	r3, [r7, #4]
100065fa:	681b      	ldr	r3, [r3, #0]
100065fc:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10006600:	d004      	beq.n	1000660c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
10006602:	687b      	ldr	r3, [r7, #4]
10006604:	681b      	ldr	r3, [r3, #0]
10006606:	4a0c      	ldr	r2, [pc, #48]	; (10006638 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
10006608:	4293      	cmp	r3, r2
1000660a:	d106      	bne.n	1000661a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
1000660c:	68fb      	ldr	r3, [r7, #12]
1000660e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
10006612:	683b      	ldr	r3, [r7, #0]
10006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10006616:	4313      	orrs	r3, r2
10006618:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
1000661a:	687b      	ldr	r3, [r7, #4]
1000661c:	681b      	ldr	r3, [r3, #0]
1000661e:	68fa      	ldr	r2, [r7, #12]
10006620:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
10006622:	687b      	ldr	r3, [r7, #4]
10006624:	2200      	movs	r2, #0
10006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
1000662a:	2300      	movs	r3, #0
}
1000662c:	4618      	mov	r0, r3
1000662e:	3714      	adds	r7, #20
10006630:	46bd      	mov	sp, r7
10006632:	f85d 7b04 	ldr.w	r7, [sp], #4
10006636:	4770      	bx	lr
10006638:	44001000 	.word	0x44001000

1000663c <__libc_init_array>:
1000663c:	b570      	push	{r4, r5, r6, lr}
1000663e:	4d0d      	ldr	r5, [pc, #52]	; (10006674 <__libc_init_array+0x38>)
10006640:	4c0d      	ldr	r4, [pc, #52]	; (10006678 <__libc_init_array+0x3c>)
10006642:	1b64      	subs	r4, r4, r5
10006644:	10a4      	asrs	r4, r4, #2
10006646:	2600      	movs	r6, #0
10006648:	42a6      	cmp	r6, r4
1000664a:	d109      	bne.n	10006660 <__libc_init_array+0x24>
1000664c:	4d0b      	ldr	r5, [pc, #44]	; (1000667c <__libc_init_array+0x40>)
1000664e:	4c0c      	ldr	r4, [pc, #48]	; (10006680 <__libc_init_array+0x44>)
10006650:	f000 f820 	bl	10006694 <_init>
10006654:	1b64      	subs	r4, r4, r5
10006656:	10a4      	asrs	r4, r4, #2
10006658:	2600      	movs	r6, #0
1000665a:	42a6      	cmp	r6, r4
1000665c:	d105      	bne.n	1000666a <__libc_init_array+0x2e>
1000665e:	bd70      	pop	{r4, r5, r6, pc}
10006660:	f855 3b04 	ldr.w	r3, [r5], #4
10006664:	4798      	blx	r3
10006666:	3601      	adds	r6, #1
10006668:	e7ee      	b.n	10006648 <__libc_init_array+0xc>
1000666a:	f855 3b04 	ldr.w	r3, [r5], #4
1000666e:	4798      	blx	r3
10006670:	3601      	adds	r6, #1
10006672:	e7f2      	b.n	1000665a <__libc_init_array+0x1e>
10006674:	100066fc 	.word	0x100066fc
10006678:	100066fc 	.word	0x100066fc
1000667c:	100066fc 	.word	0x100066fc
10006680:	10006700 	.word	0x10006700

10006684 <memset>:
10006684:	4402      	add	r2, r0
10006686:	4603      	mov	r3, r0
10006688:	4293      	cmp	r3, r2
1000668a:	d100      	bne.n	1000668e <memset+0xa>
1000668c:	4770      	bx	lr
1000668e:	f803 1b01 	strb.w	r1, [r3], #1
10006692:	e7f9      	b.n	10006688 <memset+0x4>

10006694 <_init>:
10006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006696:	bf00      	nop
10006698:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000669a:	bc08      	pop	{r3}
1000669c:	469e      	mov	lr, r3
1000669e:	4770      	bx	lr

100066a0 <_fini>:
100066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100066a2:	bf00      	nop
100066a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
100066a6:	bc08      	pop	{r3}
100066a8:	469e      	mov	lr, r3
100066aa:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

100066ac <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
100066ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 100066e4 <LoopForever+0x2>
  movs  r1, #0
100066b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
100066b2:	e003      	b.n	100066bc <LoopCopyDataInit>

100066b4 <CopyDataInit>:
  ldr  r3, =_sidata
100066b4:	4b0c      	ldr	r3, [pc, #48]	; (100066e8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
100066b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
100066b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
100066ba:	3104      	adds	r1, #4

100066bc <LoopCopyDataInit>:
  ldr  r0, =_sdata
100066bc:	480b      	ldr	r0, [pc, #44]	; (100066ec <LoopForever+0xa>)
  ldr  r3, =_edata
100066be:	4b0c      	ldr	r3, [pc, #48]	; (100066f0 <LoopForever+0xe>)
  adds  r2, r0, r1
100066c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
100066c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
100066c4:	d3f6      	bcc.n	100066b4 <CopyDataInit>
  ldr  r2, =_sbss
100066c6:	4a0b      	ldr	r2, [pc, #44]	; (100066f4 <LoopForever+0x12>)
  b  LoopFillZerobss
100066c8:	e002      	b.n	100066d0 <LoopFillZerobss>

100066ca <FillZerobss>:
  movs  r3, #0
100066ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
100066cc:	f842 3b04 	str.w	r3, [r2], #4

100066d0 <LoopFillZerobss>:
  ldr  r3, = _ebss
100066d0:	4b09      	ldr	r3, [pc, #36]	; (100066f8 <LoopForever+0x16>)
  cmp  r2, r3
100066d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
100066d4:	d3f9      	bcc.n	100066ca <FillZerobss>
  bl  SystemInit
100066d6:	f7f9 fcb3 	bl	10000040 <SystemInit>
 bl __libc_init_array
100066da:	f7ff ffaf 	bl	1000663c <__libc_init_array>
  bl main
100066de:	f7f9 fe89 	bl	100003f4 <main>

100066e2 <LoopForever>:
    b LoopForever
100066e2:	e7fe      	b.n	100066e2 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
100066e4:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
100066e8:	10006704 	.word	0x10006704
  ldr  r0, =_sdata
100066ec:	10020000 	.word	0x10020000
  ldr  r3, =_edata
100066f0:	10020020 	.word	0x10020020
  ldr  r2, =_sbss
100066f4:	10020020 	.word	0x10020020
  ldr  r3, = _ebss
100066f8:	10020128 	.word	0x10020128
